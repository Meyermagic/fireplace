initSidebarItems({"constant":[["wlc_backend_type_WLC_BACKEND_DRM",""],["wlc_backend_type_WLC_BACKEND_NONE",""],["wlc_backend_type_WLC_BACKEND_X11",""],["wlc_button_state_WLC_BUTTON_STATE_PRESSED",""],["wlc_button_state_WLC_BUTTON_STATE_RELEASED",""],["wlc_event_bit_WLC_EVENT_ERROR",""],["wlc_event_bit_WLC_EVENT_HANGUP",""],["wlc_event_bit_WLC_EVENT_READABLE",""],["wlc_event_bit_WLC_EVENT_WRITABLE",""],["wlc_key_state_WLC_KEY_STATE_PRESSED",""],["wlc_key_state_WLC_KEY_STATE_RELEASED",""],["wlc_led_bit_WLC_BIT_LED_CAPS",""],["wlc_led_bit_WLC_BIT_LED_NUM",""],["wlc_led_bit_WLC_BIT_LED_SCROLL",""],["wlc_log_type_WLC_LOG_ERROR",""],["wlc_log_type_WLC_LOG_INFO",""],["wlc_log_type_WLC_LOG_WARN",""],["wlc_log_type_WLC_LOG_WAYLAND",""],["wlc_modifier_bit_WLC_BIT_MOD_ALT",""],["wlc_modifier_bit_WLC_BIT_MOD_CAPS",""],["wlc_modifier_bit_WLC_BIT_MOD_CTRL",""],["wlc_modifier_bit_WLC_BIT_MOD_LOGO",""],["wlc_modifier_bit_WLC_BIT_MOD_MOD2",""],["wlc_modifier_bit_WLC_BIT_MOD_MOD3",""],["wlc_modifier_bit_WLC_BIT_MOD_MOD5",""],["wlc_modifier_bit_WLC_BIT_MOD_SHIFT",""],["wlc_pixel_format_WLC_RGBA8888",""],["wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_BOTTOM",""],["wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_LEFT",""],["wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_NONE",""],["wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_RIGHT",""],["wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_TOP",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_FLIP_X",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_FLIP_Y",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_NONE",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_RESIZE_X",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_RESIZE_Y",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_SLIDE_X",""],["wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_SLIDE_Y",""],["wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_BOTTOM",""],["wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_LEFT",""],["wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_NONE",""],["wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_RIGHT",""],["wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_TOP",""],["wlc_renderer_WLC_NO_RENDERER",""],["wlc_renderer_WLC_RENDERER_GLES2",""],["wlc_resize_edge_WLC_RESIZE_EDGE_BOTTOM",""],["wlc_resize_edge_WLC_RESIZE_EDGE_BOTTOM_LEFT",""],["wlc_resize_edge_WLC_RESIZE_EDGE_BOTTOM_RIGHT",""],["wlc_resize_edge_WLC_RESIZE_EDGE_LEFT",""],["wlc_resize_edge_WLC_RESIZE_EDGE_NONE",""],["wlc_resize_edge_WLC_RESIZE_EDGE_RIGHT",""],["wlc_resize_edge_WLC_RESIZE_EDGE_TOP",""],["wlc_resize_edge_WLC_RESIZE_EDGE_TOP_LEFT",""],["wlc_resize_edge_WLC_RESIZE_EDGE_TOP_RIGHT",""],["wlc_scroll_axis_bit_WLC_SCROLL_AXIS_HORIZONTAL",""],["wlc_scroll_axis_bit_WLC_SCROLL_AXIS_VERTICAL",""],["wlc_surface_format_SURFACE_EGL",""],["wlc_surface_format_SURFACE_RGB",""],["wlc_surface_format_SURFACE_RGBA",""],["wlc_surface_format_SURFACE_Y_UV",""],["wlc_surface_format_SURFACE_Y_U_V",""],["wlc_surface_format_SURFACE_Y_XUXV",""],["wlc_touch_type_WLC_TOUCH_CANCEL",""],["wlc_touch_type_WLC_TOUCH_DOWN",""],["wlc_touch_type_WLC_TOUCH_FRAME",""],["wlc_touch_type_WLC_TOUCH_MOTION",""],["wlc_touch_type_WLC_TOUCH_UP",""],["wlc_view_property_update_bit_WLC_BIT_PROPERTY_APP_ID",""],["wlc_view_property_update_bit_WLC_BIT_PROPERTY_CLASS",""],["wlc_view_property_update_bit_WLC_BIT_PROPERTY_PID",""],["wlc_view_property_update_bit_WLC_BIT_PROPERTY_TITLE",""],["wlc_view_state_bit_WLC_BIT_ACTIVATED",""],["wlc_view_state_bit_WLC_BIT_FULLSCREEN",""],["wlc_view_state_bit_WLC_BIT_MAXIMIZED",""],["wlc_view_state_bit_WLC_BIT_MOVING",""],["wlc_view_state_bit_WLC_BIT_RESIZING",""],["wlc_view_type_bit_WLC_BIT_MODAL",""],["wlc_view_type_bit_WLC_BIT_OVERRIDE_REDIRECT",""],["wlc_view_type_bit_WLC_BIT_POPUP",""],["wlc_view_type_bit_WLC_BIT_SPLASH",""],["wlc_view_type_bit_WLC_BIT_UNMANAGED",""]],"fn":[["wlc_event_loop_add_fd","Add fd to event loop. Return value of callback is unused, you should return 0."],["wlc_event_loop_add_timer","Add timer to event loop. Return value of callback is unused, you should return 0."],["wlc_event_source_remove","Remove event source from event loop."],["wlc_event_source_timer_update","Update timer to trigger after delay. Returns true on success."],["wlc_exec","Exec program."],["wlc_get_backend_type","Query backend wlc is using."],["wlc_get_focused_output","Get focused output."],["wlc_get_outputs","Get outputs. Returned array is a direct reference, careful when moving and destroying handles."],["wlc_get_subsurface_geometry","Returns the size of a subsurface and its position relative to parent"],["wlc_get_wl_display","Returns Wayland display."],["wlc_handle_from_wl_output_resource","Returns output handle from wl_output resource."],["wlc_handle_from_wl_surface_resource","Returns view handle from wl_surface resource."],["wlc_handle_get_user_data","Get linked custom data from handle."],["wlc_handle_set_user_data","Link custom data to handle."],["wlc_init","Initialize wlc. Returns false on failure."],["wlc_keyboard_get_current_keys","Get currently held keys."],["wlc_keyboard_get_keysym_for_key","Utility function to convert raw keycode to keysym. Passed modifiers may transform the key."],["wlc_keyboard_get_utf32_for_key","Utility function to convert raw keycode to Unicode/UTF-32 codepoint. Passed modifiers may transform the key."],["wlc_keyboard_get_xkb_keymap","Internal xkb_keymap exposed. You can use it to do more advanced key handling."],["wlc_keyboard_get_xkb_state","Internal xkb_state exposed. You can use it to do more advanced key handling. *  However you should avoid messing up with its state. "],["wlc_log_set_handler","Set log handler. Can be set before wlc_init."],["wlc_output_focus","Focus output. Pass zero for no focus."],["wlc_output_get_gamma_size","Get gamma size"],["wlc_output_get_mask","Get current visibility bitmask."],["wlc_output_get_mutable_views","Get mutable views in creation order. Returned array is a direct reference, careful when moving and destroying handles. This is mainly useful for wm's who need another view stack for inplace sorting. For example tiling wms, may want to use this to keep their tiling order separated from floating order."],["wlc_output_get_name","Get output name."],["wlc_output_get_renderer","Returns currently active renderer on the given output"],["wlc_output_get_resolution","Get real resolution. Resolution applied by either wlc_output_set_resolution call or initially. Do not use this for coordinate boundary."],["wlc_output_get_scale","Get scale factor."],["wlc_output_get_sleep","Get sleep state."],["wlc_output_get_views","Get views in stack order. Returned array is a direct reference, careful when moving and destroying handles."],["wlc_output_get_virtual_resolution","Get virtual resolution. Resolution with transformations applied for proper rendering for example on high density displays. Use this to figure out coordinate boundary."],["wlc_output_schedule_render","Schedules output for rendering next frame. If output was already scheduled this is no-op, if output is currently rendering, it will render immediately after."],["wlc_output_set_gamma","Set gamma. R, G, and B are color ramp arrays of size elements."],["wlc_output_set_mask","Set visibility bitmask."],["wlc_output_set_resolution","Set resolution."],["wlc_output_set_sleep","Wake up / sleep."],["wlc_output_set_views","Set views in stack order. This will also change mutable views. Returns false on failure."],["wlc_pixels_read","Read pixel data from output's framebuffer. If the geometry is out of bounds, it will be automatically clamped. Potentially clamped geometry will be stored in out_geometry, to indicate width / height of the returned data."],["wlc_pixels_write","Write pixel data with the specific format to output's framebuffer. If the geometry is out of bounds, it will be automaticall clamped."],["wlc_pointer_get_position","Get current pointer position."],["wlc_pointer_set_position","Set current pointer position."],["wlc_resource_from_wl_surface_resource","Returns internal wlc surface from wl_surface resource."],["wlc_run","Run event loop."],["wlc_set_compositor_ready_cb","Compositor is ready to accept clients."],["wlc_set_compositor_terminate_cb","Compositor is about to terminate"],["wlc_set_input_created_cb","Input device was created. Return value does nothing. (Experimental)"],["wlc_set_input_destroyed_cb","Input device was destroyed. (Experimental)"],["wlc_set_keyboard_key_cb","Key event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients."],["wlc_set_output_context_created_cb","Output context is created. This generally happens on startup and when current tty changes"],["wlc_set_output_context_destroyed_cb","Output context was destroyed."],["wlc_set_output_created_cb","Output was created. Return false if you want to destroy the output. (e.g. failed to allocate data related to view)"],["wlc_set_output_destroyed_cb","Output was destroyed."],["wlc_set_output_focus_cb","Output got or lost focus."],["wlc_set_output_render_post_cb","Output post render hook."],["wlc_set_output_render_pre_cb","Output pre render hook."],["wlc_set_output_resolution_cb","Output resolution changed."],["wlc_set_pointer_button_cb","Button event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients."],["wlc_set_pointer_motion_cb","Motion event was triggered, view handle will be zero if there was no focus. Apply with wlc_pointer_set_position to agree. Return true to prevent sending the event to clients."],["wlc_set_pointer_scroll_cb","Scroll event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients."],["wlc_set_touch_cb","Touch event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients."],["wlc_set_view_created_cb","View was created. Return false if you want to destroy the view. (e.g. failed to allocate data related to view)"],["wlc_set_view_destroyed_cb","View was destroyed."],["wlc_set_view_focus_cb","View got or lost focus."],["wlc_set_view_move_to_output_cb","View was moved to output."],["wlc_set_view_properties_updated_cb","View properties (title, class, app_id) was updated"],["wlc_set_view_render_post_cb","View post render hook."],["wlc_set_view_render_pre_cb","View pre render hook."],["wlc_set_view_request_geometry_cb","Request to set given geometry for view. Apply using wlc_view_set_geometry to agree."],["wlc_set_view_request_move_cb","Request to move itself. Start a interactive move to agree."],["wlc_set_view_request_resize_cb","Request to resize itself with the given edges. Start a interactive resize to agree."],["wlc_set_view_request_state_cb","Request to disable or enable the given state for view. Apply using wlc_view_set_state to agree."],["wlc_surface_flush_frame_callbacks","Adds frame callbacks of the given surface for the next output frame. It applies recursively to all subsurfaces. Useful when the compositor creates custom animations which require disabling internal rendering, but still need to update the surface textures (for ex. video players)."],["wlc_surface_get_size","Get surface size."],["wlc_surface_get_subsurfaces","Returns a list of the subsurfaces of the given surface"],["wlc_surface_get_textures","Fills out_textures[] with the textures of a surface. Returns false if surface is invalid. Array must have at least 3 elements and should be refreshed at each frame. Note that these are not only OpenGL textures but rather render-specific. For more info what they are check the renderer's source code "],["wlc_surface_get_wl_resource","Return wl_surface resource from internal wlc surface."],["wlc_surface_render","Renders surface."],["wlc_terminate","Terminate wlc."],["wlc_view_bring_above","Send above another view."],["wlc_view_bring_to_front","Bring to front of everything."],["wlc_view_close","Close view."],["wlc_view_focus","Focus view. Pass zero for no focus."],["wlc_view_from_surface","Turns wl_surface into a wlc view. Returns 0 on failure. This will also trigger view.created callback as any view would. For the extra arguments see details of wl_resource_create and wl_resource_set_implementation. The extra arguments may be set NULL, if you are not implementing Wayland interface for the surface role."],["wlc_view_get_app_id","Get app id. (xdg-surface only)"],["wlc_view_get_class","Get class. (shell-surface only)"],["wlc_view_get_geometry","Get current geometry. (what client sees)"],["wlc_view_get_instance","Get instance. (shell-surface only)"],["wlc_view_get_mask","Get current visibility bitmask."],["wlc_view_get_output","Get current output."],["wlc_view_get_parent","Get parent view."],["wlc_view_get_pid","Get pid."],["wlc_view_get_role","Returns surface role resource from view handle. Return value will be NULL if the view was not assigned role or created with wlc_view_create_from_surface()."],["wlc_view_get_state","Get current state bitfield."],["wlc_view_get_surface","Returns internal wlc surface from view handle"],["wlc_view_get_title","Get title."],["wlc_view_get_type","Get type bitfield."],["wlc_view_get_visible_geometry","Get visible geometry. (what wlc displays)"],["wlc_view_get_wl_client","Returns wl_client from view handle"],["wlc_view_positioner_get_anchor","Get anchor requested by positioner, as defined in xdg-shell v6. Returns default value WLC_BIT_ANCHOR_NONE if view has no valid positioner or if positioner has no anchor set."],["wlc_view_positioner_get_anchor_rect","Get anchor rectangle requested by positioner, as defined in xdg-shell v6. Returns NULL if view has no valid positioner."],["wlc_view_positioner_get_constraint_adjustment","Get constraint adjustment requested by positioner, as defined in xdg-shell v6. Returns default value WLC_BIT_CONSTRAINT_ADJUSTMENT_NONE if view has no valid positioner or if positioner has no constraint adjustment set."],["wlc_view_positioner_get_gravity","Get anchor requested by positioner, as defined in xdg-shell v6. Returns default value WLC_BIT_GRAVITY_NONE if view has no valid positioner or if positioner has no gravity set."],["wlc_view_positioner_get_offset","Get offset requested by positioner, as defined in xdg-shell v6. Returns NULL if view has no valid positioner, or default value (0, 0) if positioner has no offset set."],["wlc_view_positioner_get_size","Get size requested by positioner, as defined in xdg-shell v6. Returns NULL if view has no valid positioner"],["wlc_view_send_below","Send below another view."],["wlc_view_send_to_back","Send behind everything."],["wlc_view_set_geometry","Set geometry. Set edges if the geometry change is caused by interactive resize."],["wlc_view_set_mask","Set visibility bitmask."],["wlc_view_set_output","Set output. Alternatively you can wlc_output_set_views."],["wlc_view_set_parent","Set parent view."],["wlc_view_set_state","Set state bit. Toggle indicates whether it is set or not."],["wlc_view_set_type","Set type bit. Toggle indicates whether it is set or not."]],"struct":[["libinput_device",""],["wlc_event_source",""],["wlc_geometry","Fixed 2D point, size pair"],["wlc_modifiers","State of keyboard modifiers in various functions."],["wlc_point","Fixed 2D point"],["wlc_size","Fixed 2D size"],["xkb_keymap",""],["xkb_state",""]],"type":[["__pid_t",""],["pid_t",""],["wlc_backend_type","wlc_get_backend_type();"],["wlc_button_state","State in interface.pointer.button function."],["wlc_event_bit","mask in wlc_event_loop_add_fd();"],["wlc_handle",""],["wlc_key_state","State in interface.keyboard.key function."],["wlc_led_bit","Leds in interface.keyboard.key function."],["wlc_log_type","wlc_log(), wlc_vlog();"],["wlc_modifier_bit","Mods in interface.keyboard.key function."],["wlc_pixel_format","Allowed pixel formats."],["wlc_positioner_anchor_bit","wlc_view_positioner_get_anchor();"],["wlc_positioner_constraint_adjustment_bit","wlc_view_positioner_get_gravity();"],["wlc_positioner_gravity_bit","wlc_view_positioner_get_gravity();"],["wlc_renderer","Enabled renderers"],["wlc_resize_edge","wlc_view_set_geometry(); Edges in interface interface.view.request.resize function."],["wlc_resource",""],["wlc_scroll_axis_bit","Axis in interface.pointer.scroll function."],["wlc_surface_format",""],["wlc_touch_type","Type in interface.touch.touch function"],["wlc_view_property_update_bit","wlc_set_view_properties_updated_cb();"],["wlc_view_state_bit","wlc_view_get_state();"],["wlc_view_type_bit","wlc_view_get_type();"]]});