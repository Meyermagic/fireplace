var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["anymap"] = {"doc":"This crate provides the `AnyMap` type, a safe and convenient store for one value of each type.","items":[[3,"Map","anymap","A collection containing zero or one values for any given type and allowing convenient, type-safe access to those values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in an `Map`.",null,null],[3,"VacantEntry","","A view into a single empty location in an `Map`.",null,null],[4,"Entry","","A view into a single location in an `Map`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry",0,null],[13,"Vacant","","A vacant Entry",0,null],[0,"any","","The different types of `Any` for use in a map.",null,null],[8,"UncheckedAnyExt","anymap::any","",null,null],[10,"downcast_ref_unchecked","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"downcast_mut_unchecked","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"downcast_unchecked","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[8,"Any","","See also `CloneAny` for a cloneable version of this trait.",null,null],[8,"CloneAny","","See also `Any` for a version without the `Clone` requirement.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[0,"raw","anymap","The raw form of a `Map`, allowing untyped access.",null,null],[3,"RawMap","anymap::raw","The raw, underlying form of a `Map`.",null,null],[3,"Iter","","`RawMap` iterator.",null,null],[3,"IterMut","","`RawMap` mutable iterator.",null,null],[3,"IntoIter","","`RawMap` move iterator.",null,null],[3,"Drain","","`RawMap` drain iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `RawMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `RawMap`.",null,null],[4,"Entry","","A view into a single location in a `RawMap`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry",4,null],[13,"Vacant","","A vacant Entry",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rawmap"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"rawmap"}}],[11,"new","","Create an empty collection.",5,{"inputs":[],"output":{"name":"rawmap"}}],[11,"with_capacity","","Creates an empty collection with the given initial capacity.",5,{"inputs":[{"name":"usize"}],"output":{"name":"rawmap"}}],[11,"capacity","","Returns the number of elements the collection can hold without reallocating.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the collection. The collection may reserve more space to avoid frequent reallocations.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of items in the collection.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no items in the collection.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all items from the collection. Keeps the allocated memory for reuse.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","An iterator visiting all entries in arbitrary order.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all entries in arbitrary order.",5,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"drain","","Clears the map, returning all items as an iterator.",5,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"entry","","Gets the entry for the given type in the collection for in-place manipulation.",5,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"entry"}}],[11,"get","","Returns a reference to the value corresponding to the key.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value present in the map, that value is returned. Otherwise, None is returned.",5,{"inputs":[{"name":"self"},{"name":"typeid"},{"name":"box"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"a"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"a"}}],[11,"into_iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",4,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"a"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"a"}}],[11,"get","","Gets a reference to the value in the entry.",10,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",10,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the collection itself.",10,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"box"}}],[11,"remove","","Takes the value out of the entry, and returns it.",10,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",11,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"a"}}],[6,"AnyMap","anymap","The most common type of `Map`: just using `Any`.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"new","","Create an empty collection.",12,{"inputs":[],"output":{"name":"map"}}],[11,"with_capacity","","Creates an empty collection with the given initial capacity.",12,{"inputs":[{"name":"usize"}],"output":{"name":"map"}}],[11,"capacity","","Returns the number of elements the collection can hold without reallocating.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the collection. The collection may reserve more space to avoid frequent reallocations.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of items in the collection.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no items in the collection.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all items from the collection. Keeps the allocated memory for reuse.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value stored in the collection for the type `T`, if it exists.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value stored in the collection for the type `T`, if it exists.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","Sets the value stored in the collection for the type `T`. If the collection already had a value of type `T`, that value is returned. Otherwise, `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes the `T` value from the collection, returning it if there was one or `None` if there was not.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","","Returns true if the collection contains a value of type `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"entry","","Gets the entry for the given type in the collection for in-place manipulation",12,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"rawmap"}}],[11,"as_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"rawmap"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"name":"rawmap"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry",13,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry",13,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the collection itself",13,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",13,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[8,"UncheckedAnyExt"],[8,"Any"],[8,"CloneAny"],[4,"Entry"],[3,"RawMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Map"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["arrayvec"] = {"doc":"**arrayvec** provides the types `ArrayVec` and `ArrayString`: array-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",3,null],[11,"insert","","Insert `element` in position `index`.",3,null],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[6,"__BitFlagsWidth","bitflags","",null,null],[14,"bitflags","","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",3,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",3,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",3,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",3,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",3,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",3,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",3,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",3,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",3,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",3,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",3,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",3,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",3,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",3,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",3,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["chrono"] = {"doc":"Chrono 0.2.25","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"local_minus_utc","","",2,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"local_minus_utc","","",3,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",7,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"duration"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"duration"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset. The local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"date"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"duration"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"date"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is *not* left-aligned; see also `Fixed::Nanosecond`.",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear","","Year in the ISO week date.",16,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",19,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",19,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",20,null],[10,"month","","Returns the month number starting from 1.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",20,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",20,null],[10,"with_year","","Makes a new value with the year number changed.",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",21,null],[10,"minute","","Returns the minute number from 0 to 59.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"succ","","The next day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"weeks","chrono::duration","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",22,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",22,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",22,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",22,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",22,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"mul","","",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"neg","","",22,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"sub","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"]]};
searchIndex["color_quant"] = {"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage ``` let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba(); ```","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["conrod"] = {"doc":"Conrod","items":[[3,"Ui","conrod","`Ui` is the most important type within Conrod and is necessary for rendering and maintaining widget state. # Ui Handles the following: * Contains the state of all widgets which can be indexed via their widget::Id. * Stores rendering state for each widget until the end of each render cycle. * Contains the theme used for default styling of the widgets. * Maintains the latest user input state (for mouse and keyboard). * Maintains the latest window dimensions.",null,null],[12,"theme","","The theme used to set default styling for widgets.",0,null],[12,"window","","An index into the root widget of the graph, representing the entire window.",0,null],[12,"global_input","","Handles aggregation of events and providing them to Widgets",0,null],[12,"fonts","","Manages all fonts that have been loaded by the user.",0,null],[12,"win_w","","Window width.",0,null],[12,"win_h","","Window height.",0,null],[3,"UiCell","","A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while in the scope of the `Ui::set_widgets` function and within `Widget`s' `update` methods. Using the `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they may only mutate the `Ui` via the `&mut self` methods provided by the `UiCell`.",null,null],[3,"UiBuilder","","A constructor type for building a `Ui` instance with a set of optional parameters.",null,null],[12,"window_dimensions","","The initial dimensions of the window in which the `Ui` exists.",1,null],[12,"maybe_theme","","The theme used to set default styling for widgets.",1,null],[12,"maybe_widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",1,null],[4,"Bordering","","To be used as a parameter for defining the aesthetic of the widget border.",null,null],[13,"Border","","Border width and color.",2,null],[13,"NoBorder","","No border.",2,null],[0,"backend","","Feature-gated, backend-specific functionality.",null,null],[0,"piston","conrod::backend","Functionality for simplifying the work involved when using conrod along-side piston.",null,null],[0,"draw","conrod::backend::piston","A piston backend for rendering conrod primitives.",null,null],[3,"Context","conrod::backend::piston::draw","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",3,null],[12,"view","","View transformation.",3,null],[12,"transform","","Current transformation.",3,null],[12,"draw_state","","Current draw state settings.",3,null],[3,"DrawState","","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this rectangle (in screen space) will be written to as a result of rendering.",4,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",4,null],[12,"blend","","Blend function to use. If None, blending is disabled.",4,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",5,null],[10,"clear_color","","Clears background with a color.",5,null],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",5,null],[10,"tri_list","","Renders list of 2d triangles using a solid color.",5,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",5,null],[11,"rectangle","","Draws a rectangle.",5,null],[11,"polygon","","Draws a polygon.",5,null],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",5,null],[11,"image","","Draws image.",5,null],[11,"ellipse","","Draws ellipse.",5,null],[11,"line","","Draws line.",5,null],[11,"circle_arc","","Draws circle arc.",5,null],[11,"deform_image","","Draws deformed image.",5,null],[8,"ImageSize","","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",6,null],[11,"get_width","","Gets the image width.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",7,null],[10,"prepend_transform","","Prepends transform to the current one.",7,null],[10,"trans","","Translate x an y in local coordinates.",7,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[10,"orient","","Orients x axis to look at point locally.",7,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[10,"scale","","Scales in local coordinates.",7,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"shear","","Shears in local coordinates.",7,null],[5,"primitives","","Render the given sequence of conrod primitive widgets.",null,{"inputs":[{"name":"p"},{"name":"context"},{"name":"g"},{"name":"t"},{"name":"glyphcache"},{"name":"map"},{"name":"c"},{"name":"f"}],"output":null}],[5,"primitive","","Render a single `Primitive`.",null,{"inputs":[{"name":"primitive"},{"name":"context"},{"name":"g"},{"name":"t"},{"name":"glyphcache"},{"name":"map"},{"name":"vec"},{"name":"c"},{"name":"f"}],"output":null}],[0,"event","conrod::backend::piston","A backend for converting piston events to conrod's `Input` type.",null,null],[8,"GenericEvent","conrod::backend::piston::event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",8,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",9,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",9,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[5,"convert","","Converts any `GenericEvent` to an `Input` event for conrod.",null,{"inputs":[{"name":"e"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"option"}}],[11,"clone","conrod","",2,{"inputs":[{"name":"self"}],"output":{"name":"bordering"}}],[0,"color","","",null,null],[3,"Hsla","conrod::color","The parts of HSL along with an alpha for transparency.",null,null],[12,"0","","",10,null],[12,"1","","",10,null],[12,"2","","",10,null],[12,"3","","",10,null],[3,"Rgba","","The parts of RGB along with an alpha for transparency.",null,null],[12,"0","","",11,null],[12,"1","","",11,null],[12,"2","","",11,null],[12,"3","","",11,null],[4,"Color","","Color supporting RGB and HSL variants.",null,null],[13,"Rgba","","Red, Green, Blue, Alpha - All values' scales represented between 0.0 and 1.0.",12,null],[13,"Hsla","","Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.",12,null],[4,"Gradient","","Linear or Radial Gradient.",null,null],[13,"Linear","","Takes a start and end point and then a series of color stops that indicate how to interpolate between the start and end points.",13,null],[13,"Radial","","First takes a start point and inner radius. Then takes an end point and outer radius. It then takes a series of color stops that indicate how to interpolate between the inner and outer circles.",13,null],[5,"rgba","","Create RGB colors with an alpha component for transparency. The alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb","","Create RGB colors from numbers between 0.0 and 1.0.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgba_bytes","","Create RGB colors from numbers between 0 and 255 inclusive. The alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb_bytes","","Create RGB colors from numbers between 0 and 255 inclusive.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[5,"hsla","","Create HSL colors with an alpha component for transparency.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"hsl","","Create HSL colors. This gives you access to colors more like a color wheel, where all hues are arranged in a circle that you specify with radians.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"grayscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"greyscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"f32_to_byte","","Convert an f32 color to a byte.",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"rgb_to_hsl","","Pure function for converting rgb to hsl.",null,null],[5,"hsl_to_rgb","","Pure function for converting hsl to rgb.",null,null],[5,"linear","","Create a linear gradient.",null,null],[5,"radial","","Create a radial gradient.",null,null],[6,"Colour","","Regional spelling alias.",null,null],[17,"LIGHT_RED","","Scarlet Red - Light - #EF2929",null,null],[17,"RED","","Scarlet Red - Regular - #CC0000",null,null],[17,"DARK_RED","","Scarlet Red - Dark - #A30000",null,null],[17,"LIGHT_ORANGE","","Orange - Light - #FCAF3E",null,null],[17,"ORANGE","","Orange - Regular - #F57900",null,null],[17,"DARK_ORANGE","","Orange - Dark - #CE5C00",null,null],[17,"LIGHT_YELLOW","","Butter - Light - #FCE94F",null,null],[17,"YELLOW","","Butter - Regular - #EDD400",null,null],[17,"DARK_YELLOW","","Butter - Dark - #C4A000",null,null],[17,"LIGHT_GREEN","","Chameleon - Light - #8AE234",null,null],[17,"GREEN","","Chameleon - Regular - #73D216",null,null],[17,"DARK_GREEN","","Chameleon - Dark - #4E9A06",null,null],[17,"LIGHT_BLUE","","Sky Blue - Light - #729FCF",null,null],[17,"BLUE","","Sky Blue - Regular - #3465A4",null,null],[17,"DARK_BLUE","","Sky Blue - Dark - #204A87",null,null],[17,"LIGHT_PURPLE","","Plum - Light - #AD7FA8",null,null],[17,"PURPLE","","Plum - Regular - #75507B",null,null],[17,"DARK_PURPLE","","Plum - Dark - #5C3566",null,null],[17,"LIGHT_BROWN","","Chocolate - Light - #E9B96E",null,null],[17,"BROWN","","Chocolate - Regular - #C17D11",null,null],[17,"DARK_BROWN","","Chocolate - Dark - #8F5902",null,null],[17,"BLACK","","Straight Black.",null,null],[17,"WHITE","","Straight White.",null,null],[17,"LIGHT_GRAY","","Alluminium - Light",null,null],[17,"GRAY","","Alluminium - Regular",null,null],[17,"DARK_GRAY","","Alluminium - Dark",null,null],[17,"LIGHT_GREY","","Aluminium - Light - #EEEEEC",null,null],[17,"GREY","","Aluminium - Regular - #D3D7CF",null,null],[17,"DARK_GREY","","Aluminium - Dark - #BABDB6",null,null],[17,"LIGHT_CHARCOAL","","Charcoal - Light - #888A85",null,null],[17,"CHARCOAL","","Charcoal - Regular - #555753",null,null],[17,"DARK_CHARCOAL","","Charcoal - Dark - #2E3436",null,null],[17,"TRANSPARENT","","Transparent",null,null],[8,"Colorable","","Types that can be colored.",null,null],[10,"color","","Set the color of the widget.",14,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"rgba","","Set the color of the widget from rgba values.",14,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"rgb","","Set the color of the widget from rgb values.",14,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsla","","Set the color of the widget from hsla values.",14,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsl","","Set the color of the widget from hsl values.",14,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"complement","","Produce a complementary color. The two colors will accent each other. This is the same as rotating the hue by 180 degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"luminance","","Calculate and return the luminance of the Color.",12,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"plain_contrast","","Return either black or white, depending which contrasts the Color the most. This will be useful for determining a readable color for text on any given background Color.",12,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_hsl","","Extract the components of a color in the HSL format.",12,{"inputs":[{"name":"self"}],"output":{"name":"hsla"}}],[11,"to_rgb","","Extract the components of a color in the RGB format.",12,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_fsa","","Extract the components of a color in the RGB format within a fixed-size array.",12,null],[11,"to_byte_fsa","","Same as `to_fsa`, except r, g, b and a are represented in byte form.",12,null],[11,"with_luminance","","Return the same color but with the given luminance.",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"alpha","","Return the same color but with the alpha multiplied by the given alpha.",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"with_alpha","","Return the same color but with the given alpha.",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"highlighted","","Return a highlighted version of the current Color.",12,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clicked","","Return a clicked version of the current Color.",12,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"invert","","Return the Color's invert.",12,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"red","","Return the red value.",12,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"green","","Return the green value.",12,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"blue","","Return the blue value.",12,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_red","","Set the red value.",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_green","","Set the green value.",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_blue","","Set the blue value.",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hsla"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"event","conrod","Contains all types used to describe the input events that `Widget`s may handle.",null,null],[3,"Text","conrod::event","Contains all relevant information for a Text event.",null,null],[12,"string","","All text that was entered as a part of the event.",15,null],[12,"modifiers","","The modifier keys that were down at the time.",15,null],[3,"Move","","Contains all relevant information for a Motion event.",null,null],[12,"motion","","The type of `Motion` that occurred.",16,null],[12,"modifiers","","The modifier keys that were down at the time.",16,null],[3,"Press","","Contains all relevant information for a Press event.",null,null],[12,"button","","The `Button` that was pressed.",17,null],[12,"modifiers","","The modifier keys that were down at the time.",17,null],[3,"MousePress","","Contains all relevant information for the event where a mouse button was pressed.",null,null],[12,"button","","The mouse button that was pressed.",18,null],[12,"xy","","The location at which the mouse was pressed.",18,null],[12,"modifiers","","The modifier keys that were down at the time.",18,null],[3,"KeyPress","","Contains all relevant information for the event where a keyboard button was pressed.",null,null],[12,"key","","The key that was pressed.",19,null],[12,"modifiers","","The modifier keys that were down at the time.",19,null],[3,"Release","","Contains all relevant information for a Release event.",null,null],[12,"button","","The `Button` that was released.",20,null],[12,"modifiers","","The modifier keys that were down at the time.",20,null],[3,"MouseRelease","","Contains all relevant information for the event where a mouse button was released.",null,null],[12,"button","","The mouse button that was released.",21,null],[12,"xy","","The location at which the mouse was released.",21,null],[12,"modifiers","","The modifier keys that were down at the time.",21,null],[3,"KeyRelease","","Contains all relevant information for the event where a keyboard button was release.",null,null],[12,"key","","The key that was release.",22,null],[12,"modifiers","","The modifier keys that were down at the time.",22,null],[3,"Drag","","Contains all the relevant information for a mouse drag.",null,null],[12,"button","","Which mouse button was being held during the drag",23,null],[12,"origin","","The point from which the current series of drag events began.",23,null],[12,"from","","The point from which this drag event began.",23,null],[12,"to","","The point at which this drag event ended.",23,null],[12,"delta_xy","","The magnitude of the vector between `from` and `to`.",23,null],[12,"total_delta_xy","","The magnitude of the vector between `origin` and `to`.",23,null],[12,"modifiers","","Which modifier keys are being held during the mouse drag.",23,null],[3,"Click","","Contains all the relevant information for a mouse click.",null,null],[12,"button","","Which mouse button was clicked",24,null],[12,"xy","","The position at which the mouse was released.",24,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",24,null],[3,"DoubleClick","","Contains all the relevant information for a double click.",null,null],[12,"button","","Which mouse button was clicked",25,null],[12,"xy","","The position at which the mouse was released.",25,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",25,null],[3,"Scroll","","Holds all the relevant information about a scroll event",null,null],[12,"x","","The amount of scroll along the x axis.",26,null],[12,"y","","The amount of scroll along the y axis.",26,null],[12,"modifiers","","Which modifier keys, if any, that were being held down while the scroll occured",26,null],[4,"Input","","The event type that is used by conrod to track inputs from the world. Events yielded by polling window backends should be converted to this type. This can be thought of as the event type which is supplied by the window backend to drive the state of the `Ui` forward.",null,null],[13,"Press","","A button on some input device was pressed.",27,null],[13,"Release","","A button on some input device was released.",27,null],[13,"Resize","","The window was received to the given dimensions.",27,null],[13,"Move","","Some motion input was received (e.g. moving mouse, joystick or touch pad).",27,null],[13,"Text","","Text input was received, usually via the keyboard.",27,null],[13,"Focus","","The window was focused or lost focus.",27,null],[4,"Event","","Enum containing all the events that the `Ui` may provide.",null,null],[13,"Raw","","Represents a raw `input::Input` event.",28,null],[13,"Ui","","Events that have been interpreted from `backend::RawEvent`s by the `Ui`.",28,null],[4,"Ui","","Represents all events interpreted by the `Ui`.",null,null],[13,"Text","","Entered text, along with the widget that was capturing the keyboard at the time.",29,null],[13,"Press","","Some button was pressed, along with the widget that was capturing the device whose button which was pressed.",29,null],[13,"Release","","Some button was released, along with the widget that was capturing the device whose button which was released.",29,null],[13,"Move","","Represents all forms of motion input, alongside with the widget that was capturing the mouse at the time.",29,null],[13,"WindowResized","","The window's dimensions were resized.",29,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",29,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",29,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",29,null],[13,"Scroll","","A generic scroll event.",29,null],[13,"WidgetCapturesMouse","","Indicates that the given widget has captured the mouse.",29,null],[13,"WidgetUncapturesMouse","","Indicates that the given widget has released the mouse from capturing.",29,null],[13,"WidgetCapturesKeyboard","","Indicates that the given widget has captured the keyboard.",29,null],[13,"WidgetUncapturesKeyboard","","Indicates that the given widget has released the keyboard from capturing.",29,null],[4,"Widget","","Events that apply to a specific widget.",null,null],[13,"Text","","Entered text.",30,null],[13,"Move","","Represents all forms of motion input.",30,null],[13,"Press","","Some button was pressed.",30,null],[13,"Release","","Some button was released.",30,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",30,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",30,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",30,null],[13,"Scroll","","Represents the amount of scroll that has been applied to this widget.",30,null],[13,"WindowResized","","The window's dimensions were resized.",30,null],[13,"CapturesMouse","","The widget has captured the mouse.",30,null],[13,"UncapturesMouse","","The widget has released the mouse from capturing.",30,null],[13,"CapturesKeyboard","","The widget has captured the keyboard.",30,null],[13,"UncapturesKeyboard","","Indicates that the given widget has released the keyboard from capturing.",30,null],[4,"Button","","The different kinds of `Button`s that may be `Press`ed or `Release`d.",null,null],[13,"Keyboard","","A keyboard button.",31,null],[13,"Mouse","","A mouse button along with the location at which it was `Press`ed/`Release`d.",31,null],[13,"Controller","","A controller button.",31,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"press"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"press"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"press"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mousepress"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"mousepress"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"mousepress"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"keypress"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"keypress"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"keypress"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"release"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"release"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"release"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mouserelease"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mouserelease"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mouserelease"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"keyrelease"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"keyrelease"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"keyrelease"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"click"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"click"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"click"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"doubleclick"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"doubleclick"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"doubleclick"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"scroll"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relative_to","","Returns a copy of the `Move` relative to the given `xy`",16,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"move"}}],[11,"relative_to","","Returns a copy of the Button relative to the given `xy`",31,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"button"}}],[11,"relative_to","","Returns a copy of the Press relative to the given `xy`",17,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"press"}}],[11,"mouse","","If the `Press` event represents the pressing of a mouse button, return `Some`.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"key","","If the `Press` event represents the pressing of keyboard button, return `Some`.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"relative_to","","Returns a copy of the Release relative to the given `xy`",20,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"release"}}],[11,"mouse","","If the `Release` event represents the releasing of a mouse button, return `Some`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"key","","If the `Release` event represents the release of keyboard button, return `Some`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"relative_to","","Returns a copy of the Click relative to the given `xy`",24,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"click"}}],[11,"relative_to","","Returns a copy of the DoubleClick relative to the given `xy`",25,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"doubleclick"}}],[11,"relative_to","","Returns a copy of the Drag relative to the given `xy`",23,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"drag"}}],[11,"from","","",28,{"inputs":[{"name":"ui"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"input"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"move"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"press"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"release"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"click"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"doubleclick"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"scroll"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"drag"}],"output":{"name":"self"}}],[0,"graph","conrod","Conrod uses a directed acyclic graph to manage both storing widgets and describing their relationships.",null,null],[8,"Walker","conrod::graph","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",32,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given **Graph**.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given **Graph**.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_node","","The next node in our walk for the given **Graph**.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",32,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",32,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",32,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",32,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",32,{"inputs":[{"name":"self"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",32,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iterweights"}}],[3,"UniqueWidgetState","","The state type that we'll dynamically cast to and from `Any` for storage within the cache.",null,null],[12,"state","","A **Widget**'s unique \"State\".",33,null],[12,"style","","A **Widget**'s unique \"Style\".",33,null],[3,"Container","","A container for caching a Widget's state inside a Graph Node.",null,null],[12,"maybe_state","","Dynamically stored widget state.",34,null],[12,"type_id","","The unique `TypeId` associated with the `Widget::State`.",34,null],[12,"rect","","The rectangle describing the Widget's area.",34,null],[12,"depth","","The depth at which the widget will be rendered comparatively to its siblings.",34,null],[12,"kid_area","","The area in which child widgets are placed.",34,null],[12,"maybe_floating","","Whether or not the widget is a \"Floating\" widget.",34,null],[12,"crop_kids","","Whether or not children widgets should be cropped to the `kid_area`.",34,null],[12,"maybe_x_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",34,null],[12,"maybe_y_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",34,null],[12,"instantiation_order_idx","","Represents the Widget's position within the overall instantiation ordering of the widgets.",34,null],[3,"Graph","","Stores the dynamic state of a UI tree of Widgets.",null,null],[4,"Node","","A node for use within the **Graph**.",null,null],[13,"Widget","","A widget constructed by a user.",35,null],[13,"Placeholder","","A placeholder node - used when reserving a place for a **Widget** within the **Graph**.",35,null],[4,"Edge","","An edge between nodes within the UI Graph.",null,null],[13,"Position","","Describes the relative positioning of widgets.",36,null],[13,"Depth","","Describes the rendering order of the widgets.",36,null],[13,"Graphic","","Describes when a widget is used solely as a graphical element for another widget.",36,null],[0,"algo","","This module was created in order to keep the `graph` module clean and focused upon the **Graph** data structure behaviour.",null,null],[3,"PickWidgets","conrod::graph::algo","A node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[3,"PickScrollableWidgets","","A node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_widgets","","Produces a graph node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_scrollable_widgets","","Produces a graph node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"cropped_area_of_widget","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"}],"output":{"name":"option"}}],[5,"cropped_area_of_widget_within_depth","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"},{"name":"id"}],"output":{"name":"option"}}],[5,"kids_bounding_box","","Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the given `idx`.",null,{"inputs":[{"name":"graph"},{"name":"hashset"},{"name":"id"}],"output":{"name":"option"}}],[5,"scroll_offset","","Return the `scroll_offset` for the widget at the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"}],"output":{"name":"point"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pickwidgets"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"pickscrollablewidgets"}}],[11,"next_including_graphics_children","","The next `widget::Id` under the `xy` location.",37,null],[11,"next","","The `widget::Id` of the next `Widget` under the `xy` location.",37,null],[11,"next","","The `widget::Id` of the next scrollable `Widget` under the `xy` location.",38,null],[0,"depth_order","conrod::graph","Types and functionality related to the calculation of a **Graph**'s rendering depth order.",null,null],[3,"DepthOrder","conrod::graph::depth_order","Contains Node indices in order of depth, starting with the deepest.",null,null],[12,"indices","","The primary **Vec** storing the **DepthOrder**'s ordered indices.",39,null],[11,"new","","Construct a new empty **DepthOrder**.",39,{"inputs":[],"output":{"name":"depthorder"}}],[11,"with_node_capacity","","Construct a new empty **DepthOrder**.",39,{"inputs":[{"name":"usize"}],"output":{"name":"depthorder"}}],[11,"update","","Update the **DepthOrder** (starting with the deepest) for all nodes in the given **Graph**.",39,{"inputs":[{"name":"self"},{"name":"graph"},{"name":"id"},{"name":"hashset"}],"output":null}],[6,"EdgeIndex","conrod::graph","An alias for our Graph's Edge Index.",null,null],[6,"IndexPair","","An alias for a tuple containing an associated `Edge/widget::Id` pair.",null,null],[6,"Parents","","A **Walker** over some node's parent nodes.",null,null],[6,"Children","","A **Walker** over some node's child nodes.",null,null],[6,"PositionParents","","An alias for the iterator yielding both **X** and **Y** **Position** parents.",null,null],[6,"FilteredChildren","","An alias for some filtered children walker.",null,null],[6,"DepthChildren","","An alias for a **Walker** over a node's **Depth** children.",null,null],[6,"XPositionChildren","","An alias for a **Walker** over a node's **X Position** children.",null,null],[6,"YPositionChildren","","An alias for a **Walker** over a node's **Y Position** children.",null,null],[6,"PositionChildren","","An alias for a **Walker** over a node's **X** and **Y** **Position** children respectively.",null,null],[6,"GraphicChildren","","An alias for a **Walker** over a node's **Graphic** children.",null,null],[6,"RecursiveWalk","","An alias for our Graph's recursive walker.",null,null],[6,"WouldCycle","","An alias for our Graph's **WouldCycle** error type.",null,null],[17,"NUM_EDGE_VARIANTS","","The number of different variants within the **Edge** enum.",null,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"state_and_style","","Borrow the **Container**'s unique widget State and Style if there is any.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unique_widget_state","","Same as **Container::state_and_style** but accessed using a **Widget** type parameter instead of the unique State and Style types.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_widget","","Whether or not the **Node** is of the **Widget** variant.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","A new empty **Graph**.",40,{"inputs":[],"output":{"name":"self"}}],[11,"with_node_capacity","","A new **Graph** with the given node capacity.",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all **Node**s and **Edge**s from the **Graph**.",40,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","The total number of **Node**s in the **Graph**.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"widget_count","","The total number of **Node::Widget**s in the **Graph**.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of **Edge**s in the **Graph**.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_capacity","","The current capacity for the **Graph**'s internal node `Vec`.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_placeholder","","Add a new placeholder node and return it's `widget::Id` into the `Graph`.",40,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node","","Borrow the node at the given **widget::Id** if there is one.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"node_mut","","Mutably borrow the node at the given **widget::Id** if there is one.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"edge","","Borrow the edge at the given **EdgeIndex** if there is one.",40,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_mut","","Mutably borrow the edge at the given **EdgeIndex** if there is one.",40,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Return the parent and child nodes on either end of the **Edge** at the given index.",40,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"widget","","If there is a Widget for the given index, return a reference to it.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"widget_mut","","If there is a Widget for the given Id, return a mutable reference to it.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"parents"}}],[11,"recursive_walk","","A **Walker** type that recursively walks the **Graph** using the given `recursive_fn`.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"edge_parent","","If the widget at the given index has some parent along an **Edge** of the given variant, return an index to it.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"edge"}],"output":{"name":"option"}}],[11,"depth_parent","","Return the index of the parent along the given widget's **Depth** **Edge**.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"x_position_parent","","Return the index of the parent along the given widget's **Position** **Edge**.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"y_position_parent","","Return the index of the parent along the given widget's **Position** **Edge**.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"position_parents","","Produces an iterator yielding the parents along both the **X** and **Y** **Position** **Edge**s respectively.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"positionparents"}}],[11,"graphic_parent","","Return the index of the parent along the given widget's **Graphic** **Edge**.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"depth_parent_recursion","","A **Walker** type that recursively walks **Depth** parents starting from the given node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"x_position_parent_recursion","","A **Walker** type that recursively walks **X** **Position** parents starting from the given node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"y_position_parent_recursion","","A **Walker** type that recursively walks **Y** **Position** parents starting from the given node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"graphic_parent_recursion","","A **Walker** type that recursively walks **Graphic** parents starting from the given node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"scrollable_y_parent_recursion","","A **Walker** type that recursively walks **Depth** parents that are scrollable along the *y* axis for the given node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"scrollable_x_parent_recursion","","A **Walker** type that recursively walks **Depth** parents that are scrollable along the *x* axis for the given node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"children","","A **Walker** type that may be used to step through the children of the given parent node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"children"}}],[11,"depth_children","","For walking the **Depth** children of the given parent node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"depthchildren"}}],[11,"x_position_children","","For walking the **Position(X)** children of the given parent node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"xpositionchildren"}}],[11,"y_position_children","","For walking the **Position(Y)** children of the given parent node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ypositionchildren"}}],[11,"position_children","","For walking the **Position** children of the given parent node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"positionchildren"}}],[11,"graphic_children","","For walking the **Graphic** children of the given parent node.",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"graphicchildren"}}],[11,"does_edge_exist","","Does the given edge type exist between the nodes `parent` -> `child`.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_depth_edge_exist","","Does a **Edge::Depth** exist between the nodes `parent` -> `child`.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_position_edge_exist","","Does a **Edge::Position** exist between the nodes `parent` -> `child`.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_graphic_edge_exist","","Does a **Edge::Graphic** exist between the nodes `parent` -> `child`.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_recursive_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of edges of the given kind?",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_recursive_depth_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of **Depth** edges?",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_recursive_graphic_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of **Graphic** edges?",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"pre_update_cache","","Cache some `PreUpdateCache` widget data into the graph.",40,{"inputs":[{"name":"self"},{"name":"id"},{"name":"preupdatecache"},{"name":"usize"}],"output":null}],[11,"post_update_cache","","Cache some `PostUpdateCache` widget data into the graph.",40,{"inputs":[{"name":"self"},{"name":"postupdatecache"}],"output":null}],[11,"next","","",41,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next","","",42,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"index","","",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"node"}}],[11,"index_mut","","",40,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"node"}}],[11,"index","","",40,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"index_mut","","",40,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[0,"guide","conrod","**The Conrod Guide**",null,null],[0,"chapter_1","conrod::guide","**What is Conrod?**",null,null],[0,"chapter_2","","**Getting Started**",null,null],[0,"image","conrod","A type used to manage a user's image data and map them to `Image` widgets:",null,null],[3,"Id","conrod::image","Unique image identifier.",null,null],[3,"Map","","A type used to map the `widget::Id` of `Image` widgets to their associated `Img` data.",null,null],[12,"trigger_redraw","","Whether or not the `image::Map` will trigger a redraw the next time `Ui::draw` is called.",43,null],[3,"NewIds","","An iterator yielding an `Id` for each new `Img` inserted into the `Map` via the `extend` method.",null,null],[6,"HashMap","","The type of `std::collections::HashMap` used within the `image::Map`.",null,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"deref","","",43,null],[11,"new","","Construct a new, empty `image::Map`.",43,{"inputs":[],"output":{"name":"self"}}],[11,"get_mut","","Uniquely borrow the `Img` associated with the given widget.",43,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"insert","","Inserts the given image into the map, returning its associated `image::Id`. The user *must* store the returned `image::Id` in order to use, modify or remove the inserted image.",43,{"inputs":[{"name":"self"},{"name":"img"}],"output":{"name":"id"}}],[11,"replace","","Replaces the given image in the map if it exists. Returns the image or None.",43,{"inputs":[{"name":"self"},{"name":"id"},{"name":"img"}],"output":{"name":"option"}}],[11,"remove","","Removes the given image from the map if it exists. Returns the image or None.",43,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"extend","","Insert each of the images yielded by the given iterator and produce an iterator yielding their generated `Ids` in the same order.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"newids"}}],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"input","conrod","This module contains all the logic for handling input events and providing them to widgets.",null,null],[3,"ModifierKey","conrod::input","",null,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",46,null],[13,"Mouse","","A mouse button.",46,null],[13,"Controller","","A controller button.",46,null],[3,"ControllerButton","","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",47,null],[12,"button","","Which button was pressed.",47,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",48,null],[12,"axis","","The axis that moved.",48,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",48,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","conrod::input::keyboard","",null,null],[17,"NO_MODIFIER","","No modifier.",null,null],[17,"CTRL","","Ctrl.",null,null],[17,"SHIFT","","Shift.",null,null],[17,"ALT","","Alt.",null,null],[17,"GUI","","Gui.",null,null],[17,"CTRL_SHIFT","","Ctrl + Shift.",null,null],[17,"CTRL_ALT","","Ctrl + Alt.",null,null],[17,"CTRL_GUI","","Ctrl + Gui.",null,null],[17,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",null,null],[17,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",null,null],[17,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",null,null],[17,"SHIFT_ALT","","Shift + Alt.",null,null],[17,"SHIFT_GUI","","Shift + Gui.",null,null],[17,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",null,null],[17,"ALT_GUI","","Alt + Gui.",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",49,null],[13,"Backspace","","",49,null],[13,"Tab","","",49,null],[13,"Return","","",49,null],[13,"Escape","","",49,null],[13,"Space","","",49,null],[13,"Exclaim","","",49,null],[13,"Quotedbl","","",49,null],[13,"Hash","","",49,null],[13,"Dollar","","",49,null],[13,"Percent","","",49,null],[13,"Ampersand","","",49,null],[13,"Quote","","",49,null],[13,"LeftParen","","",49,null],[13,"RightParen","","",49,null],[13,"Asterisk","","",49,null],[13,"Plus","","",49,null],[13,"Comma","","",49,null],[13,"Minus","","",49,null],[13,"Period","","",49,null],[13,"Slash","","",49,null],[13,"D0","","",49,null],[13,"D1","","",49,null],[13,"D2","","",49,null],[13,"D3","","",49,null],[13,"D4","","",49,null],[13,"D5","","",49,null],[13,"D6","","",49,null],[13,"D7","","",49,null],[13,"D8","","",49,null],[13,"D9","","",49,null],[13,"Colon","","",49,null],[13,"Semicolon","","",49,null],[13,"Less","","",49,null],[13,"Equals","","",49,null],[13,"Greater","","",49,null],[13,"Question","","",49,null],[13,"At","","",49,null],[13,"LeftBracket","","",49,null],[13,"Backslash","","",49,null],[13,"RightBracket","","",49,null],[13,"Caret","","",49,null],[13,"Underscore","","",49,null],[13,"Backquote","","",49,null],[13,"A","","",49,null],[13,"B","","",49,null],[13,"C","","",49,null],[13,"D","","",49,null],[13,"E","","",49,null],[13,"F","","",49,null],[13,"G","","",49,null],[13,"H","","",49,null],[13,"I","","",49,null],[13,"J","","",49,null],[13,"K","","",49,null],[13,"L","","",49,null],[13,"M","","",49,null],[13,"N","","",49,null],[13,"O","","",49,null],[13,"P","","",49,null],[13,"Q","","",49,null],[13,"R","","",49,null],[13,"S","","",49,null],[13,"T","","",49,null],[13,"U","","",49,null],[13,"V","","",49,null],[13,"W","","",49,null],[13,"X","","",49,null],[13,"Y","","",49,null],[13,"Z","","",49,null],[13,"Delete","","",49,null],[13,"CapsLock","","",49,null],[13,"F1","","",49,null],[13,"F2","","",49,null],[13,"F3","","",49,null],[13,"F4","","",49,null],[13,"F5","","",49,null],[13,"F6","","",49,null],[13,"F7","","",49,null],[13,"F8","","",49,null],[13,"F9","","",49,null],[13,"F10","","",49,null],[13,"F11","","",49,null],[13,"F12","","",49,null],[13,"PrintScreen","","",49,null],[13,"ScrollLock","","",49,null],[13,"Pause","","",49,null],[13,"Insert","","",49,null],[13,"Home","","",49,null],[13,"PageUp","","",49,null],[13,"End","","",49,null],[13,"PageDown","","",49,null],[13,"Right","","",49,null],[13,"Left","","",49,null],[13,"Down","","",49,null],[13,"Up","","",49,null],[13,"NumLockClear","","",49,null],[13,"NumPadDivide","","",49,null],[13,"NumPadMultiply","","",49,null],[13,"NumPadMinus","","",49,null],[13,"NumPadPlus","","",49,null],[13,"NumPadEnter","","",49,null],[13,"NumPad1","","",49,null],[13,"NumPad2","","",49,null],[13,"NumPad3","","",49,null],[13,"NumPad4","","",49,null],[13,"NumPad5","","",49,null],[13,"NumPad6","","",49,null],[13,"NumPad7","","",49,null],[13,"NumPad8","","",49,null],[13,"NumPad9","","",49,null],[13,"NumPad0","","",49,null],[13,"NumPadPeriod","","",49,null],[13,"Application","","",49,null],[13,"Power","","",49,null],[13,"NumPadEquals","","",49,null],[13,"F13","","",49,null],[13,"F14","","",49,null],[13,"F15","","",49,null],[13,"F16","","",49,null],[13,"F17","","",49,null],[13,"F18","","",49,null],[13,"F19","","",49,null],[13,"F20","","",49,null],[13,"F21","","",49,null],[13,"F22","","",49,null],[13,"F23","","",49,null],[13,"F24","","",49,null],[13,"Execute","","",49,null],[13,"Help","","",49,null],[13,"Menu","","",49,null],[13,"Select","","",49,null],[13,"Stop","","",49,null],[13,"Again","","",49,null],[13,"Undo","","",49,null],[13,"Cut","","",49,null],[13,"Copy","","",49,null],[13,"Paste","","",49,null],[13,"Find","","",49,null],[13,"Mute","","",49,null],[13,"VolumeUp","","",49,null],[13,"VolumeDown","","",49,null],[13,"NumPadComma","","",49,null],[13,"NumPadEqualsAS400","","",49,null],[13,"AltErase","","",49,null],[13,"Sysreq","","",49,null],[13,"Cancel","","",49,null],[13,"Clear","","",49,null],[13,"Prior","","",49,null],[13,"Return2","","",49,null],[13,"Separator","","",49,null],[13,"Out","","",49,null],[13,"Oper","","",49,null],[13,"ClearAgain","","",49,null],[13,"CrSel","","",49,null],[13,"ExSel","","",49,null],[13,"NumPad00","","",49,null],[13,"NumPad000","","",49,null],[13,"ThousandsSeparator","","",49,null],[13,"DecimalSeparator","","",49,null],[13,"CurrencyUnit","","",49,null],[13,"CurrencySubUnit","","",49,null],[13,"NumPadLeftParen","","",49,null],[13,"NumPadRightParen","","",49,null],[13,"NumPadLeftBrace","","",49,null],[13,"NumPadRightBrace","","",49,null],[13,"NumPadTab","","",49,null],[13,"NumPadBackspace","","",49,null],[13,"NumPadA","","",49,null],[13,"NumPadB","","",49,null],[13,"NumPadC","","",49,null],[13,"NumPadD","","",49,null],[13,"NumPadE","","",49,null],[13,"NumPadF","","",49,null],[13,"NumPadXor","","",49,null],[13,"NumPadPower","","",49,null],[13,"NumPadPercent","","",49,null],[13,"NumPadLess","","",49,null],[13,"NumPadGreater","","",49,null],[13,"NumPadAmpersand","","",49,null],[13,"NumPadDblAmpersand","","",49,null],[13,"NumPadVerticalBar","","",49,null],[13,"NumPadDblVerticalBar","","",49,null],[13,"NumPadColon","","",49,null],[13,"NumPadHash","","",49,null],[13,"NumPadSpace","","",49,null],[13,"NumPadAt","","",49,null],[13,"NumPadExclam","","",49,null],[13,"NumPadMemStore","","",49,null],[13,"NumPadMemRecall","","",49,null],[13,"NumPadMemClear","","",49,null],[13,"NumPadMemAdd","","",49,null],[13,"NumPadMemSubtract","","",49,null],[13,"NumPadMemMultiply","","",49,null],[13,"NumPadMemDivide","","",49,null],[13,"NumPadPlusMinus","","",49,null],[13,"NumPadClear","","",49,null],[13,"NumPadClearEntry","","",49,null],[13,"NumPadBinary","","",49,null],[13,"NumPadOctal","","",49,null],[13,"NumPadDecimal","","",49,null],[13,"NumPadHexadecimal","","",49,null],[13,"LCtrl","","",49,null],[13,"LShift","","",49,null],[13,"LAlt","","",49,null],[13,"LGui","","",49,null],[13,"RCtrl","","",49,null],[13,"RShift","","",49,null],[13,"RAlt","","",49,null],[13,"RGui","","",49,null],[13,"Mode","","",49,null],[13,"AudioNext","","",49,null],[13,"AudioPrev","","",49,null],[13,"AudioStop","","",49,null],[13,"AudioPlay","","",49,null],[13,"AudioMute","","",49,null],[13,"MediaSelect","","",49,null],[13,"Www","","",49,null],[13,"Mail","","",49,null],[13,"Calculator","","",49,null],[13,"Computer","","",49,null],[13,"AcSearch","","",49,null],[13,"AcHome","","",49,null],[13,"AcBack","","",49,null],[13,"AcForward","","",49,null],[13,"AcStop","","",49,null],[13,"AcRefresh","","",49,null],[13,"AcBookmarks","","",49,null],[13,"BrightnessDown","","",49,null],[13,"BrightnessUp","","",49,null],[13,"DisplaySwitch","","",49,null],[13,"KbdIllumToggle","","",49,null],[13,"KbdIllumDown","","",49,null],[13,"KbdIllumUp","","",49,null],[13,"Eject","","",49,null],[13,"Sleep","","",49,null],[4,"Key","conrod::input","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",49,null],[13,"Backspace","","",49,null],[13,"Tab","","",49,null],[13,"Return","","",49,null],[13,"Escape","","",49,null],[13,"Space","","",49,null],[13,"Exclaim","","",49,null],[13,"Quotedbl","","",49,null],[13,"Hash","","",49,null],[13,"Dollar","","",49,null],[13,"Percent","","",49,null],[13,"Ampersand","","",49,null],[13,"Quote","","",49,null],[13,"LeftParen","","",49,null],[13,"RightParen","","",49,null],[13,"Asterisk","","",49,null],[13,"Plus","","",49,null],[13,"Comma","","",49,null],[13,"Minus","","",49,null],[13,"Period","","",49,null],[13,"Slash","","",49,null],[13,"D0","","",49,null],[13,"D1","","",49,null],[13,"D2","","",49,null],[13,"D3","","",49,null],[13,"D4","","",49,null],[13,"D5","","",49,null],[13,"D6","","",49,null],[13,"D7","","",49,null],[13,"D8","","",49,null],[13,"D9","","",49,null],[13,"Colon","","",49,null],[13,"Semicolon","","",49,null],[13,"Less","","",49,null],[13,"Equals","","",49,null],[13,"Greater","","",49,null],[13,"Question","","",49,null],[13,"At","","",49,null],[13,"LeftBracket","","",49,null],[13,"Backslash","","",49,null],[13,"RightBracket","","",49,null],[13,"Caret","","",49,null],[13,"Underscore","","",49,null],[13,"Backquote","","",49,null],[13,"A","","",49,null],[13,"B","","",49,null],[13,"C","","",49,null],[13,"D","","",49,null],[13,"E","","",49,null],[13,"F","","",49,null],[13,"G","","",49,null],[13,"H","","",49,null],[13,"I","","",49,null],[13,"J","","",49,null],[13,"K","","",49,null],[13,"L","","",49,null],[13,"M","","",49,null],[13,"N","","",49,null],[13,"O","","",49,null],[13,"P","","",49,null],[13,"Q","","",49,null],[13,"R","","",49,null],[13,"S","","",49,null],[13,"T","","",49,null],[13,"U","","",49,null],[13,"V","","",49,null],[13,"W","","",49,null],[13,"X","","",49,null],[13,"Y","","",49,null],[13,"Z","","",49,null],[13,"Delete","","",49,null],[13,"CapsLock","","",49,null],[13,"F1","","",49,null],[13,"F2","","",49,null],[13,"F3","","",49,null],[13,"F4","","",49,null],[13,"F5","","",49,null],[13,"F6","","",49,null],[13,"F7","","",49,null],[13,"F8","","",49,null],[13,"F9","","",49,null],[13,"F10","","",49,null],[13,"F11","","",49,null],[13,"F12","","",49,null],[13,"PrintScreen","","",49,null],[13,"ScrollLock","","",49,null],[13,"Pause","","",49,null],[13,"Insert","","",49,null],[13,"Home","","",49,null],[13,"PageUp","","",49,null],[13,"End","","",49,null],[13,"PageDown","","",49,null],[13,"Right","","",49,null],[13,"Left","","",49,null],[13,"Down","","",49,null],[13,"Up","","",49,null],[13,"NumLockClear","","",49,null],[13,"NumPadDivide","","",49,null],[13,"NumPadMultiply","","",49,null],[13,"NumPadMinus","","",49,null],[13,"NumPadPlus","","",49,null],[13,"NumPadEnter","","",49,null],[13,"NumPad1","","",49,null],[13,"NumPad2","","",49,null],[13,"NumPad3","","",49,null],[13,"NumPad4","","",49,null],[13,"NumPad5","","",49,null],[13,"NumPad6","","",49,null],[13,"NumPad7","","",49,null],[13,"NumPad8","","",49,null],[13,"NumPad9","","",49,null],[13,"NumPad0","","",49,null],[13,"NumPadPeriod","","",49,null],[13,"Application","","",49,null],[13,"Power","","",49,null],[13,"NumPadEquals","","",49,null],[13,"F13","","",49,null],[13,"F14","","",49,null],[13,"F15","","",49,null],[13,"F16","","",49,null],[13,"F17","","",49,null],[13,"F18","","",49,null],[13,"F19","","",49,null],[13,"F20","","",49,null],[13,"F21","","",49,null],[13,"F22","","",49,null],[13,"F23","","",49,null],[13,"F24","","",49,null],[13,"Execute","","",49,null],[13,"Help","","",49,null],[13,"Menu","","",49,null],[13,"Select","","",49,null],[13,"Stop","","",49,null],[13,"Again","","",49,null],[13,"Undo","","",49,null],[13,"Cut","","",49,null],[13,"Copy","","",49,null],[13,"Paste","","",49,null],[13,"Find","","",49,null],[13,"Mute","","",49,null],[13,"VolumeUp","","",49,null],[13,"VolumeDown","","",49,null],[13,"NumPadComma","","",49,null],[13,"NumPadEqualsAS400","","",49,null],[13,"AltErase","","",49,null],[13,"Sysreq","","",49,null],[13,"Cancel","","",49,null],[13,"Clear","","",49,null],[13,"Prior","","",49,null],[13,"Return2","","",49,null],[13,"Separator","","",49,null],[13,"Out","","",49,null],[13,"Oper","","",49,null],[13,"ClearAgain","","",49,null],[13,"CrSel","","",49,null],[13,"ExSel","","",49,null],[13,"NumPad00","","",49,null],[13,"NumPad000","","",49,null],[13,"ThousandsSeparator","","",49,null],[13,"DecimalSeparator","","",49,null],[13,"CurrencyUnit","","",49,null],[13,"CurrencySubUnit","","",49,null],[13,"NumPadLeftParen","","",49,null],[13,"NumPadRightParen","","",49,null],[13,"NumPadLeftBrace","","",49,null],[13,"NumPadRightBrace","","",49,null],[13,"NumPadTab","","",49,null],[13,"NumPadBackspace","","",49,null],[13,"NumPadA","","",49,null],[13,"NumPadB","","",49,null],[13,"NumPadC","","",49,null],[13,"NumPadD","","",49,null],[13,"NumPadE","","",49,null],[13,"NumPadF","","",49,null],[13,"NumPadXor","","",49,null],[13,"NumPadPower","","",49,null],[13,"NumPadPercent","","",49,null],[13,"NumPadLess","","",49,null],[13,"NumPadGreater","","",49,null],[13,"NumPadAmpersand","","",49,null],[13,"NumPadDblAmpersand","","",49,null],[13,"NumPadVerticalBar","","",49,null],[13,"NumPadDblVerticalBar","","",49,null],[13,"NumPadColon","","",49,null],[13,"NumPadHash","","",49,null],[13,"NumPadSpace","","",49,null],[13,"NumPadAt","","",49,null],[13,"NumPadExclam","","",49,null],[13,"NumPadMemStore","","",49,null],[13,"NumPadMemRecall","","",49,null],[13,"NumPadMemClear","","",49,null],[13,"NumPadMemAdd","","",49,null],[13,"NumPadMemSubtract","","",49,null],[13,"NumPadMemMultiply","","",49,null],[13,"NumPadMemDivide","","",49,null],[13,"NumPadPlusMinus","","",49,null],[13,"NumPadClear","","",49,null],[13,"NumPadClearEntry","","",49,null],[13,"NumPadBinary","","",49,null],[13,"NumPadOctal","","",49,null],[13,"NumPadDecimal","","",49,null],[13,"NumPadHexadecimal","","",49,null],[13,"LCtrl","","",49,null],[13,"LShift","","",49,null],[13,"LAlt","","",49,null],[13,"LGui","","",49,null],[13,"RCtrl","","",49,null],[13,"RShift","","",49,null],[13,"RAlt","","",49,null],[13,"RGui","","",49,null],[13,"Mode","","",49,null],[13,"AudioNext","","",49,null],[13,"AudioPrev","","",49,null],[13,"AudioStop","","",49,null],[13,"AudioPlay","","",49,null],[13,"AudioMute","","",49,null],[13,"MediaSelect","","",49,null],[13,"Www","","",49,null],[13,"Mail","","",49,null],[13,"Calculator","","",49,null],[13,"Computer","","",49,null],[13,"AcSearch","","",49,null],[13,"AcHome","","",49,null],[13,"AcBack","","",49,null],[13,"AcForward","","",49,null],[13,"AcStop","","",49,null],[13,"AcRefresh","","",49,null],[13,"AcBookmarks","","",49,null],[13,"BrightnessDown","","",49,null],[13,"BrightnessUp","","",49,null],[13,"DisplaySwitch","","",49,null],[13,"KbdIllumToggle","","",49,null],[13,"KbdIllumDown","","",49,null],[13,"KbdIllumUp","","",49,null],[13,"Eject","","",49,null],[13,"Sleep","","",49,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",50,null],[13,"MouseRelative","","x and y in relative coordinates.",50,null],[13,"MouseScroll","","x and y in scroll ticks.",50,null],[13,"ControllerAxis","","controller axis move event.",50,null],[13,"Touch","","touch event.",50,null],[4,"MouseButton","","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",51,null],[13,"Left","","Left mouse button.",51,null],[13,"Right","","Right mouse button.",51,null],[13,"Middle","","Middle mouse button.",51,null],[13,"X1","","Extra mouse button number 1.",51,null],[13,"X2","","Extra mouse button number 2.",51,null],[13,"Button6","","Mouse button number 6.",51,null],[13,"Button7","","Mouse button number 7.",51,null],[13,"Button8","","Mouse button number 8.",51,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",52,null],[12,"width","","The width of rendered area in points.",52,null],[12,"height","","The height of rendered area in points.",52,null],[12,"draw_width","","The width of rendered area in pixels.",52,null],[12,"draw_height","","The height of rendered area in pixels.",52,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",53,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",53,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",53,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",53,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",54,null],[12,"id","","A unique identifier for touch event.",54,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",54,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",54,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",54,null],[12,"px","","The x coordinate of the touch pressure direction.",54,null],[12,"py","","The y coordinate of the touch pressure direction.",54,null],[12,"pz","","The z coordinate of the touch pressure direction.",54,null],[12,"is_3d","","Whether the touch is in 3D.",54,null],[12,"touch","","The touch state.",54,null],[0,"state","","Everything related to storing the state of user input.",null,null],[3,"State","conrod::input::state","Holds the current state of user input.",null,null],[12,"mouse","","Mouse position and button state.",55,null],[12,"widget_capturing_keyboard","","Which widget, if any, is currently capturing the keyboard",55,null],[12,"widget_capturing_mouse","","Which widget, if any, is currently capturing the mouse",55,null],[12,"widget_under_mouse","","The widget that is currently under the mouse cursor.",55,null],[12,"modifiers","","Which modifier keys are being held down.",55,null],[0,"mouse","","Mouse specific state.",null,null],[4,"Button","conrod::input::state::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",51,null],[13,"Left","","Left mouse button.",51,null],[13,"Right","","Right mouse button.",51,null],[13,"Middle","","Middle mouse button.",51,null],[13,"X1","","Extra mouse button number 1.",51,null],[13,"X2","","Extra mouse button number 2.",51,null],[13,"Button6","","Mouse button number 6.",51,null],[13,"Button7","","Mouse button number 7.",51,null],[13,"Button8","","Mouse button number 8.",51,null],[3,"Mouse","","The state of the `Mouse`, including it's position and button states.",null,null],[12,"buttons","","A map that stores the up/down state of each button.",56,null],[12,"xy","","The current position of the mouse.",56,null],[3,"ButtonMap","","Stores the state of all mouse buttons.",null,null],[3,"PressedButtons","","An iterator yielding all pressed buttons.",null,null],[4,"ButtonPosition","","Whether the button is up or down.",null,null],[13,"Up","","The button is up (i.e. pressed).",57,null],[13,"Down","","The button is down and was originally pressed down at the given `Point` over the widget at the given widget::Id.",57,null],[17,"NUM_BUTTONS","","The max total number of buttons on a mouse.",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"mouse"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"mouse"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"mouse"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"buttonmap"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"pressedbuttons"}}],[11,"new","","Construct a new default `Mouse`.",56,{"inputs":[],"output":{"name":"self"}}],[11,"relative_to","","If the mouse button is down, return a new one with position relative to the given `xy`.",57,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_down","","Is the `ButtonPosition` down.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_up","","Is the `ButtonPosition` up.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"if_down","","Returns the position at which the button was pressed along with the widget that was under the mouse at the time of pressing if the position is `Down`.",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"xy_if_down","","Returns the position at which the button was pressed if it's down.",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Returns a new button map with all states set to `None`",58,{"inputs":[],"output":{"name":"self"}}],[11,"relative_to","","Returns a copy of the ButtonMap relative to the given `Point`",58,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"left","","The state of the left mouse button.",58,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"middle","","The state of the middle mouse button.",58,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"right","","The state of the right mouse button.",58,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"press","","Sets the `Button` in the `Down` position.",58,{"inputs":[{"name":"self"},{"name":"button"},{"name":"point"},{"name":"option"}],"output":null}],[11,"release","","Set's the `Button` in the `Up` position.",58,{"inputs":[{"name":"self"},{"name":"button"}],"output":null}],[11,"pressed","","An iterator yielding all pressed mouse buttons along with the location at which they were originally pressed.",58,{"inputs":[{"name":"self"}],"output":{"name":"pressedbuttons"}}],[11,"index","","",58,null],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","conrod::input::state","",55,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Returns a fresh new input state",55,{"inputs":[],"output":{"name":"state"}}],[11,"relative_to","","Returns a copy of the input::State relative to the given `position::Point`",55,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"state"}}],[0,"widget","conrod::input","Contains all the logic for filtering input events and making them relative to widgets.",null,null],[3,"Widget","conrod::input::widget","Provides only events and input state that are relevant to a specific widget.",null,null],[3,"Mouse","","A view of the `input::state::Mouse` that is specific to a single widget.",null,null],[12,"buttons","","The state of each `MouseButton`.",60,null],[3,"Events","","An iterator yielding all events that are relevant to a specific widget.",null,null],[3,"Presses","","An `Iterator` yielding all button presses occuring within the given sequence of `widget::Event`s.",null,null],[3,"MousePresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses`.",null,null],[3,"MouseButtonPresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses` for some specific mouse button.",null,null],[3,"KeyPresses","","An `Iterator` yielding all keyboard button presses occuring within the given sequence of `Presses`.",null,null],[3,"Releases","","An `Iterator` yielding all button releases occuring within the given sequence of `widget::Event`s.",null,null],[3,"MouseButtonReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases` for some specific mouse button.",null,null],[3,"MouseReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases`.",null,null],[3,"KeyReleases","","An `Iterator` yielding all keyboard button releases occuring within the given sequence of `Releases`.",null,null],[3,"Clicks","","An `Iterator` yielding all mouse clicks occuring within the given sequence of `widget::Event`s.",null,null],[3,"ButtonClicks","","An `Iterator` yielding all mouse `button` clicks occuring within the given sequence of `widget::Click`s.",null,null],[3,"Drags","","An iterator that yields all `event::Drag` events yielded by the `Events` iterator.",null,null],[3,"ButtonDrags","","An `Iterator` yielding all mouse `button` drags occuring within the given sequence of `widget::Drag`s.",null,null],[3,"Texts","","An iterator that yields all `Input::Text` events yielded by the `Events` iterator.",null,null],[3,"Scrolls","","An iterator that yields all `Scroll` events yielded by the given `Events` iterator.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"mouse"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"presses"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"mousepresses"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"keypresses"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"releases"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mousereleases"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"keyreleases"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"clicks"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"drags"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"texts"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"scrolls"}}],[11,"for_widget","","Returns a `Widget` with events specifically for the given widget.",61,{"inputs":[{"name":"id"},{"name":"rect"},{"name":"global"}],"output":{"name":"self"}}],[11,"mouse","","If the widget is currently capturing the mouse, this returns the state of the mouse.",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"events","","Produces an iterator yielding all events that are relevant to a specific widget.",61,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"presses","","Filters all events yielded by `Self::events` other than `event::Press`es.",61,{"inputs":[{"name":"self"}],"output":{"name":"presses"}}],[11,"releases","","Filters all events yielded by `Self::events` other than `event::Release`es.",61,{"inputs":[{"name":"self"}],"output":{"name":"releases"}}],[11,"clicks","","Filters all events yielded by `Self::events` for all `event::Click`s.",61,{"inputs":[{"name":"self"}],"output":{"name":"clicks"}}],[11,"drags","","Produces an iterator that yields all `event::Drag` events yielded by the `Events` iterator.",61,{"inputs":[{"name":"self"}],"output":{"name":"drags"}}],[11,"texts","","Produces an iterator that yields all `Input::Text` events that have occurred as `&str`s since the last time `Ui::set_widgets` was called.",61,{"inputs":[{"name":"self"}],"output":{"name":"texts"}}],[11,"scrolls","","Produce an iterator that yields only the `Scroll` events yielded by the `Events` iterator.",61,{"inputs":[{"name":"self"}],"output":{"name":"scrolls"}}],[11,"abs_xy","","The absolute position of the mouse within the window.",60,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"rel_xy","","The position of the mouse relative to the middle of the widget's `Rect`.",60,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"is_over","","Is the mouse currently over the widget.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mouse","","Produces an `Iterator` that yields only the press events that correspond with mouse buttons.",63,{"inputs":[{"name":"self"}],"output":{"name":"mousepresses"}}],[11,"key","","Produces an `Iterator` that yields only the press events that correspond with keyboard buttons.",63,{"inputs":[{"name":"self"}],"output":{"name":"keypresses"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",64,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"mousebuttonpresses"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button press events.",64,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button press events.",64,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button press events.",64,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"mouse","","Produces an `Iterator` that yields only the release events that correspond with mouse buttons.",67,{"inputs":[{"name":"self"}],"output":{"name":"mousereleases"}}],[11,"key","","Produces an `Iterator` that yields only the release events that correspond with keyboard buttons.",67,{"inputs":[{"name":"self"}],"output":{"name":"keyreleases"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",69,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"mousebuttonreleases"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button release events.",69,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button release events.",69,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button release events.",69,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"button","","Yield only the `Click`s that occurred from the given button.",71,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"buttonclicks"}}],[11,"left","","Yield only left mouse button `Click`s.",71,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"middle","","Yields only middle mouse button `Click`s.",71,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"right","","Yield only right mouse button `Click`s.",71,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"button","","Yield only the `Drag`s that occurred from the given button.",73,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"buttondrags"}}],[11,"left","","Yield only left mouse button `Drag`s.",73,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"middle","","Yields only middle mouse button `Drag`s.",73,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"right","","Yield only right mouse button `Drag`s.",73,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"global","conrod::input","Handles all of the global input events and state. The core of this module is the `Global` struct. It is responsible for aggregating and interpreting raw input events into high-level semantic events.",null,null],[3,"Global","conrod::input::global","Global input event handler that also implements `input::Provider`. The `Ui` passes all events to it's `Global` instance, which aggregates and interprets the events to provide so-called 'high-level' events to widgets. This input gets reset after every update by the `Ui`.",null,null],[12,"start","","The `input::State` as it was at the end of the last update cycle.",77,null],[12,"current","","The most recent `input::State`, with updates from handling all the events this update cycle",77,null],[12,"last_click","","Tracks the last click that occurred and the time at which it occurred in order to create double-click events.",77,null],[3,"Events","","Iterator over all global `event::Event`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[3,"UiEvents","","An iterator yielding all `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"uievents"}}],[11,"new","","Returns a fresh new `Global`",77,{"inputs":[],"output":{"name":"global"}}],[11,"events","","Returns an iterator yielding all events that have occurred since the last time `Ui::set_widgets` was called.",77,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"push_event","","Add the new event to the stack.",77,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"clear_events_and_update_start_state","","Called at the end of every update cycle in order to prepare the `Global` to handle events for the next one.",77,{"inputs":[{"name":"self"}],"output":null}],[11,"ui","","Converts the `Events` into a `UiEvents`, yielding only the `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",78,{"inputs":[{"name":"self"}],"output":{"name":"uievents"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"position","conrod","Items related to 2D positioning, used throughout conrod.",null,null],[3,"Padding","conrod::position","The distance between the inner edge of a border and the outer edge of the inner content.",null,null],[12,"x","","Padding on the start and end of the *x* axis.",80,null],[12,"y","","Padding on the start and end of the *y* axis.",80,null],[4,"Axis","","Represents either **Axis** in the 2-dimensional plane.",null,null],[13,"X","","The horizontal plane's Axis.",81,null],[13,"Y","","The vertical plane's Axis.",81,null],[4,"Position","","Some **Position** of some **Widget** along a single axis.",null,null],[13,"Absolute","","A specific position.",82,null],[13,"Relative","","A position relative to some other Widget.",82,null],[4,"Relative","","Positions that are described as **Relative** to some other **Widget**.",null,null],[13,"Scalar","","A relative scalar distance.",83,null],[13,"Align","","Aligned to either the `Start`, `Middle` or `End`.",83,null],[13,"Direction","","A distance as a `Scalar` value over the given `Direction`.",83,null],[13,"Place","","Some place on top of another widget.",83,null],[4,"Direction","","Directionally positioned, normally relative to some other widget.",null,null],[13,"Forwards","","Positioned forwards (*positive* **Scalar**) along some **Axis**.",84,null],[13,"Backwards","","Positioned backwards (*negative* **Scalar**) along some **Axis**.",84,null],[4,"Align","","The orientation of **Align**ment along some **Axis**.",null,null],[13,"Start","","**Align** our **Start** with the **Start** of some other widget along the **Axis**.",85,null],[13,"Middle","","**Align** our **Middle** with the **Middle** of some other widget along the **Axis**.",85,null],[13,"End","","**Align** our **End** with the **End** of some other widget along the **Axis**.",85,null],[4,"Place","","Place the widget at a position on some other widget.",null,null],[13,"Start","","Place upon the **Start** of the Widget's `kid_area`.",86,null],[13,"Middle","","Place upon the **Middle** of the Widget's `kid_area`.",86,null],[13,"End","","Place upon the **End** of the Widget's `kid_area`.",86,null],[4,"Dimension","","The length of a **Widget** over either the *x* or *y* axes.",null,null],[13,"Absolute","","Some specific length has been given.",87,null],[13,"Of","","The dimension should match that of the widget at the given index.",87,null],[13,"KidAreaOf","","The dimension should match that of the `kid_area` of the widget at the given index.",87,null],[0,"range","","A type for working one-dimensional ranges.",null,null],[3,"Range","conrod::position::range","Some start and end position along a single axis.",null,null],[12,"start","","The start of some `Range` along an axis.",88,null],[12,"end","","The end of some `Range` along an axis.",88,null],[4,"Edge","","Represents either the **Start** or **End** **Edge** of a **Range**.",null,null],[13,"Start","","The beginning of a **Range**.",89,null],[13,"End","","The end of a **Range**.",89,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.",88,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"from_pos_and_len","","Construct a new `Range` from a given length and its centered position.",88,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"magnitude","","The `start` value subtracted from the `end` value.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"len","","The absolute length of the Range aka the absolute magnitude.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"middle","","Return the value directly between the start and end values.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"invert","","The current range with its start and end values swapped.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"map_value_to","","Map the given Scalar from `Self` to some other given `Range`.",88,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"range"}],"output":{"name":"scalar"}}],[11,"shift","","Shift the `Range` start and end points by a given `Scalar`.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"direction","","The direction of the Range represented as a normalised scalar.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"undirected","","Converts the Range to an undirected Range. By ensuring that `start` <= `end`.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"max","","The Range that encompasses both self and the given Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[11,"overlap","","The Range that represents the range of the overlap between two Ranges if there is some.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"max_directed","","The Range that encompasses both self and the given Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[11,"is_over","","Is the given scalar within our range.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"round","","Round the values at both ends of the Range and return the result.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"floor","","Floor the values at both ends of the Range and return the result.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"pad_start","","The Range with some padding given to the `start` value.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_end","","The Range with some padding given to the `end` value.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad","","The Range with some given padding to be applied to each end.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_ends","","The Range with some padding given for each end.",88,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"clamp_value","","Clamp the given value to the range.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"stretch_to_value","","Stretch the end that is closest to the given value only if it lies outside the Range.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"has_same_direction","","Does `self` have the same direction as `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"align_start_of","","Align the `start` of `self` to the `start` of the `other` **Range**.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_end_of","","Align the `end` of `self` to the `end` of the `other` **Range**.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_of","","Align the middle of `self` to the middle of the `other` **Range**.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_after","","Aligns the `start` of `self` with the `end` of `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_before","","Aligns the `end` of `self` with the `start` of `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_to","","Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.",88,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_edge","","The closest **Edge** of `self` to the given `scalar`.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"edge"}}],[0,"rect","conrod::position","Defines the scalar `Rect` type used throughout conrod.",null,null],[3,"Rect","conrod::position::rect","Defines a Rectangle's bounds across the x and y axes.",null,null],[12,"x","","The start and end positions of the Rectangle on the x axis.",90,null],[12,"y","","The start and end positions of the Rectangle on the y axis.",90,null],[4,"Corner","","Either of the four corners of a **Rect**.",null,null],[13,"TopLeft","","The top left corner of a **Rect**.",91,null],[13,"TopRight","","The top right corner of a **Rect**.",91,null],[13,"BottomLeft","","The bottom left corner of a **Rect**.",91,null],[13,"BottomRight","","The bottom right corner of a **Rect**.",91,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"corner"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"corner"}],"output":{"name":"bool"}}],[11,"from_xy_dim","","Construct a Rect from a given `Point` and `Dimensions`.",90,{"inputs":[{"name":"point"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"from_corners","","Construct a Rect from the coordinates of two points.",90,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"overlap","","The Rect representing the area in which two Rects overlap.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"max","","The Rect that encompass the two given sets of Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"x","","The position in the middle of the x bounds.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"y","","The position in the middle of the y bounds.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"xy","","The xy position in the middle of the bounds.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"x_y","","The centered x and y coordinates as a tuple.",90,null],[11,"w","","The width of the Rect.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"h","","The height of the Rect.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"dim","","The total dimensions of the Rect.",90,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"w_h","","The width and height of the Rect as a tuple.",90,null],[11,"xy_dim","","Convert the Rect to a `Point` and `Dimensions`.",90,null],[11,"x_y_w_h","","The Rect's centered coordinates and dimensions in a tuple.",90,null],[11,"len","","The length of the longest side of the rectangle.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"bottom","","The Rect's lowest y value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top","","The Rect's highest y value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"left","","The Rect's lowest x value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"right","","The Rect's highest x value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top_left","","The top left corner **Point**.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_left","","The bottom left corner **Point**.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_right","","The top right corner **Point**.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_right","","The bottom right corner **Point**.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"l_r_b_t","","The edges of the **Rect** in a tuple (top, bottom, left, right).",90,null],[11,"l_t_w_h","","The left and top edges of the **Rect** along with the width and height.",90,null],[11,"l_b_w_h","","The left and bottom edges of the **Rect** along with the width and height.",90,null],[11,"shift_x","","Shift the Rect along the x axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift_y","","Shift the Rect along the y axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift","","Shift the Rect by the given Point.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"relative_to_x","","Returns a `Rect` with a position relative to the given position on the *x* axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"relative_to_y","","Returns a `Rect` with a position relative to the given position on the *y* axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"relative_to","","Returns a `Rect` with a position relative to the given position.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_over","","Does the given point touch the Rectangle.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pad_left","","The Rect with some padding applied to the left edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","The Rect with some padding applied to the right edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","The rect with some padding applied to the bottom edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","The Rect with some padding applied to the top edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad","","The Rect with some padding amount applied to each edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","The Rect with some padding applied.",90,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"stretch_to_point","","Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"left_of","","Align `self`'s right edge with the left edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"right_of","","Align `self`'s left edge with the right dge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"below","","Align `self`'s top edge with the bottom edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"above","","Align `self`'s bottom edge with the top edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_x_of","","Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.",90,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_y_of","","Align `self` to `other` along the *y* axis in accordance with the given `Align` variant.",90,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_left_of","","Align `self`'s left edge with the left edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the middle of `self` with the middle of the `other` **Rect** along the *x* axis.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_right_of","","Align `self`'s right edge with the right edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align `self`'s bottom edge with the bottom edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the middle of `self` with the middle of the `other` **Rect** along the *y* axis.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_top_of","","Align `self`'s top edge with the top edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_of","","Place `self` along the top left edges of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_of","","Place `self` along the top right edges of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place `self` along the bottom left edges of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place `self` along the bottom right edges of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place `self` in the middle of the top edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place `self` in the middle of the bottom edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place `self` in the middle of the left edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place `self` in the middle of the right edge of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"middle_of","","Place `self` directly in the middle of the `other` **Rect**.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_corner","","Return the **Corner** of `self` that is closest to the given **Point**.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"corner"}}],[6,"Scalar","conrod::position","An alias over the Scalar type used throughout Conrod.",null,null],[6,"Depth","","The depth at which the widget will be rendered.",null,null],[6,"Dimensions","","General use 2D spatial dimensions.",null,null],[6,"Point","","General use 2D spatial point.",null,null],[6,"Margin","","The margin for some `Place`ment on either end of an axis.",null,null],[8,"Positionable","","Widgets that are positionable.",null,null],[10,"x_position","","Build with the given **Position** along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"self"}}],[10,"y_position","","Build with the given **Position** along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"self"}}],[10,"get_x_position","","Get the **Position** along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[10,"get_y_position","","Get the **Position** along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"x","","Build with the given **Absolute** **Position** along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y","","Build with the given **Absolute** **Position** along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy","","Set the **Position** with some Point.",92,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y","","Set the **Position** with *x* *y* coordinates.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_position_relative","","Set the *x* **Position** **Relative** to the previous widget.",92,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"y_position_relative","","Set the *y* **Position** **Relative** to the previous widget.",92,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_y_position_relative","","Set the *x* and *y* **Position**s **Relative** to the previous widget.",92,{"inputs":[{"name":"self"},{"name":"relative"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_position_relative_to","","Set the *x* **Position** **Relative** to the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"relative"}],"output":{"name":"self"}}],[11,"y_position_relative_to","","Set the *y* **Position** **Relative** to the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_y_position_relative_to","","Set the *x* and *y* **Position**s **Relative** to the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"relative"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_relative","","Set the **Position** as a **Scalar** along the *x* axis **Relative** to the middle of previous widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative","","Set the **Position** as a **Scalar** along the *y* axis **Relative** to the middle of previous widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative","","Set the **Position** as a **Point** **Relative** to the middle of the previous widget.",92,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative","","Set the **Position** as **Scalar**s along the *x* and *y* axes **Relative** to the middle of the previous widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction","","Build with the **Position** along the *x* axis as some distance from another widget.",92,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction","","Build with the **Position** along the *y* axis as some distance from another widget.",92,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down","","Build with the **Position** as some distance below another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up","","Build with the **Position** as some distance above another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left","","Build with the **Position** as some distance to the left of another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right","","Build with the **Position** as some distance to the right of another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction_from","","Build with the **Position** along the *x* axis as some distance from the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction_from","","Build with the **Position** along the *y* axis as some distance from the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down_from","","Build with the **Position** as some distance below the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up_from","","Build with the **Position** as some distance above the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left_from","","Build with the **Position** as some distance to the left of the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right_from","","Build with the **Position** as some distance to the right of the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_align","","Align the **Position** of the widget along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align","","Align the **Position** of the widget along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"x_align_to","","Align the **Position** of the widget with the given widget along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_to","","Align the **Position** of the widget with the given widget along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the *x* axis.",92,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the *y* axis.",92,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"depth","","The depth at which the widget should be rendered relatively to its sibling widgets.",92,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"self"}}],[10,"get_depth","","Return the depth.",92,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[8,"Sizeable","","Widgets that support different dimensions.",null,null],[10,"x_dimension","","Set the length along the x axis.",93,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"y_dimension","","Set the length along the y axis.",93,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"get_x_dimension","","The widget's length along the x axis as a Dimension.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"get_y_dimension","","The widget's length along the y axis as a Dimension.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"w","","Set the absolute width for the widget.",93,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h","","Set the absolute height for the widget.",93,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh","","Set the dimensions for the widget.",93,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"w_h","","Set the width and height for the widget.",93,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the given Scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the given Scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges padded by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both ends by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at all four edges by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_h","","Get the height of the widget.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_wh","","The dimensions for the widget.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"relative"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"place"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"dimension"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"none","","No padding.",80,{"inputs":[],"output":{"name":"padding"}}],[0,"render","conrod","Conrod's generic graphics backend.",null,null],[3,"Primitives","conrod::render","An iterator-like type that yields a reference to each primitive in order of depth for rendering.",null,null],[3,"OwnedPrimitives","","An owned alternative to the `Primitives` type.",null,null],[3,"Primitive","","Data required for rendering a single primitive widget.",null,null],[12,"id","","The id of the widget within the widget graph.",94,null],[12,"kind","","State and style for this primitive widget.",94,null],[12,"scizzor","","The Rect to which the primitive widget should be cropped.",94,null],[12,"rect","","The bounding rectangle for the `Primitive`.",94,null],[3,"Text","","A type used for producing a `PositionedGlyph` iterator.",null,null],[3,"WalkOwnedPrimitives","","An iterator-like type for yielding `Primitive`s from an `OwnedPrimitives`.",null,null],[4,"PrimitiveKind","","The unique kind for each primitive element in the Ui.",null,null],[13,"Rectangle","","A filled `Rectangle`.",95,null],[12,"color","conrod::render::PrimitiveKind","The fill colour for the rectangle.",95,null],[13,"Polygon","conrod::render","A filled `Polygon`.",95,null],[12,"color","conrod::render::PrimitiveKind","The fill colour for the inner part of the polygon",95,null],[12,"points","","The ordered points that, when joined with lines, represent each side of the `Polygon`.",95,null],[13,"Lines","conrod::render","A series of consecutive `Line`s.",95,null],[12,"color","conrod::render::PrimitiveKind","The colour of each `Line`.",95,null],[12,"cap","","Whether the end of the lines should be `Flat` or `Round`.",95,null],[12,"thickness","","The thickness of the lines, i.e. the width of a vertical line or th height of a horizontal line.",95,null],[12,"points","","The ordered points which should be joined by lines.",95,null],[13,"Image","conrod::render","A single `Image`, produced by the primitive `Image` widget.",95,null],[12,"image_id","conrod::render::PrimitiveKind","The unique identifier of the image that will be drawn.",95,null],[12,"color","","When `Some`, colours the `Image`. When `None`, the `Image` uses its regular colours.",95,null],[12,"source_rect","","The area of the texture that will be drawn to the `Image`'s `Rect`.",95,null],[13,"Text","conrod::render","A single block of `Text`, produced by the primitive `Text` widget.",95,null],[12,"color","conrod::render::PrimitiveKind","The colour of the `Text`.",95,null],[12,"text","","All glyphs within the `Text` laid out in their correct positions in order from top-left to bottom right.",95,null],[12,"font_id","","The unique identifier for the font, useful for the `glyph_cache.rect_for(id, glyph)` method when using the `conrod::text::GlyphCache` (rusttype's GPU `Cache`).",95,null],[13,"Other","conrod::render","An `Other` variant will be yielded for every non-primitive widget in the list.",95,null],[8,"PrimitiveWalker","","A trait that allows the user to remain generic over types yielding `Primitive`s.",null,null],[10,"next_primitive","","Yield the next `Primitive` in order of depth, bottom to top.",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ownedprimitives"}}],[11,"next_primitive","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_primitive","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"positioned_glyphs","","Produces a list of `PositionedGlyph`s which may be used to cache and render the text.",100,null],[11,"new","","Constructor for the `Primitives` iterator.",98,null],[11,"next","","Yield the next `Primitive` for rendering.",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned","","Collect the `Primitives` list into an owned collection.",98,{"inputs":[{"name":"self"}],"output":{"name":"ownedprimitives"}}],[11,"walk","","Produce an iterator-like type for yielding `Primitive`s.",97,{"inputs":[{"name":"self"}],"output":{"name":"walkownedprimitives"}}],[11,"next","","Yield the next `Primitive` in order or rendering depth, bottom to top.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"text","conrod","Text layout logic.",null,null],[3,"Glyph","conrod::text","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",101,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor *f* in the horizontal direction is achieved by setting `x` equal to *f* times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",102,null],[12,"y","","Vertical scale, in pixels.",102,null],[3,"GlyphCache","","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[3,"Lines","","An iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,null],[4,"Justify","","A type used for referring to typographic alignment of `Text`.",null,null],[13,"Left","","Align text to the start of the bounding `Rect`'s *x* axis.",103,null],[13,"Center","","Symmetrically align text along the *y* axis.",103,null],[13,"Right","","Align text to the end of the bounding `Rect`'s *x* axis.",103,null],[5,"height","","Determine the total height of a block of text with the given number of lines, font size and `line_spacing` (the space that separates each line of text).",null,{"inputs":[{"name":"usize"},{"name":"fontsize"},{"name":"scalar"}],"output":{"name":"scalar"}}],[5,"lines","","Produce an iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"lines"}}],[5,"pt_to_px","","Converts the given font size in \"points\" to its font size in pixels.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"f32"}}],[5,"pt_to_scale","","Converts the given font size in \"points\" to a uniform `rusttype::Scale`.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"scale"}}],[0,"rt","","Re-exported RustType geometrical types.",null,null],[3,"Point","conrod::text::rt","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",104,null],[12,"y","","",104,null],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",105,null],[12,"max","","",105,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",106,null],[12,"y","","",106,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[0,"font","conrod::text","The `font::Id` and `font::Map` types.",null,null],[3,"Id","conrod::text::font","A type-safe wrapper around the `FontId`.",null,null],[3,"Map","","A collection of mappings from `font::Id`s to `rusttype::Font`s.",null,null],[3,"NewIds","","An iterator yielding an `Id` for each new `rusttype::Font` inserted into the `Map` via the `insert_collection` method.",null,null],[3,"Ids","","Yields the `Id` for each `Font` within the `Map`.",null,null],[4,"Error","","Returned when loading new fonts from file or bytes.",null,null],[13,"IO","","Some error occurred while loading a `FontCollection` from a file.",107,null],[13,"NoFont","","No `Font`s could be yielded from the `FontCollection`.",107,null],[5,"collection_from_file","","Load a `super::FontCollection` from a file at a given path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"from_file","","Load a single `Font` from a file at the given path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"ids"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","Returns the inner `usize` from the `Id`.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Construct the new, empty `Map`.",110,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Borrow the `rusttype::Font` associated with the given `font::Id`.",110,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"insert","","Adds the given `rusttype::Font` to the `Map` and returns a unique `Id` for it.",110,{"inputs":[{"name":"self"},{"name":"font"}],"output":{"name":"id"}}],[11,"insert_from_file","","Insert a single `Font` into the map by loading it from the given file path.",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"ids","","Produces an iterator yielding the `Id` for each `Font` within the `Map`.",110,{"inputs":[{"name":"self"}],"output":{"name":"ids"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",107,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"glyph","conrod::text","Logic and types specific to individual glyph layout.",null,null],[3,"Rects","conrod::text::glyph","An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.",null,null],[3,"RectsPerLine","","An iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,null],[3,"SelectedRectsPerLine","","Yields an iteraor yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,null],[3,"SelectedRects","","Yields a `Rect` for each selected character in a single line of text.",null,null],[5,"index_after_cursor","","Find the index of the character that directly follows the cursor at the given `cursor_idx`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[5,"rects_per_line","","Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"rectsperline"}}],[5,"selected_rects_per_line","","Produces an iterator that yields iteraors yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedrectsperline"}}],[6,"X","","Some position along the X axis (used within `CharXs`).",null,null],[6,"HalfW","","The half of the width of some character (used within `CharXs`).",null,null],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"cursor","conrod::text","Logic related to the positioning of the cursor within text.",null,null],[3,"XysPerLine","conrod::text::cursor","Every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"XysPerLineFromText","","Similarly to `XysPerLine`, yields every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"Xs","","Each possible cursor position along the *x* axis within a line of text.",null,null],[3,"Index","","An index representing the position of a cursor within some text.",null,null],[12,"line","","The index of the line upon which the cursor is situated.",116,null],[12,"char","","The index within all possible cursor positions for the line.",116,null],[5,"xys_per_line","","Every possible cursor position within each line of text yielded by the given iterator.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"str"},{"name":"fontsize"}],"output":{"name":"xysperline"}}],[5,"xys_per_line_from_text","","Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor position within each line of text yielded by the given iterator.",null,null],[5,"index_before_char","","Convert the given character index into a cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"option"}}],[5,"xy_at","","Determine the *xy* location of the cursor at the given cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[5,"closest_line","","Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line",null,{"inputs":[{"name":"scalar"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_and_xy","","Find the closest cursor index to the given `xy` position, and the center `Point` of that cursor.",null,{"inputs":[{"name":"point"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_on_line","","Find the closest cursor index to the given `x` position on the given line along with the `x` position of that cursor.",null,null],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"xysperline"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"xysperlinefromtext"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"cmp","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"ordering"}}],[11,"previous_word_start","","The cursor index of the beginning of the word (block of non-whitespace) before `self`.",116,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"next_word_end","","The cursor index of the end of the first word (block of non-whitespace) after `self`.",116,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"previous","","The cursor index that comes before `self`.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"next","","The cursor index that follows `self`.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"clamp_to_lines","","Clamps `self` to the given lines.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"line","conrod::text","Text handling logic related to individual lines of text.",null,null],[3,"Info","conrod::text::line","Information about a single line of text within a `&str`.",null,null],[12,"start_byte","","The index into the `&str` that represents the first character within the line.",120,null],[12,"start_char","","The character index of the first character in the line.",120,null],[12,"end_break","","The index within the `&str` at which this line breaks into a new line, along with the index at which the following line begins. The variant describes whether the break is caused by a `Newline` character or a `Wrap` by the given wrap function.",120,null],[12,"width","","The total width of all characters within the line.",120,null],[3,"Infos","","An iterator yielding an `Info` struct for each line in the given `text` wrapped by the given `next_break_fn`.",null,null],[3,"Rects","","An iterator yielding a `Rect` for each line in",null,null],[3,"SelectedRects","","An iterator yielding a `Rect` for each selected line in a block of text.",null,null],[4,"Break","","The two types of **Break** indices returned by the **WrapIndicesBy** iterators.",null,null],[13,"Wrap","","A break caused by the text exceeding some maximum width.",121,null],[12,"byte","conrod::text::line::Break","The byte index at which the break occurs.",121,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",121,null],[12,"len_bytes","","The byte length which should be skipped in order to reach the first non-whitespace character to use as the beginning of the next line.",121,null],[13,"Newline","conrod::text::line","A break caused by a newline character.",121,null],[12,"byte","conrod::text::line::Break","The byte index at which the string should wrap due to exceeding a maximum width.",121,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",121,null],[12,"len_bytes","","The width of the \"newline\" token in bytes.",121,null],[13,"End","conrod::text::line","The end of the string has been reached, with the given length.",121,null],[12,"byte","conrod::text::line::Break","The ending byte index.",121,null],[12,"char","","The ending char index.",121,null],[5,"width","conrod::text::line","Produce the width of the given line of text including spaces (i.e. ' ').",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"scalar"}}],[5,"infos_wrapped_by","","Produce an `Infos` iterator wrapped by the given `next_break_fn`.",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"},{"name":"scalar"},{"name":"f"}],"output":{"name":"infos"}}],[5,"infos","","Produce an `Infos` iterator that yields an `Info` for every line in the given text.",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"infos"}}],[5,"rects","","Produce an iterator yielding the bounding `Rect` for each line in the text.",null,{"inputs":[{"name":"i"},{"name":"fontsize"},{"name":"rect"},{"name":"justify"},{"name":"align"},{"name":"scalar"}],"output":{"name":"rects"}}],[5,"selected_rects","","Produces an iterator yielding a `Rect` for the selected range in each selected line in a block of text.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedrects"}}],[6,"NextBreakFnPtr","","An alias for function pointers that are compatible with the `Block`'s required text wrapping function.",null,null],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"rects"}}],[11,"byte_index","","Return the index at which the break occurs.",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"char_index","","Return the index of the `char` at which the break occurs.",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"end_byte","","The end of the byte index range for indexing into the slice.",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_char","","The end of the index range for indexing into the slice.",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"byte_range","","The index range for indexing (via bytes) into the original str slice.",120,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"char_range","","The index range for indexing into a `char` iterator over the original str slice.",120,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"wrap_by_character","","Converts `Self` into an `Infos` whose lines are wrapped at the character that first causes the line width to exceed the given `max_width`.",123,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wrap_by_whitespace","","Converts `Self` into an `Infos` whose lines are wrapped at the whitespace prior to the character that causes the line width to exceed the given `max_width`.",123,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"next","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"FontCollection","conrod::text","The RustType `FontCollection` type used by conrod.",null,null],[6,"Font","","The RustType `Font` type used by conrod.",null,null],[6,"PositionedGlyph","","The RustType `PositionedGlyph` type used by conrod.",null,null],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"justify"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"bool"}}],[11,"next","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"theme","conrod","",null,null],[3,"Theme","conrod::theme","A serializable collection of canvas and widget styling defaults.",null,null],[12,"name","","A name for the theme used for identification.",126,null],[12,"padding","","Padding for Canvas layout and positioning.",126,null],[12,"x_position","","A default widget position along the *x* axis.",126,null],[12,"y_position","","A default widget position along the *y* axis.",126,null],[12,"background_color","","A default background for the theme.",126,null],[12,"shape_color","","A default color for widget shapes.",126,null],[12,"border_color","","A default color for widget borders.",126,null],[12,"border_width","","A default width for widget borders.",126,null],[12,"label_color","","A default color for widget labels.",126,null],[12,"font_id","","The `Id` of the default font used for text widgets when one is not specified.",126,null],[12,"font_size_large","","A default \"large\" font size.",126,null],[12,"font_size_medium","","A default \"medium\" font size.",126,null],[12,"font_size_small","","A default \"small\" font size.",126,null],[12,"widget_styling","","Unique styling for each widget, index-able by the **Widget::kind**.",126,null],[12,"mouse_drag_threshold","","Mouse Drag distance threshold determines the minimum distance from the mouse-down point that the mouse must move before starting a drag operation.",126,null],[12,"double_click_threshold","","Once the `Duration` that separates two consecutive `Click`s is greater than this value, a `DoubleClick` event will no longer be generated.",126,null],[3,"WidgetDefault","","The defaults for a specific widget.",null,null],[12,"style","","The unique style of a widget.",127,null],[12,"common","","The attributes commonly shared between widgets.",127,null],[3,"UniqueDefault","","A **WidgetDefault** downcast to a **Widget**'s unique **Style** type.",null,null],[12,"style","","The unique style for the widget.",128,null],[12,"common","","Attributes that are common to all widgets.",128,null],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"uniquedefault"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor for a WidgetDefault.",127,{"inputs":[{"name":"box"}],"output":{"name":"widgetdefault"}}],[11,"default","","The default theme if not loading from file.",126,{"inputs":[],"output":{"name":"theme"}}],[11,"widget_style","","Retrieve the unique default styling for a widget.",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","conrod","Begin building a new `Ui` instance.",1,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"theme","","The theme used to set default styling for widgets.",1,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"self"}}],[11,"widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Build **Ui** from the given builder",1,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"widget_input","","Returns a `input::Widget` for the given widget",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"widget"}}],[11,"rect_of","","The **Rect** for the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"w_of","","The absolute width of the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"h_of","","The absolute height of the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"wh_of","","The absolute dimensions for the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"xy_of","","The coordinates for the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"kid_area_of","","The `kid_area` of the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"maybe_prev_widget","","An index to the previously updated widget if there is one.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"widget_graph","","Borrow the **Ui**'s `widget_graph`.",0,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"updated_widgets","","Borrow the **Ui**'s set of updated widgets.",0,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"prev_updated_widgets","","Borrow the **Ui**'s set of updated widgets.",0,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",0,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",0,null],[11,"handle_event","","Handle raw window events and update the `Ui` state accordingly.",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":null}],[11,"calc_xy","","Get the centred xy coords for some given `Dimension`s, `Position` and alignment.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"position"},{"name":"position"},{"name":"dimensions"},{"name":"bool"}],"output":{"name":"point"}}],[11,"set_widgets","","A function within which all widgets are instantiated by the user, normally situated within the \"update\" stage of an event loop.",0,{"inputs":[{"name":"self"}],"output":{"name":"uicell"}}],[11,"set_num_redraw_frames","","Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is called. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"needs_redraw","","Tells the `Ui` that it needs to be re-draw everything. It does this by setting the redraw count to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT or `draw_if_changed` for more info on how/why the redraw count is used.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_with","","The first of the `Primitivees` yielded by `Ui::draw` or `Ui::draw_if_changed` will always be a `Rectangle` the size of the window in which conrod is hosted.",0,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"draw","","Draw the `Ui` in it's current state.",0,{"inputs":[{"name":"self"}],"output":{"name":"primitives"}}],[11,"draw_if_changed","","Same as the `Ui::draw` method, but *only* draws if the `redraw_count` is greater than 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kids_bounding_box","","The **Rect** that bounds the kids of the widget with the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"visible_area","","The **Rect** that represents the maximum fully visible area for the widget with the given index, including consideration of cropped scroll area.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"theme","","A reference to the `Theme` that is currently active within the `Ui`.",129,{"inputs":[{"name":"self"}],"output":{"name":"theme"}}],[11,"font","","A convenience method for borrowing the `Font` for the given `Id` if it exists.",129,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"window_dim","","Returns the dimensions of the window",129,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"global_input","","Returns an immutable reference to the `input::Global` of the `Ui`.",129,{"inputs":[{"name":"self"}],"output":{"name":"global"}}],[11,"widget_input","","Returns a `input::Widget` with input events for the widget.",129,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"widget"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",129,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"kids_bounding_box","","The **Rect** that bounds the kids of the widget with the given index.",129,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",129,null],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"as_ref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[0,"utils","","",null,null],[4,"IterDiff","conrod::utils","A type returned by the `iter_diff` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with the iterator's remaining elements starting with the first mis-matched element.",130,null],[13,"Longer","","The remaining elements of the iterator.",130,null],[13,"Shorter","","The total number of elements that were in the iterator.",130,null],[5,"partial_min","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_max","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Clamp a value between some range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"degrees","","Convert degrees to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"fmod","","Modulo float.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"modulo","","The modulo function.",null,{"inputs":[{"name":"i"},{"name":"i"}],"output":{"name":"i"}}],[5,"map_range","","Map a value from a given range to a new given range.",null,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"}],"output":{"name":"y"}}],[5,"percentage","","Get value percentage between max and min.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"f32"}}],[5,"turns","","Convert turns to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"value_from_perc","","Adjust the value to the given percentage.",null,{"inputs":[{"name":"f32"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"val_to_string","","Get a suitable string from the value, its max and the pixel range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"string"}}],[5,"vec2_add","","Add `a` and `b`.",null,null],[5,"vec2_sub","","Subtract `b` from `a`.",null,null],[5,"bounding_box_for_points","","Find the bounding rect for the given series of points.",null,{"inputs":[{"name":"i"}],"output":{"name":"rect"}}],[5,"iter_diff","","Compares every element yielded by both elems and new_elems in lock-step.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"option"}}],[5,"write_if_different","","Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.",null,null],[5,"iter_eq","","Compares two iterators to see if they yield the same thing.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"bool"}}],[0,"widget","conrod","Widgets are the core building blocks for every conrod user interface.",null,null],[3,"UpdateArgs","conrod::widget","Arguments for the **Widget::update** method in a struct to simplify the method signature.",null,null],[12,"id","","The **Widget**'s unique index.",131,null],[12,"maybe_parent_id","","The **Widget**'s parent unique index, if there is one.",131,null],[12,"prev","","The **Widget**'s previous state. Specifically, the state that is common between all widgets, such as positioning, floatability, draggability, etc.",131,null],[12,"state","","A wrapper around the **Widget**'s unique state, providing methods for both immutably viewing and mutably updating the state.",131,null],[12,"rect","","The rectangle describing the **Widget**'s area.",131,null],[12,"style","","The **Widget**'s current **Widget::Style**.",131,null],[12,"ui","","Restricted access to the `Ui`.",131,null],[3,"KidAreaArgs","","Arguments to the **Widget::kid_area** method in a struct to simplify the method signature.",null,null],[12,"rect","","The **Rect** describing the **Widget**'s position and dimensions.",132,null],[12,"style","","Current **Widget::Style** of the **Widget**.",132,null],[12,"theme","","The active **Theme** within the **Ui**.",132,null],[12,"fonts","","The **Font** (for determining text width).",132,null],[3,"KidArea","","The area upon which a **Widget**'s child widgets will be placed.",null,null],[12,"rect","","The **Rect** bounds describing the position and area.",133,null],[12,"pad","","The distance between the edge of the area and where the widgets will be placed.",133,null],[3,"Floating","","State necessary for \"floating\" (pop-up style) widgets.",null,null],[12,"time_last_clicked","","The time the **Widget** was last clicked (used for depth sorting in the widget **Graph**).",134,null],[3,"CommonBuilder","","A struct containing builder data common to all **Widget** types.",null,null],[12,"style","","Styling and positioning data that is common between all widget types.",135,null],[12,"maybe_parent_id","","The parent widget of the Widget.",135,null],[12,"is_floating","","Whether or not the Widget is a \"floating\" Widget.",135,null],[12,"crop_kids","","Whether or not the children of this **Widget** should be cropped to its `kid_area`.",135,null],[12,"maybe_x_scroll","","Arguments to the scrolling of the widget's *x* axis.",135,null],[12,"maybe_y_scroll","","Arguments to the scrolling of the widget's *y* axis.",135,null],[12,"place_on_kid_area","","Whether or not the **Widget** should be placed on the kid_area.",135,null],[12,"maybe_graphics_for","","Describes whether or not the **Widget** is instantiated as a graphical element for some other **Widget**.",135,null],[3,"CommonStyle","","Styling and positioning data that is common between all widget types.",null,null],[12,"maybe_x_dimension","","The width of a Widget.",136,null],[12,"maybe_y_dimension","","The height of a Widget.",136,null],[12,"maybe_x_position","","The position of a Widget along the *x* axis.",136,null],[12,"maybe_y_position","","The position of a Widget along the *y* axis.",136,null],[12,"maybe_depth","","The rendering Depth of the Widget.",136,null],[3,"State","","A wrapper around a **Widget**'s unique **Widget::State**.",null,null],[3,"CommonState","","A wrapper around state that is common to all **Widget** types.",null,null],[12,"rect","","The rectangle describing the `Widget`'s area.",137,null],[12,"depth","","The rendering depth for the Widget (the default is 0.0).",137,null],[12,"maybe_floating","","Floating state for the widget if it is floating.",137,null],[12,"kid_area","","The area of the widget upon which kid widgets are placed.",137,null],[12,"maybe_x_scroll_state","","If the widget is scrollable across the *x* axis.",137,null],[12,"maybe_y_scroll_state","","If the widget is scrollable across the *y* axis.",137,null],[3,"PreUpdateCache","","",null,null],[12,"type_id","","The **Widget**'s unique type identifier.",138,null],[12,"id","","The **Widget**'s unique Id.",138,null],[12,"maybe_parent_id","","The **Widget**'s parent's unique index (if it has a parent).",138,null],[12,"maybe_x_positioned_relatively_id","","If this **Widget** is relatively positioned to another **Widget**, this will be the index of the **Widget** to which this **Widget** is relatively positioned along the *x* axis.",138,null],[12,"maybe_y_positioned_relatively_id","","If this **Widget** is relatively positioned to another **Widget**, this will be the index of the **Widget** to which this **Widget** is relatively positioned along the *y* axis.",138,null],[12,"rect","","The **Rect** describing the **Widget**'s position and dimensions.",138,null],[12,"depth","","The z-axis depth - affects the render order of sibling widgets.",138,null],[12,"kid_area","","The area upon which the **Widget**'s children widgets will be placed.",138,null],[12,"maybe_floating","","Floating data for the **Widget** if there is some.",138,null],[12,"crop_kids","","Whether or not the children of the **Widget** should be cropped to its `kid_area`.",138,null],[12,"maybe_x_scroll_state","","Scrolling data for the **Widget**'s *x* axis if there is some.",138,null],[12,"maybe_y_scroll_state","","Scrolling data for the **Widget**'s *y* axis if there is some.",138,null],[12,"maybe_graphics_for","","Whether or not the **Widget** has been instantiated as a graphical element for some other widget.",138,null],[3,"PostUpdateCache","","",null,null],[12,"id","","The **Widget**'s unique **Id**.",139,null],[12,"maybe_parent_id","","The **Widget**'s parent's unique **Id** (if it has a parent).",139,null],[12,"state","","The newly produced unique **Widget::State** associated with the **Widget**.",139,null],[12,"style","","The newly produced unique **Widget::Style** associated with the **Widget**.",139,null],[4,"MaybeParent","","The builder argument for the **Widget**'s parent.",null,null],[13,"None","","The user specified the widget should not have any parents, so the Root will be used.",140,null],[13,"Some","","The user gave a specific parent widget.",140,null],[13,"Unspecified","","No parent widget was specified, so we will assume they want the last parent.",140,null],[5,"default_x_dimension","","Determines the default **Dimension** for a **Widget**.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[5,"default_y_dimension","","Determines the default **Dimension** for a **Widget**.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[0,"id","","The widget identifier type used throughout conrod, along with helper types and macros to simplify the process of generating them.",null,null],[3,"Generator","conrod::widget::id","Used for generating new unique `widget::Id`s.",null,null],[3,"List","","A list of lazily generated `widget::Id`s.",null,null],[3,"ListWalk","","An iterator-like type for producing indices from a `List`.",null,null],[6,"Id","","Unique widget identifier.",null,null],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"new","","Constructor for a new `widget::Id` generator.",142,{"inputs":[{"name":"graph"}],"output":{"name":"self"}}],[11,"next","","Generate a new, unique `widget::Id` into a Placeholder node within the widget graph. This should only be called once for each unique widget needed to avoid unnecessary bloat within the `Ui`'s widget graph.",142,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"new","","Construct a cache for multiple indices.",141,{"inputs":[],"output":{"name":"self"}}],[11,"walk","","Produce a walker for producing the `List`'s indices.",141,{"inputs":[{"name":"self"}],"output":{"name":"listwalk"}}],[11,"resize","","Resizes the `List`'s inner `Vec` to the given target length, using the given `UiCell` to generate new unique `widget::Id`s if necessary.",141,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"generator"}],"output":null}],[11,"deref","","",141,null],[11,"next","","Yield the next index, generating one if it does not yet exist.",143,{"inputs":[{"name":"self"},{"name":"list"},{"name":"generator"}],"output":{"name":"id"}}],[0,"scroll","conrod::widget","Scroll related types and logic.",null,null],[3,"Scroll","conrod::widget::scroll","Arguments given via a scrollable `Widget`'s builder methods for the scrolling along a single axis.",null,null],[3,"State","","Scroll state calculated for a single axis.",null,null],[12,"offset","","The distance that has been scrolled from the origin.",144,null],[12,"offset_bounds","","The start and end bounds for the offset along the axis.",144,null],[12,"scrollable_range_len","","The total range which may be \"offset\" from the \"root\" range (aka the `kid_area`).",144,null],[12,"is_scrolling","","Whether or not the this axis is currently scrolling.",144,null],[4,"X","","Behaviour for scrolling across the `X` axis.",null,null],[4,"Y","","Behaviour for scrolling across the `Y` axis.",null,null],[6,"StateX","","State for scrolling along the **X** axis.",null,null],[6,"StateY","","State for scrolling along the **Y** axis.",null,null],[8,"Axis","","Methods for distinguishing behaviour between both scroll axes at compile-time.",null,null],[10,"parallel_range","","The range of the given `Rect` that is parallel with this `Axis`.",145,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"perpendicular_range","","The range of the given `Rect` that is perpendicular with this `Axis`.",145,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"padding_range","","Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.",145,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[10,"mouse_scalar","","The coordinate of the given mouse position that corresponds with this `Axis`.",145,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[10,"offset_direction","","A `Scalar` multiplier representing the direction in which positive offset shifts the `scrollable_range` (either `-1.0` or `1.0).",145,{"inputs":[],"output":{"name":"scalar"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"scroll"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"y"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"bool"}}],[11,"new","","The default `Scroll` args.",146,{"inputs":[],"output":{"name":"self"}}],[11,"update","","Calculate the new scroll state for the single axis of a `Widget`.",144,{"inputs":[{"name":"ui"},{"name":"id"},{"name":"kidarea"},{"name":"option"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"parallel_range","","",147,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",147,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",147,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"mouse_scalar","","",147,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"offset_direction","","",147,{"inputs":[],"output":{"name":"scalar"}}],[11,"parallel_range","","",148,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",148,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",148,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"mouse_scalar","","",148,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"offset_direction","","",148,{"inputs":[],"output":{"name":"scalar"}}],[0,"primitive","conrod::widget","Primitive widgets are special in that they are built into conrod's `render`ing logic.",null,null],[0,"line","conrod::widget::primitive","A simple, non-interactive widget for drawing a single straight Line.",null,null],[3,"Line","conrod::widget::primitive::line","A simple, non-interactive widget for drawing a single straight Line.",null,null],[12,"start","","The start of the line.",149,null],[12,"end","","The end of the line.",149,null],[12,"common","","Data necessary and common for all widget builder types.",149,null],[12,"style","","Unique styling.",149,null],[12,"should_centre_points","","Whether or not the line should be automatically centred to the widget position.",149,null],[3,"State","","Unique state for the Line widget.",null,null],[12,"start","","The start of the line.",150,null],[12,"end","","The end of the line.",150,null],[3,"Style","","Unique styling for a Line widget.",null,null],[12,"maybe_pattern","","The patter for the line.",151,null],[12,"maybe_color","","Color of the Button's pressable area.",151,null],[12,"maybe_thickness","","The thickness of the line.",151,null],[12,"maybe_cap","","The style with which the ends of the line are drawn.",151,null],[4,"Pattern","","The pattern used to draw the line.",null,null],[13,"Solid","","A single continuous stroke.",152,null],[13,"Dashed","","A series of line strokes.",152,null],[13,"Dotted","","A series of circles.",152,null],[4,"Cap","","Whether the end of the **Line** should be flat or rounded.",null,null],[13,"Flat","","The line is capped with a flat edge.",153,null],[13,"Round","","The line is capped with a semi-circle.",153,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"cap"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"cap"}],"output":{"name":"bool"}}],[11,"styled","","Build a new **Line** widget with the given style.",149,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default **Line** widget.",149,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs","","Build a new **Line** whose bounding box is fit to the absolute co-ordinates of the line points.",149,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as **Line::abs** but with the given style.",149,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new **Line** and shift the location of the start and end points so that the centre of their bounding rectangle lies at the position determined by the layout for the **Line** widget.",149,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as **Line::centred** but with the given style.",149,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the Line.",149,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",149,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",149,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",149,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Constructor for a default Line Style.",151,{"inputs":[],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",151,{"inputs":[],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",151,{"inputs":[],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",151,{"inputs":[],"output":{"name":"self"}}],[11,"pattern","","The style with some given pattern.",151,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"self"}}],[11,"color","","The style with some given color.",151,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"thickness","","The style with some given thickness.",151,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"cap","","The style for the ends of the Line.",151,{"inputs":[{"name":"self"},{"name":"cap"}],"output":{"name":"self"}}],[11,"set_pattern","","Set the pattern for the line.",151,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":null}],[11,"set_color","","Set the color for the line.",151,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"set_thickness","","Set the thickness for the line.",151,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"set_cap","","Set the **Cap** for the line.",151,{"inputs":[{"name":"self"},{"name":"cap"}],"output":null}],[11,"get_pattern","","The Pattern for the Line.",151,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"pattern"}}],[11,"get_color","","The Color for the Line.",151,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"get_thickness","","The width or thickness of the Line.",151,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"get_cap","","The styling for the ends of the Line.",151,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"cap"}}],[11,"common","","",149,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",149,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",149,null],[11,"style","","",149,null],[11,"update","","Update the state of the Line.",149,null],[11,"color","","",149,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"image","conrod::widget::primitive","A simple, non-interactive widget for drawing an `Image`.",null,null],[3,"Image","conrod::widget::primitive::image","A primitive and basic widget for drawing an `Image`.",null,null],[12,"common","","Data necessary and common for all widget builder types.",154,null],[12,"image_id","","The unique identifier for the image that will be drawn.",154,null],[12,"src_rect","","The rectangle area of the original source image that should be used.",154,null],[12,"style","","Unique styling.",154,null],[3,"State","","Unique `State` to be stored between updates for the `Image`.",null,null],[12,"src_rect","","The rectangular area of the image that we wish to display.",155,null],[12,"image_id","","The unique identifier for the image's associated data that will be drawn.",155,null],[3,"Style","","Unique styling for the `Image` widget.",null,null],[12,"maybe_color","","Optionally specify a single colour to use for the image.",156,null],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",156,{"inputs":[],"output":{"name":"self"}}],[11,"maybe_color","","Retrieves the value from the `Style`.",156,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new `Image`.",154,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",154,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",154,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"common","","",154,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",154,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",154,null],[11,"style","","",154,null],[11,"default_x_dimension","","",154,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",154,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",154,null],[0,"point_path","conrod::widget::primitive","A simple, non-interactive widget for drawing a series of conjoined lines.",null,null],[3,"PointPath","conrod::widget::primitive::point_path","A simple, non-interactive widget for drawing a series of lines and/or points.",null,null],[12,"points","","Some iterator yielding a series of Points.",157,null],[12,"common","","Data necessary and common for all widget builder types.",157,null],[12,"style","","Unique styling for the PointPath.",157,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",157,null],[3,"State","","State that is unique to the PointPath.",null,null],[12,"points","","An owned version of the list of points.",158,null],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"pointpath"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"styled","","The same as **PointPath::new** but with th given style.",157,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default PointPath widget.",157,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs","","Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.",157,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as **PointPath::abs** but constructs the **PointPath** with the given style.",157,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new **PointPath** and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the **PointPath** widget.",157,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as **PointPath::centred** but constructs the **PointPath** with the given style.",157,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the **PointPath**'s lines.",157,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a Solid line.",157,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",157,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",157,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"common","","",157,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",157,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",157,null],[11,"style","","",157,null],[11,"update","","Update the state of the Line.",157,null],[11,"color","","",157,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"shape","conrod::widget::primitive","A module encompassing the primitive 2D shape widgets.",null,null],[4,"Style","conrod::widget::primitive::shape","The style for some 2D shape.",null,null],[13,"Outline","","The outline of the shape with this style.",159,null],[13,"Fill","","A rectangle filled with this color.",159,null],[0,"circle","","An adaptation of the **Oval** type where the width and height are equal.",null,null],[3,"Circle","conrod::widget::primitive::shape::circle","A tiny wrapper around the **Oval** widget type.",null,null],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"circle"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"styled","","Build a circular **Oval** with the given dimensions and style.",160,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"name":"oval"}}],[11,"fill","","Build a new **Fill**ed circular **Oval**.",160,{"inputs":[{"name":"scalar"}],"output":{"name":"oval"}}],[11,"fill_with","","Build a new circular **Oval** **Fill**ed with the given color.",160,{"inputs":[{"name":"scalar"},{"name":"color"}],"output":{"name":"oval"}}],[11,"outline","","Build a new circular **Outline**d **Oval** widget.",160,{"inputs":[{"name":"scalar"}],"output":{"name":"oval"}}],[11,"outline_styled","","Build a new circular **Oval** **Outline**d with the given style.",160,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"name":"oval"}}],[0,"oval","conrod::widget::primitive::shape","A simple, non-interactive widget for drawing a single **Oval**.",null,null],[3,"Oval","conrod::widget::primitive::shape::oval","A simple, non-interactive widget for drawing a single **Oval**.",null,null],[12,"common","","Data necessary and common for all widget builder types.",161,null],[12,"style","","Unique styling.",161,null],[3,"State","","Unique state for the **Oval**.",null,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"oval"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"styled","","Build an **Oval** with the given dimensions and style.",161,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new **Fill**ed **Oval**.",161,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new **Oval** **Fill**ed with the given color.",161,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new **Outline**d **Oval** widget.",161,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a new **Oval** **Outline**d with the given style.",161,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",161,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",161,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",161,null],[11,"style","","",161,null],[11,"update","","",161,null],[11,"color","","",161,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"polygon","conrod::widget::primitive::shape","A simple, non-interactive **Polygon** widget for drawing arbitrary convex shapes.",null,null],[3,"Polygon","conrod::widget::primitive::shape::polygon","A basic, non-interactive, arbitrary **Polygon** widget.",null,null],[12,"points","","The points describing the corners of the **Polygon**.",163,null],[12,"common","","Data necessary and common for all widget builder types.",163,null],[12,"style","","Unique styling for the **Polygon**.",163,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",163,null],[3,"State","","Unique state for the **Polygon**.",null,null],[12,"points","","An owned version of the points yielded by the **Polygon**'s `points` iterator.",164,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",165,null],[13,"Fill","","The rectangle area is filled with some color.",165,null],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"styled","","Build a polygon with the given points and style.",163,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a **Polygon** with the default **Fill** style.",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fill_with","","Build a **Polygon** **Fill**ed with the given **Color**.",163,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a **Polygon** with the default **Outline** style.",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a **Polygon** **Outline**ed with the given line style.",163,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_styled","","Build a new filled **Polygon** whose bounding box is fit to the absolute co-ordinates of the points.",163,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_fill","","The same as **Polygon::abs_styled** but builds the **Polygon** with the default **Fill** style.",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_fill_with","","The same as **Polygon::abs_styled** but builds the **Polygon** **Fill**ed with the given **Color**.",163,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"abs_outline","","The same as **Polygon::abs_styled** but builds the **Polygon** with the default **Outline** style.",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_outline_styled","","The same as **Polygon::abs_styled** but builds the **Polygon** with the given **Outline** styling.",163,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_styled","","Build a new **Polygon** and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the **Polygon** widget.",163,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_fill","","The same as **Polygon::centred_styled** but constructs the **Polygon** with the default **Fill** style.",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_fill_with","","The same as **Polygon::centred_styled** but constructs the **Polygon** **Fill**ed with the given color.",163,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"centred_outline","","The same as **Polygon::centred_styled** but constructs the **Polygon** with the default **Outline** style.",163,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_outline_styled","","The same as **Polygon::centred_styled** but constructs the **Polygon** **Outline**d with the given styling.",163,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",163,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",163,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",163,null],[11,"style","","",163,null],[11,"update","","Update the state of the Polygon.",163,null],[11,"color","","",163,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"rectangle","conrod::widget::primitive::shape","A simple, non-interactive rectangle shape widget.",null,null],[3,"Rectangle","conrod::widget::primitive::shape::rectangle","A basic, non-interactive rectangle shape widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",166,null],[12,"style","","Unique styling for the **Rectangle**.",166,null],[3,"State","","Unique state for the Rectangle.",null,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",167,null],[13,"Fill","","The rectangle area is filled with some color.",167,null],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"styled","","Build a rectangle with the dimensions and style.",166,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rectangle.",166,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rectangle widget filled with the given color.",166,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rectangle widget.",166,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rectangle rather than a filled one.",166,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",166,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",166,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",166,null],[11,"style","","",166,null],[11,"update","","Update the state of the Rectangle.",166,null],[11,"color","","",166,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","conrod::widget::primitive::shape","",159,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fill","","A default `Fill` style.",159,{"inputs":[],"output":{"name":"self"}}],[11,"fill_with","","A `Fill` style with some given `Color`.",159,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","A default `Outline` style.",159,{"inputs":[],"output":{"name":"self"}}],[11,"outline_styled","","A default `Outline` style.",159,{"inputs":[{"name":"style"}],"output":{"name":"self"}}],[11,"color","","The style with some given Color.",159,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"set_color","","Set the color for the style.",159,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"get_color","","Get the color of the Rectangle.",159,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[0,"text","conrod::widget::primitive","The primitive widget used for displaying text.",null,null],[3,"Text","conrod::widget::primitive::text","Displays some given text centered within a rectangular area.",null,null],[12,"common","","Data necessary and common for all widget builder types.",169,null],[12,"text","","The text to be drawn by the **Text**.",169,null],[12,"style","","Unique styling for the **Text**.",169,null],[3,"Style","","The styling for a **Text**'s graphics.",null,null],[12,"font_size","","The font size for the **Text**.",170,null],[12,"color","","The color of the **Text**.",170,null],[12,"maybe_wrap","","Whether or not the text should wrap around the width.",170,null],[12,"line_spacing","","The spacing between consecutive lines.",170,null],[12,"justify","","Alignment of the text along the *x* axis.",170,null],[12,"font_id","","The id of the font to use for rendring and layout.",170,null],[3,"State","","The state to be stored between updates for the **Text**.",null,null],[12,"string","","An owned version of the string.",171,null],[12,"line_infos","","The indices and width for each line of text within the `string`.",171,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"Character","","Wrap at the first character that exceeds the width.",172,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",172,null],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",170,{"inputs":[],"output":{"name":"self"}}],[11,"font_size","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"color","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"maybe_wrap","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"justify","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"font_id","","Retrieves the value from the `Style`.",170,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Build a new **Text** widget.",169,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"no_line_wrap","","Specify that the **Text** should not wrap lines around the width.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_word","","Line wrap the **Text** at the beginning of the first word that exceeds the width.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_character","","Line wrap the **Text** at the beginning of the first character that exceeds the width.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","A method for specifying the `Font` used for displaying the `Text`.",169,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_style","","Build the **Text** with the given **Style**.",169,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"left_justify","","Align the text to the left of its bounding **Rect**'s *x* axis range.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify","","Align the text to the right of its bounding **Rect**'s *x* axis range.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",169,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",169,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",169,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",169,null],[11,"style","","",169,null],[11,"default_x_dimension","","If no specific width was given, we'll use the width of the widest line as a default.",169,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","If no specific height was given, we'll use the total height of the text as a default.",169,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the Text.",169,null],[11,"color","","",169,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"bordered_rectangle","conrod::widget","The `BorderedRectangle` widget and related items.",null,null],[3,"BorderedRectangle","conrod::widget::bordered_rectangle","A filled rectangle widget that may or may not have some border.",null,null],[12,"common","","Data necessary and common for all widget builder types.",173,null],[12,"style","","Unique styling for the **BorderedRectangle**.",173,null],[3,"Style","","Unique styling for the **BorderedRectangle** widget.",null,null],[12,"color","","Shape styling for the inner rectangle.",174,null],[12,"border","","The thickness of the border.",174,null],[12,"border_color","","The color of the border.",174,null],[3,"State","","Unique state for the `BorderedRectangle`.",null,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"borderedrectangle"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",174,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",174,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",174,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",174,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"new","","Build a new **BorderedRectangle**.",173,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",173,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",173,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",173,null],[11,"style","","",173,null],[11,"update","","Update the state of the Rectangle.",173,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",173,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",173,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",173,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"button","conrod::widget","The `Button` widget and related items.",null,null],[3,"Button","conrod::widget::button","A pressable button widget whose reaction is triggered upon release.",null,null],[12,"show","","Whether the `Button` is a `Flat` color or an `Image`.",175,null],[12,"style","","Unique styling parameters for the Button.",175,null],[3,"Style","","Unique styling for the Button.",null,null],[12,"color","","Color of the Button's pressable area.",176,null],[12,"border","","Width of the border surrounding the button",176,null],[12,"border_color","","The color of the border.",176,null],[12,"label_color","","The color of the Button's label.",176,null],[12,"label_font_size","","The font size of the Button's label.",176,null],[12,"label_font_id","","The ID of the font used to display the label.",176,null],[12,"label_justify","","The label's typographic alignment over the *x* axis.",176,null],[12,"label_x","","The position of the title bar's `Label` widget over the *x* axis.",176,null],[12,"label_y","","The position of the title bar's `Label` widget over the *y* axis.",176,null],[3,"FlatIds","","Identifiers for a \"flat\" button.",null,null],[12,"rectangle","","",177,null],[12,"label","","",177,null],[3,"ImageIds","","Identifiers for an image button.",null,null],[12,"image","","",178,null],[12,"label","","",178,null],[3,"Flat","","The `Button` simply displays a flat color.",null,null],[3,"Image","","The `Button` displays an `Image` on top.",null,null],[12,"image_id","","The id of the `Image` to be used.",179,null],[12,"hover_image_id","","The image displayed when the mouse hovers over the button.",179,null],[12,"press_image_id","","The image displayed when the mouse has captured and is pressing the button.",179,null],[12,"color","","If `Some`, maps the image's luminance to this `Color`.",179,null],[12,"src_rect","","The rectangular area of the original source image that should be displayed.",179,null],[3,"TimesClicked","","The `Event` type yielded by the `Button` widget.",null,null],[12,"0","","",180,null],[4,"ImageColor","","The coloring of the `Image`.",null,null],[13,"Normal","","The image's luminance will be mapped to this color.",181,null],[13,"WithFeedback","","The image's luminance will be mapped to this color.",181,null],[13,"None","","The image's regular color will be used.",181,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",176,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"label_justify","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"label_x","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"relative"}}],[11,"label_y","","Retrieves the value from the `Style`.",176,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"relative"}}],[11,"new","","Construct a new `widget::Id` container.",177,{"inputs":[{"name":"generator"}],"output":{"name":"self"}}],[11,"new","","Construct a new `widget::Id` container.",178,{"inputs":[{"name":"generator"}],"output":{"name":"self"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"flat"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"imagecolor"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"timesclicked"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"was_clicked","","`true` if the `Button` was clicked one or more times.",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"image","","Begin building a button displaying the given `Image` on top.",175,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",175,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"image_color","","Map the `Image`'s luminance to the given color.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"image_color_with_feedback","","Map the `Image`'s luminance to the given color.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"hover_image","","The image displayed while the mouse hovers over the `Button`.",175,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"press_image","","The image displayed while the `Button` is pressed.",175,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"new","","Begin building a flat-colored `Button` widget.",175,{"inputs":[],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",175,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"left_justify_label","","Align the label to the left of the `Button`'s surface.",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify_label","","Align the label to the mid-left of the `Button`'s surface.",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify_label","","Align the label to the mid-left of the `Button`'s surface.",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the *x* axis.",175,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the *y* axis.",175,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",175,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",175,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",175,null],[11,"style","","",175,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Button.",175,null],[11,"common","","",175,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",175,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",175,null],[11,"style","","",175,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Button.",175,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",175,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"canvas","conrod::widget","The `Canvas` widget and related items.",null,null],[3,"Canvas","conrod::widget::canvas","**Canvas** is designed to be a \"container\"-like \"parent\" widget that simplifies placement of \"children\" widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",183,null],[12,"style","","The builder data related to the style of the Canvas.",183,null],[12,"maybe_title_bar_label","","The label for the **Canvas**' **TitleBar** if there is one.",183,null],[12,"maybe_splits","","A list of child **Canvas**ses as splits of this **Canvas** flowing in the given direction.",183,null],[3,"State","","**Canvas** state to be cached.",null,null],[3,"Style","","Unique styling for the Canvas.",null,null],[12,"color","","The color of the Canvas' rectangle surface.",184,null],[12,"border","","The width of the border surrounding the Canvas' rectangle.",184,null],[12,"border_color","","The color of the Canvas' border.",184,null],[12,"length","","If this Canvas is a split of some parent Canvas, this is the length of the split.",184,null],[12,"pad_left","","Padding for the left edge of the Canvas' kid area.",184,null],[12,"pad_right","","Padding for the right edge of the Canvas' kid area.",184,null],[12,"pad_bottom","","Padding for the bottom edge of the Canvas' kid area.",184,null],[12,"pad_top","","Padding for the top edge of the Canvas' kid area.",184,null],[12,"title_bar_color","","The color of the title bar. Defaults to the color of the Canvas.",184,null],[12,"title_bar_text_color","","The color of the title bar's text.",184,null],[12,"title_bar_font_size","","The font size for the title bar's text.",184,null],[12,"title_bar_maybe_wrap","","The way in which the title bar's text should wrap.",184,null],[12,"title_bar_line_spacing","","The distance between lines for multi-line title bar text.",184,null],[12,"title_bar_justify","","The label's typographic alignment over the *x* axis.",184,null],[4,"Length","","Used to describe the desired length for a `Split`.",null,null],[13,"Absolute","","The length as an absolute scalar.",185,null],[13,"Weight","","The length as a weight of the non-absolute length of the parent **Canvas**.",185,null],[4,"Direction","","The direction in which a sequence of canvas splits will be laid out.",null,null],[13,"X","","Lay splits along the *x* axis.",186,null],[13,"Y","","Lay splits along the *y* axis.",186,null],[6,"ListOfSplits","","A series of **Canvas** splits along with their unique identifiers.",null,null],[6,"FlowOfSplits","","A series of **Canvas** splits flowing in the specified direction.",null,null],[6,"Weight","","The length of a `Split` given as a weight.",null,null],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"canvas"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",184,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"length","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"length"}}],[11,"pad_left","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_right","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_bottom","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_top","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"title_bar_color","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"title_bar_text_color","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"title_bar_font_size","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"title_bar_maybe_wrap","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"title_bar_line_spacing","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"title_bar_justify","","Retrieves the value from the `Style`.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new Canvas builder.",183,{"inputs":[],"output":{"name":"self"}}],[11,"title_bar","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"pad_left","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"length","","Set the length of the Split as an absolute scalar.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"length_weight","","Set the length of the Split as a weight.",183,{"inputs":[{"name":"self"},{"name":"weight"}],"output":{"name":"self"}}],[11,"flow_right","","Set the child Canvasses flowing to the right.",183,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_left","","Set the child Canvasses flowing to the left.",183,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_up","","Set the child Canvasses flowing upwards.",183,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_down","","Set the child Canvasses flowing downwards.",183,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges of the area where child widgets will be placed.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","Set the padding of the area where child widgets will be placed.",183,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"title_bar_color","","Set the color of the `Canvas`' `TitleBar` if it is visible.",183,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"common","","",183,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",183,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",183,null],[11,"style","","",183,null],[11,"default_x_position","","",183,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","",183,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"drag_area","","The title bar area at which the Canvas can be clicked and dragged.",183,{"inputs":[{"name":"self"},{"name":"dimensions"},{"name":"style"},{"name":"theme"}],"output":{"name":"option"}}],[11,"kid_area","","The area of the widget below the title bar, upon which child widgets will be placed.",183,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Canvas.",183,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"padding","","Get the Padding for the Canvas' kid area.",184,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"padding"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","",183,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",183,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"drop_down_list","conrod::widget","The `DropDownList` and related items.",null,null],[3,"DropDownList","conrod::widget::drop_down_list","Displays a given `Vec<String>` as a selectable drop down menu.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",187,null],[12,"border","","Width of the widget's border.",187,null],[12,"border_color","","Color of the widget's border.",187,null],[12,"label_color","","Color of the item labels.",187,null],[12,"label_font_size","","Font size for the item labels.",187,null],[12,"label_justify","","The label's typographic alignment over the *x* axis.",187,null],[12,"label_x","","The label's position relative to its `Button` along the *x* axis.",187,null],[12,"label_y","","The label's position relative to its `Button` along the *y* axis.",187,null],[12,"maybe_max_visible_height","","Maximum height of the Open menu before the scrollbar appears.",187,null],[12,"scrollbar_position","","The position of the scrollbar in the case that the list is scrollable.",187,null],[12,"scrollbar_width","","The width of the scrollbar in the case that the list is scrollable.",187,null],[12,"label_font_id","","The ID of the font used to display the labels.",187,null],[3,"State","","Represents the state of the DropDownList.",null,null],[4,"MaxHeight","","Representations of the max height of the visible area of the DropDownList.",null,null],[13,"Items","","Specify the max height as a number of items.",188,null],[13,"Scalar","","Specify the max height as an absolute scalar distance.",188,null],[6,"Idx","","The index of a selected item.",null,null],[6,"Len","","The number of items in a list.",null,null],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",187,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_justify","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"label_x","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"relative"}}],[11,"label_y","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"relative"}}],[11,"maybe_max_visible_height","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"scrollbar_position","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"scrollbar_width","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",187,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"maxheight"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"maxheight"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"maxheight"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new DropDownList.",189,null],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_visible_items","","Set the maximum height of the DropDownList (before the scrollbar appears) as a number of items.",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_visible_height","","Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar height.",189,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the list should be scrollable and should provide a `Scrollbar` to the right of the items.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the list should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"no_scrollbar","","Even in the case that the list is scrollable, do not display a `Scrollbar`.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","Specify the width of the scrollbar.",189,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",189,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"left_justify_label","","Align the labels to the left of their `Button`s' surface.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify_label","","Align the labels to the right of their `Button`s' surface.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify_label","","Center the labels to the their `Button`s' surface.",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the *x* axis.",189,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the *y* axis.",189,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"common","","",189,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",189,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",189,null],[11,"style","","",189,null],[11,"update","","Update the state of the DropDownList.",189,null],[11,"button_style","","Style for a `Button` given this `Style`'s current state.",187,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",189,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"envelope_editor","conrod::widget","The `EnvelopeEditor` widget and related items.",null,null],[3,"EnvelopeEditor","conrod::widget::envelope_editor","Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.",null,null],[12,"skew_y_range","","The value skewing for the envelope's y-axis. This is useful for displaying exponential ranges such as frequency.",190,null],[3,"Style","","Styling for the EnvelopeEditor, necessary for constructing its renderable Element.",null,null],[12,"color","","Coloring for the EnvelopeEditor's **BorderedRectangle**.",191,null],[12,"border","","Thickness of the **BorderedRectangle**'s border.",191,null],[12,"border_color","","Color of the border.",191,null],[12,"label_color","","Color of the label.",191,null],[12,"label_font_size","","The font size of the **EnvelopeEditor**'s label if one was given.",191,null],[12,"value_font_size","","The font size of the value label.",191,null],[12,"point_radius","","The radius of the envelope points.",191,null],[12,"line_thickness","","The thickness of the envelope lines.",191,null],[12,"label_font_id","","The ID of the font used to display the label.",191,null],[3,"State","","Represents the state of the EnvelopeEditor widget.",null,null],[4,"Event","","The kinds of events that may be yielded by the `EnvelopeEditor`.",null,null],[13,"AddPoint","","Insert a new point.",192,null],[12,"i","conrod::widget::envelope_editor::Event","The index at which the point should be inserted.",192,null],[12,"point","","The new point.",192,null],[13,"RemovePoint","conrod::widget::envelope_editor","Remove a point.",192,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be removed.",192,null],[13,"MovePoint","conrod::widget::envelope_editor","Move a point.",192,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be moved.",192,null],[12,"x","","The point's new *x* value.",192,null],[12,"y","","The point's new *y* value.",192,null],[8,"EnvelopePoint","conrod::widget::envelope_editor","`EnvPoint` must be implemented for any type that is used as a 2D point within the EnvelopeEditor.",null,null],[16,"X","","A value on the X-axis of the envelope.",193,null],[16,"Y","","A value on the Y-axis of the envelope.",193,null],[10,"get_x","","Return the X value.",193,null],[10,"get_y","","Return the Y value.",193,null],[10,"set_x","","Set the X value.",193,null],[10,"set_y","","Set the Y value.",193,null],[11,"get_curve","","Return the bezier curve depth (-1. to 1.) for the next interpolation.",193,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_curve","","Set the bezier curve depth (-1. to 1.) for the next interpolation.",193,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"new","","Create a new EnvPoint.",193,null],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",191,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"f64"}}],[11,"border_color","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"value_font_size","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"point_radius","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"line_thickness","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",191,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"get_x","","Return the X value.",194,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"get_y","","Return the Y value.",194,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"set_x","","Return the X value.",194,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"set_y","","Return the Y value.",194,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"new","","Create a new Envelope Point.",194,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"point"}}],[11,"new","","Construct an EnvelopeEditor widget.",190,null],[11,"label_font_id","","Specify the font used for displaying the label.",190,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"point_radius","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"skew_y","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"update","","Update the given `envelope` in accordance with the `Event`.",192,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"common","","",190,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",190,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",190,null],[11,"style","","",190,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the `EnvelopeEditor` in accordance to the latest input and call the given `react` function if necessary.",190,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",190,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"file_navigator","conrod::widget","A widget for navigating through through a file system. Generally inspired by Finder.",null,null],[3,"FileNavigator","conrod::widget::file_navigator","A widget for navigating and interacting with a file system.",null,null],[12,"style","","Unique styling for the widget.",195,null],[12,"starting_directory","","The first directory shown for the `FileNavigator`.",195,null],[12,"types","","Only display files of the given type.",195,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Directory","","Represents the state for a single directory.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",196,null],[12,"unselected_color","","The color of the unselected entries.",196,null],[12,"text_color","","The color of the directory and file names.",196,null],[12,"font_size","","The font size for the directory and file names.",196,null],[12,"column_width","","The default width of a single directory view.",196,null],[12,"resize_handle_width","","The width of the bar that separates each directory in the stack and allows for re-sizing.",196,null],[4,"Types","","A type for specifying the types of files to be shown by a `FileNavigator`.",null,null],[13,"All","","Indicates that files of all types should be shown.",197,null],[13,"WithExtension","","A list of types of files that are accepted by the `FileNavigator`.",197,null],[4,"Event","","The kinds of events that the `FileNavigator` may produce.",null,null],[13,"ChangeDirectory","","The directory at the top of the stack has changed.",198,null],[13,"ChangeSelection","","The selection of files in the top of the stack has changed.",198,null],[13,"Click","","A `Click` event occurred over a selection of entries.",198,null],[13,"DoubleClick","","A file was double clicked.",198,null],[13,"Press","","A `Press` event occurred over a selection of entries.",198,null],[13,"Release","","A `Release` event occurred over a selection of entries.",198,null],[0,"directory_view","","Lists the contents of a single directory.",null,null],[3,"DirectoryView","conrod::widget::file_navigator::directory_view","For viewing, selecting, double-clicking, etc the contents of a directory.",null,null],[12,"style","","Unique styling for the widget.",199,null],[12,"directory","","The path of the directory to display.",199,null],[12,"types","","Only display files of the given type.",199,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Entry","","Data stored for each `File` in the `State`.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",200,null],[12,"unselected_color","","The color of the unselected entries.",200,null],[12,"text_color","","The color of the directory and file names.",200,null],[12,"font_size","","The font size for the directory and file names.",200,null],[4,"Event","","The kinds of `Event`s produced by the `DirectoryView`.",null,null],[13,"Selection","","Some change in the `Selection` occurred. This represents the new full selection.",201,null],[13,"Click","","One or more entries have been double clicked.",201,null],[13,"DoubleClick","","One or more entries have been double clicked.",201,null],[13,"Press","","A `Press` event occurred while the given entries were selected.",201,null],[13,"Release","","A `Release` event occurred while the given entries were selected.",201,null],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",200,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"unselected_color","","Retrieves the value from the `Style`.",200,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"text_color","","Retrieves the value from the `Style`.",200,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"font_size","","Retrieves the value from the `Style`.",200,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"new","","Begin building a `DirectoryNavigator` widget that displays only files of the given types.",199,{"inputs":[{"name":"path"},{"name":"types"}],"output":{"name":"self"}}],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",199,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",199,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories",199,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",199,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"common","","",199,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",199,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",199,null],[11,"style","","",199,null],[11,"update","","",199,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",199,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","conrod::widget::file_navigator","",197,{"inputs":[{"name":"self"}],"output":{"name":"types"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"directory"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"directory"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",196,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",196,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"unselected_color","","Retrieves the value from the `Style`.",196,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"text_color","","Retrieves the value from the `Style`.",196,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"font_size","","Retrieves the value from the `Style`.",196,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"column_width","","Retrieves the value from the `Style`.",196,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"resize_handle_width","","Retrieves the value from the `Style`.",196,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Begin building a `FileNavigator` widget that displays only files of the given types.",195,{"inputs":[{"name":"path"},{"name":"types"}],"output":{"name":"self"}}],[11,"all","","Begin building a `FileNavigator` that will display all file types.",195,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"with_extension","","Begin building a `FileNavigator` that will only display files whose extensions match one of those within the given extension list.",195,null],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",195,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",195,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories.",195,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",195,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"common","","",195,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",195,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",195,null],[11,"style","","",195,null],[11,"update","","Update the state of the Button.",195,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",195,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"list","conrod::widget","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[3,"List","conrod::widget::list","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[12,"common","","Common widget building params for the `List`.",204,null],[12,"style","","Unique styling for the `List`.",204,null],[12,"item_instantiation","","Whether all or only visible items should be instantiated.",204,null],[3,"Style","","Unique styling for the `List`.",null,null],[12,"scrollbar_width","","The width of the scrollbar if it is visible.",205,null],[12,"scrollbar_color","","The color of the scrollbar if it is visible.",205,null],[12,"scrollbar_position","","The location of the `List`'s scrollbar.",205,null],[3,"State","","Represents the state of the List widget.",null,null],[3,"Item","","The data necessary for instantiating a single item within a `List`.",null,null],[12,"i","","The index of the item within the list.",206,null],[12,"widget_id","","The id generated for the widget.",206,null],[12,"last_id","","The id used for the previous item's widget.",206,null],[12,"w","","The width of the item.",206,null],[12,"h","","The height of the item.",206,null],[3,"Scrollbar","","A wrapper around a `List`'s `Scrollbar` and its `widget::Id`.",null,null],[3,"Items","","An `Iterator` yielding each `Item` in the list.",null,null],[4,"ItemInstantiation","","The way in which a `List` should instantiate its `Item`s.",null,null],[13,"All","","Instantiate an `Item` for every element, regardless of visibility.",207,null],[13,"OnlyVisible","","Only instantiate visible `Item`s.",207,null],[4,"ScrollbarPosition","","If the `List` is scrollable, this describes how th `Scrollbar` should be positioned.",null,null],[13,"NextTo","","To the right of the items (reduces the item width to fit).",208,null],[13,"OnTop","","On top of the right edge of the items with auto_hide activated.",208,null],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"scrollbar_width","","Retrieves the value from the `Style`.",205,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"scrollbar_color","","Retrieves the value from the `Style`.",205,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"scrollbar_position","","Retrieves the value from the `Style`.",205,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"iteminstantiation"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"iteminstantiation"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"scrollbarposition"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"scrollbarposition"}],"output":{"name":"bool"}}],[11,"new","","Create a List context to be built upon.",204,{"inputs":[{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",204,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",204,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","The width of the `Scrollbar`.",204,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",204,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instatiated for every element in the list, regardless of whether or not the `Item` would be visible.",204,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",204,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"common","","",204,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",204,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",204,null],[11,"style","","",204,null],[11,"update","","",204,null],[11,"next","","Yield the next `Item` in the list.",209,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",206,null],[11,"set","","Set the `Scrollbar` within the given `Ui`.",210,{"inputs":[{"name":"self"},{"name":"uicell"}],"output":null}],[0,"list_select","conrod::widget","A wrapper around the `List` widget providing the ability to select one or more items.",null,null],[3,"ListSelect","conrod::widget::list_select","A wrapper around the `List` widget that handles single and multiple selection logic.",null,null],[3,"State","","Represents the state of the ListSelect.",null,null],[3,"Events","","An iterator-like type for yielding `ListSelect` `Event`s.",null,null],[3,"Single","","A single item selection `Mode` for the `ListSelect`.",null,null],[3,"Multiple","","A selection `Mode` for the `ListSelect` that allows selecting more than one item at a time.",null,null],[4,"Event","","The kind of events that the `ListSelect` may `react` to. Provides tuple(s) of index in list and string representation of selection",null,null],[13,"Item","","The next `Item` is ready for instantiation.",211,null],[13,"Selection","","A change in selection has occurred.",211,null],[13,"Press","","A button press occurred while the widget was capturing the mouse.",211,null],[13,"Release","","A button release occurred while the widget was capturing the mouse.",211,null],[13,"Click","","A click occurred while the widget was capturing the mouse.",211,null],[13,"DoubleClick","","A double click occurred while the widget was capturing the mouse.",211,null],[4,"Selection","","Represents some change in item selection for a `ListSelect` in `Multiple` mode.",null,null],[13,"Add","","Items which have been added to the selection.",212,null],[13,"Remove","","Items which have been removed from the selection.",212,null],[6,"PendingEvents","","Buffer use for storing events that have been produced but are yet to be yielded.",null,null],[8,"Mode","","Allows the `ListSelect` to be generic over `Single` and `Multiple` selection modes.",null,null],[16,"Selection","","The data associated with the `Mode`s `Event::Selection`.",213,null],[10,"click_selection","","Update the `PendingEvents` in accordance with the given `Click` event.",213,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[10,"key_selection","","Update the `PendingEvents` in accordance with the given `KeyPress` event.",213,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"listselect"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"single"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"multiple"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"selection"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"update_bool_slice","","Update the given slice of `bool`s with this `Selection`.",212,null],[11,"update_index_set","","Update the given set of selected indices with this `Selection`.",212,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":null}],[11,"single","","Construct a new ListSelect, allowing one selected item at a time.",214,{"inputs":[{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"multiple","","Construct a new ListSelect, allowing multiple selected items.",214,{"inputs":[{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"new","","Begin building a new `ListSelect` with the given mode.",214,{"inputs":[{"name":"usize"},{"name":"scalar"},{"name":"m"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",214,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",214,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","The width of the `Scrollbar`.",214,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",214,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instatiated for every element in the list, regardless of whether or not the `Item` would be visible.",214,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",214,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"common","","",214,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",214,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",214,null],[11,"style","","",214,null],[11,"update","","Update the state of the ListSelect.",214,null],[11,"next","","Yield the next `Event`.",217,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"f"}],"output":{"name":"option"}}],[11,"click_selection","","",215,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_selection","","",215,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"click_selection","","",216,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_selection","","",216,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[0,"matrix","conrod::widget","A helper widget for laying out child widgets in the form of a grid.",null,null],[3,"Matrix","conrod::widget::matrix","Draw a matrix of any rectangular widget type, where the matrix will provide a function with the widget number, it's `rows` and `cols` position, the width and height for the widget and the location at which the widget should be drawn.",null,null],[3,"State","","The state of the Matrix, to be cached within the `Ui`'s widget `Graph`.",null,null],[3,"Style","","Unique styling for the `Matrix`.",null,null],[12,"cell_pad_w","","The width of the padding for each matrix element's \"cell\".",218,null],[12,"cell_pad_h","","The height of the padding for each matrix element's \"cell\".",218,null],[3,"Elements","","The event type yielded by the `Matrix`.",null,null],[3,"Element","","Data necessary for instantiating a widget for a single `Matrix` element.",null,null],[12,"widget_id","","The id generated for the widget.",219,null],[12,"row","","The row number for the `Element`.",219,null],[12,"col","","The column number for the `Element`.",219,null],[12,"w","","The width of the element.",219,null],[12,"h","","The height of the element.",219,null],[12,"rel_x","","The *x* position of the element relative to the centre of the `Matrix`.",219,null],[12,"rel_y","","The *y* position of the element relative to the centre of the `Matrix`.",219,null],[6,"WidgetNum","","The number of the widget.",null,null],[6,"ColNum","","A column index.",null,null],[6,"RowNum","","A row index.",null,null],[6,"Width","","The width of an element.",null,null],[6,"Height","","The height of an element.",null,null],[6,"PosX","","The position of an element along the *x* axis.",null,null],[6,"PosY","","The position of an element along the *y* axis.",null,null],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",218,{"inputs":[],"output":{"name":"self"}}],[11,"cell_pad_w","","Retrieves the value from the `Style`.",218,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"cell_pad_h","","Retrieves the value from the `Style`.",218,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a widget matrix context.",220,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"cell_padding","","A builder method for adding padding to the cell.",220,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",220,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",220,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",220,null],[11,"style","","",220,null],[11,"update","","Update the state of the Matrix.",220,null],[11,"next","","Yield the next `Element`.",221,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",219,null],[0,"number_dialer","conrod::widget","A widget for precision control over any base-10 digit within a given value.",null,null],[3,"NumberDialer","conrod::widget::number_dialer","A widget for precision control over any digit within a value.",null,null],[3,"Style","","Unique graphical styling for the NumberDialer.",null,null],[12,"color","","Color of the NumberDialer's rectangle.",222,null],[12,"border","","The color of the rectangle border.",222,null],[12,"border_color","","The color of the rectangle border.",222,null],[12,"label_color","","The color of the NumberDialer's label.",222,null],[12,"label_font_size","","The font size for the NumberDialer's label.",222,null],[12,"font_id","","The `Id` associated with the font to use for the `NumberDialer` values.",222,null],[3,"State","","The state of the NumberDialer.",null,null],[3,"GlyphSlot","","Each digit in the adjustable value has its own **Rectangle** and **Text** widgets.",null,null],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",222,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"font_id","","Retrieves the value from the `Style`.",222,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"glyphslot"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"new","","Construct a new NumberDialer widget.",224,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"u8"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the label.",224,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",224,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",224,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",224,null],[11,"style","","",224,null],[11,"update","","Update the state of the NumberDialer.",224,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",224,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"plot_path","conrod::widget","A widget for plotting a series of lines using the given function *x -> y*.",null,null],[3,"PlotPath","conrod::widget::plot_path","A widget that plots a series of lines using the given function *x -> y*.",null,null],[3,"Style","","Unique styling parameters for the `PlotPath` widget.",null,null],[12,"thickness","","The thickness of the plotted line.",225,null],[12,"color","","The color of the line.",225,null],[3,"State","","Unique state stored between updates for the `PlotPath` widget.",null,null],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",225,{"inputs":[],"output":{"name":"self"}}],[11,"thickness","","Retrieves the value from the `Style`.",225,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"color","","Retrieves the value from the `Style`.",225,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"new","","Begin building a new `PlotPath` widget instance.",226,{"inputs":[{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"f"}],"output":{"name":"self"}}],[11,"common","","",226,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",226,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",226,null],[11,"style","","",226,null],[11,"update","","Update the state of the PlotPath.",226,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",226,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"range_slider","conrod::widget","A widget for specifying start and end values for some linear range.",null,null],[3,"RangeSlider","conrod::widget::range_slider","Linear range selection.",null,null],[3,"Style","","Graphical styling unique to the RangeSlider widget.",null,null],[12,"color","","The color of the slidable rectangle.",227,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",227,null],[12,"border_color","","The color of the Slider's border.",227,null],[12,"label_color","","The color of the Slider's label.",227,null],[12,"label_font_size","","The font-size for the Slider's label.",227,null],[12,"label_font_id","","The ID of the font used to display the label.",227,null],[3,"State","","Represents the state of the Slider widget.",null,null],[3,"Event","","The `Event` type produced by the `RangeSlider`.",null,null],[4,"Drag","","The part of the `RangeSlider` that is in the process of being dragged.",null,null],[13,"Edge","","One of the edges is being dragged.",228,null],[13,"Handle","","The whole range is being dragged.",228,null],[4,"Edge","","Either the `Start` or `End` `Edge` of the `RangeSlider`'s bar.",null,null],[13,"Start","","The start edge of the scrollbar handle.",229,null],[13,"End","","The end edge of the scrollbar handle.",229,null],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",227,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",227,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",227,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",227,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",227,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",227,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",227,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"next","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new RangeSlider widget.",231,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",231,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"common","","",231,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",231,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",231,null],[11,"style","","",231,null],[11,"kid_area","","",231,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",231,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",231,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",231,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",231,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",231,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",231,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",231,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"rounded_rectangle","conrod::widget","Similar to the `Rectangle` widget however is drawn with rounded corners.",null,null],[3,"RoundedRectangle","conrod::widget::rounded_rectangle","Draws a rectangle with corners rounded via the given radius.",null,null],[12,"common","","Data necessary and common for all widget builder types.",232,null],[12,"style","","Unique styling for the **RoundedRectangle**.",232,null],[12,"radius","","The radius of the circle used to round each corner of the rectangle.",232,null],[12,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",232,null],[3,"State","","Unique state for the `RoundedRectangle`.",null,null],[17,"DEFAULT_CORNER_RESOLUTION","","The default resolution of the circle used to draw the rounded corners.",null,null],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"roundedrectangle"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"styled","","Build a rounded rectangle with the given dimensions and style.",232,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rounded rectangle.",232,{"inputs":[{"name":"dimensions"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rounded rectangle widget filled with the given color.",232,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rounded rectangle widget.",232,{"inputs":[{"name":"dimensions"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rounded rectangle rather than a filled one.",232,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"style"}],"output":{"name":"self"}}],[11,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",232,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"common","","",232,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",232,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",232,null],[11,"style","","",232,null],[11,"update","","Update the state of the Rectangle.",232,null],[11,"color","","",232,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"scrollbar","conrod::widget","A widget that allows for manually scrolling via dragging the mouse.",null,null],[3,"Scrollbar","conrod::widget::scrollbar","A widget that allows for scrolling via dragging the mouse.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",233,null],[12,"thickness","","The \"thickness\" of the scrollbar's track and handle `Rect`s.",233,null],[12,"auto_hide","","When true, the `Scrollbar` will only be visible when:",233,null],[3,"State","","The state of the `Scrollbar`.",null,null],[8,"Axis","","The axis that is scrolled by the `Scrollbar`.",null,null],[10,"track_rect","","The `Rect` for a scroll \"track\" with the given `thickness` for a container with the given `Rect`.",234,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[10,"handle_rect","","The `Rect` for a scroll handle given both `Range`s.",234,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[10,"scroll_state","","Retrieve the related `scroll::State` for the axis from a given widget container.",234,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[10,"default_x_dimension","","Determine a default *x* dimension for the scrollbar in the case that no specific width is given.",234,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"default_y_dimension","","Determine a default *y* dimension for the scrollbar in the case that no specific height is given.",234,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"to_2d","","Convert a given `Scalar` along the axis into two dimensions.",234,null],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",233,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",233,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"thickness","","Retrieves the value from the `Style`.",233,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"auto_hide","","Retrieves the value from the `Style`.",233,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"bool"}}],[11,"auto_hide","","By default, this is set to `false`.",235,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"thickness","","Build the widget with the given `thickness`.",235,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_axis","","Begin building a new scrollbar widget that scrolls along the *X* axis along the range of the scrollable widget at the given Id.",235,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"y_axis","","Begin building a new scrollbar widget that scrolls along the *Y* axis along the range of the scrollable widget at the given Id.",235,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"common","","",235,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",235,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",235,null],[11,"style","","",235,null],[11,"default_x_dimension","","",235,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",235,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",235,null],[11,"track_rect","conrod::widget::scroll","",147,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"handle_rect","","",147,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"scroll_state","","",147,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"default_x_dimension","","",147,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",147,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"to_2d","","",147,null],[11,"track_rect","","",148,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"handle_rect","","",148,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"scroll_state","","",148,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"default_x_dimension","","",148,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",148,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"to_2d","","",148,null],[11,"color","conrod::widget::scrollbar","Build the type's self.$($assignee).+ with the given $Type.",235,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"slider","conrod::widget","A widget for selecting a single value along some linear range.",null,null],[3,"Slider","conrod::widget::slider","Linear value selection.",null,null],[12,"skew","","The amount in which the slider's display should be skewed.",236,null],[12,"enabled","","Whether or not user input is enabled for the Slider.",236,null],[3,"Style","","Graphical styling unique to the Slider widget.",null,null],[12,"color","","The color of the slidable rectangle.",237,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",237,null],[12,"border_color","","The color of the Slider's border.",237,null],[12,"label_color","","The color of the Slider's label.",237,null],[12,"label_font_size","","The font-size for the Slider's label.",237,null],[12,"label_font_id","","The ID of the font used to display the label.",237,null],[3,"State","","Represents the state of the Slider widget.",null,null],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",237,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",237,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",237,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",237,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",237,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",237,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",237,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new Slider widget.",236,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",236,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"skew","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",236,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",236,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",236,null],[11,"style","","",236,null],[11,"kid_area","","",236,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",236,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",236,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"tabs","conrod::widget","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"Tabs","conrod::widget::tabs","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"State","","The state to be cached within the Canvas.",null,null],[3,"Tab","","A single **Tab** in the list owned by the **Tabs** **State**.",null,null],[3,"Style","","Unique styling for the `Tabs` widget.",null,null],[12,"layout","","Layout for the tab selection bar.",238,null],[12,"bar_thickness","","The thickness of the tab selection bar (width for vertical, height for horizontal).",238,null],[12,"label_color","","Color of the number dialer's label.",238,null],[12,"label_font_size","","Font size of the number dialer's label.",238,null],[12,"font_id","","The `font::Id` of the number dialer's font.",238,null],[12,"canvas","","The styling for each `Canvas`.",238,null],[3,"TabRects","","An iterator yielding the **Rect** for each Tab in the given list.",null,null],[4,"Layout","","The direction in which the tabs will be laid out.",null,null],[13,"Horizontal","","Tabs will be laid out horizontally (left to right).",239,null],[13,"Vertical","","Tabs will be laid out vertically (top to bottom).",239,null],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"tab"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"tab"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"self"},{"name":"tab"}],"output":{"name":"bool"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",238,{"inputs":[],"output":{"name":"self"}}],[11,"layout","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"layout"}}],[11,"bar_thickness","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"label_color","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"font_id","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"canvas","","Retrieves the value from the `Style`.",238,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"style"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"new","","Construct some new Canvas Tabs.",241,null],[11,"starting_canvas","","Set the initially selected tab with a Canvas via its widget::Id.",241,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges.",241,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"tabs"}}],[11,"layout_horizontally","","Layout the tabs horizontally.",241,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"layout_vertically","","Layout the tabs vertically.",241,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"canvas_style","","Build the `Tabs` widget with the given styling for its `Canvas`ses.",241,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"pad_left","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",241,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",241,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",241,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",241,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bar_thickness","","The width of a vertical `Tabs` selection bar, or the height of a horizontal one.",241,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"starting_tab_idx","","Build the type's self.$($assignee).+ with the given $Type.",241,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",241,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",241,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"common","","",241,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",241,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",241,null],[11,"style","","",241,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` Positionable methods.",241,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Tabs.",241,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"color","","",241,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","",241,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"border_color","","",241,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"new","","Construct a new **TabRects** iterator.",242,null],[11,"next_with_id_and_label","","Yield the next **Tab** **Rect**, along with the associated ID and label.",242,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"text_box","conrod::widget","A widget for displaying and mutating a one-line field of text.",null,null],[3,"TextBox","conrod::widget::text_box","A widget for displaying and mutating a small, one-line field of text, given by the user in the form of a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextBox.",null,null],[12,"text_padding","","The length of the gap between the bounding rectangle's border and the edge of the text.",243,null],[12,"color","","Color of the rectangle behind the text.",243,null],[12,"border","","The width of the bounding `BorderedRectangle` border.",243,null],[12,"border_color","","The color of the `BorderedRecangle`'s border.",243,null],[12,"text_color","","The color of the `TextEdit` widget.",243,null],[12,"font_size","","The font size for the text.",243,null],[12,"justify","","The typographic alignment of the text.",243,null],[12,"font_id","","The font used for the `Text`.",243,null],[3,"State","","The `State` of the `TextBox` widget that will be cached within the `Ui`.",null,null],[4,"Event","","Events produced by the `TextBox`.",null,null],[13,"Update","","The `String` was updated.",244,null],[13,"Enter","","The `Return` or `Enter` key was pressed.",244,null],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",243,{"inputs":[],"output":{"name":"self"}}],[11,"text_padding","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"color","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"text_color","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"justify","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"font_id","","Retrieves the value from the `Style`.",243,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a TextBox widget.",245,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"left_justify","","Align the text to the left of its bounding **Rect**'s *x* axis range.",245,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",245,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify","","Align the text to the right of its bounding **Rect**'s *x* axis range.",245,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",245,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"text_color","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"self"}}],[11,"pad_text","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"common","","",245,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",245,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",245,null],[11,"style","","",245,null],[11,"update","","Update the state of the TextEdit.",245,null],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",245,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"text_edit","conrod::widget","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"TextEdit","conrod::widget::text_edit","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextEdit.",null,null],[12,"color","","The color of the text (this includes cursor and selection color).",246,null],[12,"font_size","","The font size for the text.",246,null],[12,"justify","","The horizontal alignment of the text.",246,null],[12,"y_align","","The vertical alignment of the text.",246,null],[12,"line_spacing","","The vertical space between each line of text.",246,null],[12,"line_wrap","","The way in which text is wrapped at the end of a line.",246,null],[12,"restrict_to_height","","Do not allow to enter text that would exceed the bounds of the `TextEdit`'s `Rect`.",246,null],[12,"font_id","","The font used for the `Text`.",246,null],[3,"State","","The State of the TextEdit widget that will be cached within the Ui.",null,null],[4,"Drag","","Track whether some sort of dragging is currently occurring.",null,null],[13,"Selecting","","The drag is currently selecting a range of text.",247,null],[13,"MoveSelection","","The drag is moving a selection of text.",247,null],[4,"Cursor","","The position of the `Cursor` over the text.",null,null],[13,"Idx","","The cursor is at the given character index.",248,null],[13,"Selection","","The cursor is a selection between these two indices.",248,null],[12,"start","conrod::widget::text_edit::Cursor","The `start` is always the \"anchor\" point.",248,null],[12,"end","","The `end` may be either greater or less than the `start`.",248,null],[11,"clone","conrod::widget::text_edit","",246,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",246,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",246,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",246,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"justify","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"y_align","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"align"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"line_wrap","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"wrap"}}],[11,"restrict_to_height","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"bool"}}],[11,"font_id","","Retrieves the value from the `Style`.",246,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",248,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"new","","Construct a TextEdit widget.",249,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"wrap_by_whitespace","","The `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_character","","By default, the `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"left_justify","","Align the text to the left of its bounding **Rect**'s *x* axis range.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify","","Align the text to the right of its bounding **Rect**'s *x* axis range.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_bottom","","Align the text to the left of its bounding **Rect**'s *y* axis range.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_y_middle","","Align the text to the middle of its bounding **Rect**'s *y* axis range.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_top","","Align the text to the right of its bounding **Rect**'s *y* axis range.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**.",249,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",249,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"self"}}],[11,"y_align_text","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"line_wrap","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"restrict_to_height","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",249,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",249,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",249,null],[11,"style","","",249,null],[11,"default_y_dimension","","",249,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the TextEdit.",249,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",249,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"title_bar","conrod::widget","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[3,"TitleBar","conrod::widget::title_bar","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",250,null],[12,"style","","Unique styling for the **BorderedRectangle**.",250,null],[12,"label","","A label displayed in the middle of the TitleBar.",250,null],[3,"State","","Unique state for the **TitleBar** widget.",null,null],[3,"Style","","Unique styling for the **TitleBar** widget.",null,null],[12,"color","","The color of the TitleBar's rectangle surface.",251,null],[12,"border","","The width of the border surrounding the TitleBar's rectangle.",251,null],[12,"border_color","","The color of the TitleBar's border.",251,null],[12,"text_color","","The color of the title bar's text.",251,null],[12,"font_size","","The font size for the title bar's text.",251,null],[12,"maybe_wrap","","The way in which the title bar's text should wrap.",251,null],[12,"line_spacing","","The distance between lines for multi-line title bar text.",251,null],[12,"justify","","The horizontal alignment of the title bar text.",251,null],[12,"label_x","","The position of the title bar's `Label` widget over the *x* axis.",251,null],[12,"label_y","","The position of the title bar's `Label` widget over the *y* axis.",251,null],[12,"font_id","","The font used for the `Text`.",251,null],[5,"calc_height","","Calculate the default height for the **TitleBar**'s rect.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"scalar"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",251,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",251,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",251,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"text_color","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"maybe_wrap","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"justify","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"justify"}}],[11,"label_x","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"relative"}}],[11,"label_y","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"relative"}}],[11,"font_id","","Retrieves the value from the `Style`.",251,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new TitleBar widget and attach it to the widget at the given index.",250,{"inputs":[{"name":"str"},{"name":"id"}],"output":{"name":"self"}}],[11,"left_justify_label","","Align the text to the left of its bounding **Rect**'s *x* axis range.",250,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify_label","","Align the text to the middle of its bounding **Rect**'s *x* axis range.",250,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify_label","","Align the text to the right of its bounding **Rect**'s *x* axis range.",250,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the *x* axis.",250,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the *y* axis.",250,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",250,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",250,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",250,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",250,null],[11,"style","","",250,null],[11,"default_y_dimension","","",250,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",250,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",250,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"toggle","conrod::widget","A button that allows for toggling boolean state.",null,null],[3,"Toggle","conrod::widget::toggle","A pressable widget for toggling the state of a bool.",null,null],[12,"enabled","","If true, will allow user inputs. If false, will disallow user inputs.",252,null],[3,"Style","","Styling for the Toggle including coloring, bordering and labelling.",null,null],[12,"color","","Color of the Toggle's pressable area.",253,null],[12,"border","","The width of the rectangular border surrounding the Toggle.",253,null],[12,"border_color","","The color of the Toggle's border.",253,null],[12,"label_color","","The color of the Toggle's Text label.",253,null],[12,"label_font_size","","The font size for the Toggle's Text label.",253,null],[12,"label_font_id","","The ID of the font used to display the label.",253,null],[3,"State","","The state of the Toggle.",null,null],[3,"TimesClicked","","The `Event` type yielded by the `Toggle` widget.",null,null],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"toggle"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",253,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",253,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",253,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",253,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",253,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",253,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",253,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",253,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"timesclicked"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new Toggle widget.",252,{"inputs":[{"name":"bool"}],"output":{"name":"toggle"}}],[11,"label_font_id","","Specify the font used for displaying the label.",252,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",252,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",252,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",252,null],[11,"style","","",252,null],[11,"update","","Update the state of the Toggle.",252,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",252,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"xy_pad","conrod::widget","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[3,"XYPad","conrod::widget::xy_pad","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[12,"enabled","","Indicates whether the XYPad will respond to user input.",255,null],[3,"Style","","Unique graphical styling for the XYPad.",null,null],[12,"color","","The color of the XYPad's rectangle.",256,null],[12,"border","","The width of the border surrounding the rectangle.",256,null],[12,"border_color","","The color of the surrounding rectangle border.",256,null],[12,"label_color","","The color of the XYPad's label and value label text.",256,null],[12,"label_font_size","","The font size for the XYPad's label.",256,null],[12,"label_font_id","","The ID of the font used to display the label.",256,null],[12,"value_font_size","","The font size for the XYPad's *value* label.",256,null],[12,"line_thickness","","The thickness of the XYPad's crosshair lines.",256,null],[3,"State","","The state of the XYPad.",null,null],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",256,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",256,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",256,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"border","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"border_color","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"label_font_id","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"option"}}],[11,"value_font_size","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"line_thickness","","Retrieves the value from the `Style`.",256,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"new","","Build a new XYPad widget.",255,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"y"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",255,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",255,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",255,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"init_state","","",255,null],[11,"style","","",255,null],[11,"update","","Update the XYPad's cached state.",255,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",255,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[8,"Style","conrod::widget","The necessary bounds for a **Widget**'s associated **Style** type.",null,null],[8,"Widget","","A trait to be implemented by all **Widget** types.",null,null],[16,"State","","State to be stored within the `Ui`s widget cache.",257,null],[16,"Style","","Every widget is required to have its own associated `Style` type. This type is intended to contain high-level styling information for the widget that can be *optionally specified* by a user of the widget.",257,null],[16,"Event","","The type of event yielded by the widget, returned via the `Widget::set` function.",257,null],[10,"common","","Return a reference to a **CommonBuilder** struct owned by the Widget. This method allows us to do a blanket impl of Positionable and Sizeable for T: Widget.",257,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[10,"common_mut","","Return a mutable reference to a CommonBuilder struct owned by the Widget. This method allows us to do a blanket impl of Positionable and Sizeable for T: Widget.",257,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[10,"init_state","","Return the initial **State** of the Widget.",257,null],[10,"style","","Return the styling of the widget.",257,null],[10,"update","","Update our **Widget**'s unique **Widget::State** via the **State** wrapper type (the `state` field within the **UpdateArgs**).",257,null],[11,"default_x_position","","The default **Position** for the widget along the *x* axis.",257,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","The default **Position** for the widget along the *y* axis.",257,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_x_dimension","","The default width for the **Widget**.",257,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","The default height of the widget.",257,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"drag_area","","If the widget is draggable, implement this method and return the position and dimensions of the draggable space. The position should be relative to the center of the widget.",257,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` `Position` methods.",257,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"parent","","Set the parent widget for this Widget by passing the WidgetId of the parent.",257,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"no_parent","","Specify that this widget has no parent widgets.",257,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"place_on_kid_area","","Set whether or not the **Widget** should be placed on the kid_area.",257,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"graphics_for","","Indicates that the **Widget** is used as a non-interactive graphical element for some other widget.",257,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"floating","","Set whether or not the widget is floating (the default is `false`). A typical example of a floating widget would be a pop-up or alert window.",257,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"crop_kids","","Indicates that all widgets who are children of this widget should be cropped to the `kid_area` of this widget.",257,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids","","Makes the widget's `KidArea` scrollable.",257,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids_vertically","","Makes the widget's `KidArea` scrollable.",257,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids_horizontally","","Set whether or not the widget's `KidArea` is scrollable (the default is false).",257,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"and","","A builder method that \"lifts\" the **Widget** through the given `build` function.",257,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_mut","","A builder method that mutates the **Widget** with the given `mutate` function.",257,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_if","","A method that conditionally builds the **Widget** with the given `build` function.",257,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_then","","A method that optionally builds the the **Widget** with the given `build` function.",257,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"set","","Note: There should be no need to override this method.",257,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"kidarea"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"maybeparent"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"get_unchecked","","Convert the **MaybeParent** into an **Option<Id>**.",140,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"id"}}],[11,"get","","The same as `get_unchecked`, but checks whether or not the widget that we're inferring the parent for is the `Ui`'s window (which cannot have a parent, without creating a cycle).",140,{"inputs":[{"name":"self"},{"name":"id"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"floating"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"commonstyle"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"commonstate"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"update","","Mutate the internal widget state and set a flag notifying us that there has been a mutation.",258,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"deref","","",258,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Construct an empty, initialised CommonBuilder.",135,{"inputs":[],"output":{"name":"commonbuilder"}}],[11,"new","","A new default CommonStyle.",136,{"inputs":[],"output":{"name":"self"}}],[6,"FontSize","conrod","Font size used throughout Conrod.",null,null],[8,"Borderable","","Widgets that may display a border.",null,null],[10,"border","","Set the width of the widget's border.",259,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[10,"border_color","","Set the color of the widget's border.",259,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border_rgba","","Set the color of the widget's border with rgba values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[8,"Labelable","","Widgets that may display some label.",null,null],[10,"label","","Set the label for the widget.",260,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[10,"label_color","","Set the color of the widget's label.",260,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_rgba","","Set the color of the widget's label from rgba values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[10,"label_font_size","","Set the font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[14,"builder_method","","A macro for simplifying implementation of methods for the `builder pattern`.",null,null],[14,"builder_methods","","A macro to simplify implementation of \"builder-pattern\" methods.",null,null],[14,"widget_style","","A macro for vastly simplifying the definition and implementation of a widget's associated `Style` type.",null,null],[14,"widget_ids","","A macro used to generate a struct with a field for each unique identifier given. Each field can then be used to generate unique `widget::Id`s.",null,null],[11,"new","conrod::backend::piston::draw","Creates a new drawing context.",3,{"inputs":[],"output":{"name":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",3,{"inputs":[{"name":"viewport"}],"output":{"name":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",3,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"reset","","Moves the current transform to the default coordinate system.",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"store_view","","Stores the current transform as new view.",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"get_view_size","","Computes the current view size.",3,null],[11,"bitxor","conrod::input::keyboard","Returns the left flags, but with all the right flags toggled.",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",261,null],[11,"bitor","","Returns the union of the two sets of flags.",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"encode","conrod::input","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input::keyboard","",261,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input::state::mouse","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"hash","conrod::input::keyboard","",261,null],[11,"hash","conrod::input","",49,null],[11,"hash","conrod::input::state::mouse","",51,null],[11,"hash","conrod::input","",46,null],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"option"}}],[11,"partial_cmp","conrod::input::keyboard","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::input::state::mouse","",51,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"sub_assign","conrod::input::keyboard","Disables all flags enabled in the set.",261,null],[11,"sub","","Returns the set difference of the two sets of flags.",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",261,null],[11,"not","","Returns the complement of this set of flags.",261,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"fmt","conrod::input","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input::keyboard","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input::state::mouse","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","conrod::input::keyboard","",261,null],[11,"eq","conrod::input","",49,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"eq","conrod::input::keyboard","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"eq","conrod::input::state::mouse","",51,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","conrod::input","",52,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"default","conrod::input::keyboard","",261,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"cmp","conrod::input","",49,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::input::keyboard","",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::input::state::mouse","",51,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"from","conrod::input","",49,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"from","conrod::input::state::mouse","",51,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from","conrod::input","",46,{"inputs":[{"name":"key"}],"output":{"name":"button"}}],[11,"from","","",46,{"inputs":[{"name":"mousebutton"}],"output":{"name":"button"}}],[11,"from","","",46,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"button"}}],[11,"from","","",50,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"motion"}}],[11,"from_iter","conrod::input::keyboard","",261,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",261,null],[11,"decode","conrod::input","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input::keyboard","",261,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input::state::mouse","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","conrod::input","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"bitand","conrod::input::keyboard","Returns the intersection between the two sets of flags.",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"clone","conrod::input","",47,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"clone","conrod::input::keyboard","",261,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"clone","conrod::input","",49,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"clone","conrod::input::state::mouse","",51,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","conrod::input","",52,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"touchargs"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"hash","conrod::text::rt","",104,null],[11,"hash","","",106,null],[11,"hash","","",105,null],[11,"hash","conrod::text","",101,null],[11,"partial_cmp","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"sub","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"vector"}}],[11,"sub","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",104,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"next","conrod::text","",262,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",263,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"div","conrod::text::rt","",106,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"div","","",106,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"mul","conrod::text::rt","",106,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"mul","","",106,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"clone","conrod::text","",101,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"glyphiter"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"add","conrod::text::rt","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"add","","",104,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"add","","",106,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"eq","conrod::backend::piston::draw","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"drawstate"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"append_transform","","",3,null],[11,"prepend_transform","","",3,null],[11,"trans","","",3,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"rot_rad","","",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"context"}}],[11,"orient","","",3,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"scale","","",3,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"shear","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"drawstate"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_alpha","","Uses alpha blending.",4,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255. This can be used for clipping.",4,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255. Draws inside the shape defined by stencil buffer.",4,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255. Draws outside the shape defined by stencil buffer.",4,{"inputs":[],"output":{"name":"drawstate"}}],[11,"blend","","Sets blending.",4,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",4,null],[11,"border_rgba","conrod","Set the color of the widget's border with rgba values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",259,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"event","conrod::input::keyboard","Change modifier key state depending on input.",261,null],[11,"empty","","Returns an empty set of flags.",261,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",261,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",261,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",261,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",261,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",261,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",261,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",261,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",261,null],[11,"remove","","Removes the specified flags in-place.",261,null],[11,"toggle","","Toggles the specified flags in-place.",261,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",261,null],[11,"new","conrod::input","Create a new ControllerButton object. Intended for use by backends when emitting events.",47,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"controllerbutton"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",48,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"controlleraxisargs"}}],[11,"code","","Returns an id of the key",49,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"viewport","","Returns viewport information filling entire render area.",52,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"new","","Creates arguments for 2D touch.",54,null],[11,"new_3d","","Creates arguments for 3D touch.",54,null],[11,"position","","The position of the touch in 2D.",54,null],[11,"position_3d","","The position of the touch in 3D.",54,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",54,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",54,null],[11,"label_rgba","conrod","Set the color of the widget's label from rgba values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",260,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",260,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"font","conrod::text","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",264,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",264,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",264,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",264,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",102,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",265,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",265,null],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",265,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more information.",265,null],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",265,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",265,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",265,null],[11,"clear","","Clears the cache. Does not affect the glyph queue.",265,null],[11,"clear_queue","","Clears the glyph queue.",265,null],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",265,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",265,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"name":"result"}}],[11,"width","conrod::text::rt","",105,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"height","","",105,{"inputs":[{"name":"self"}],"output":{"name":"n"}}]],"paths":[[3,"Ui"],[3,"UiBuilder"],[4,"Bordering"],[3,"Context"],[3,"DrawState"],[8,"Graphics"],[8,"ImageSize"],[8,"Transformed"],[8,"GenericEvent"],[8,"UpdateEvent"],[3,"Hsla"],[3,"Rgba"],[4,"Color"],[4,"Gradient"],[8,"Colorable"],[3,"Text"],[3,"Move"],[3,"Press"],[3,"MousePress"],[3,"KeyPress"],[3,"Release"],[3,"MouseRelease"],[3,"KeyRelease"],[3,"Drag"],[3,"Click"],[3,"DoubleClick"],[3,"Scroll"],[4,"Input"],[4,"Event"],[4,"Ui"],[4,"Widget"],[4,"Button"],[8,"Walker"],[3,"UniqueWidgetState"],[3,"Container"],[4,"Node"],[4,"Edge"],[3,"PickWidgets"],[3,"PickScrollableWidgets"],[3,"DepthOrder"],[3,"Graph"],[6,"Children"],[6,"Parents"],[3,"Map"],[3,"Id"],[3,"NewIds"],[4,"Button"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[4,"Key"],[4,"Motion"],[4,"Button"],[3,"RenderArgs"],[4,"Touch"],[3,"TouchArgs"],[3,"State"],[3,"Mouse"],[4,"ButtonPosition"],[3,"ButtonMap"],[3,"PressedButtons"],[3,"Mouse"],[3,"Widget"],[3,"Events"],[3,"Presses"],[3,"MousePresses"],[3,"MouseButtonPresses"],[3,"KeyPresses"],[3,"Releases"],[3,"MouseButtonReleases"],[3,"MouseReleases"],[3,"KeyReleases"],[3,"Clicks"],[3,"ButtonClicks"],[3,"Drags"],[3,"ButtonDrags"],[3,"Texts"],[3,"Scrolls"],[3,"Global"],[3,"Events"],[3,"UiEvents"],[3,"Padding"],[4,"Axis"],[4,"Position"],[4,"Relative"],[4,"Direction"],[4,"Align"],[4,"Place"],[4,"Dimension"],[3,"Range"],[4,"Edge"],[3,"Rect"],[4,"Corner"],[8,"Positionable"],[8,"Sizeable"],[3,"Primitive"],[4,"PrimitiveKind"],[8,"PrimitiveWalker"],[3,"OwnedPrimitives"],[3,"Primitives"],[3,"WalkOwnedPrimitives"],[3,"Text"],[3,"GlyphId"],[3,"Scale"],[4,"Justify"],[3,"Point"],[3,"Rect"],[3,"Vector"],[4,"Error"],[3,"Id"],[3,"Ids"],[3,"Map"],[3,"NewIds"],[3,"RectsPerLine"],[3,"SelectedRectsPerLine"],[3,"Rects"],[3,"SelectedRects"],[3,"Index"],[3,"XysPerLine"],[3,"XysPerLineFromText"],[3,"Xs"],[3,"Info"],[4,"Break"],[3,"Rects"],[3,"Infos"],[3,"SelectedRects"],[3,"Lines"],[3,"Theme"],[3,"WidgetDefault"],[3,"UniqueDefault"],[3,"UiCell"],[4,"IterDiff"],[3,"UpdateArgs"],[3,"KidAreaArgs"],[3,"KidArea"],[3,"Floating"],[3,"CommonBuilder"],[3,"CommonStyle"],[3,"CommonState"],[3,"PreUpdateCache"],[3,"PostUpdateCache"],[4,"MaybeParent"],[3,"List"],[3,"Generator"],[3,"ListWalk"],[3,"State"],[8,"Axis"],[3,"Scroll"],[4,"X"],[4,"Y"],[3,"Line"],[3,"State"],[3,"Style"],[4,"Pattern"],[4,"Cap"],[3,"Image"],[3,"State"],[3,"Style"],[3,"PointPath"],[3,"State"],[4,"Style"],[3,"Circle"],[3,"Oval"],[3,"State"],[3,"Polygon"],[3,"State"],[4,"Kind"],[3,"Rectangle"],[4,"Kind"],[3,"State"],[3,"Text"],[3,"Style"],[3,"State"],[4,"Wrap"],[3,"BorderedRectangle"],[3,"Style"],[3,"Button"],[3,"Style"],[3,"FlatIds"],[3,"ImageIds"],[3,"Image"],[3,"TimesClicked"],[4,"ImageColor"],[3,"Flat"],[3,"Canvas"],[3,"Style"],[4,"Length"],[4,"Direction"],[3,"Style"],[4,"MaxHeight"],[3,"DropDownList"],[3,"EnvelopeEditor"],[3,"Style"],[4,"Event"],[8,"EnvelopePoint"],[6,"Point"],[3,"FileNavigator"],[3,"Style"],[4,"Types"],[4,"Event"],[3,"DirectoryView"],[3,"Style"],[4,"Event"],[3,"Entry"],[3,"Directory"],[3,"List"],[3,"Style"],[3,"Item"],[4,"ItemInstantiation"],[4,"ScrollbarPosition"],[3,"Items"],[3,"Scrollbar"],[4,"Event"],[4,"Selection"],[8,"Mode"],[3,"ListSelect"],[3,"Single"],[3,"Multiple"],[3,"Events"],[3,"Style"],[3,"Element"],[3,"Matrix"],[3,"Elements"],[3,"Style"],[3,"GlyphSlot"],[3,"NumberDialer"],[3,"Style"],[3,"PlotPath"],[3,"Style"],[4,"Drag"],[4,"Edge"],[3,"Event"],[3,"RangeSlider"],[3,"RoundedRectangle"],[3,"Style"],[8,"Axis"],[3,"Scrollbar"],[3,"Slider"],[3,"Style"],[3,"Style"],[4,"Layout"],[3,"Tab"],[3,"Tabs"],[3,"TabRects"],[3,"Style"],[4,"Event"],[3,"TextBox"],[3,"Style"],[4,"Drag"],[4,"Cursor"],[3,"TextEdit"],[3,"TitleBar"],[3,"Style"],[3,"Toggle"],[3,"Style"],[3,"TimesClicked"],[3,"XYPad"],[3,"Style"],[8,"Widget"],[3,"State"],[8,"Borderable"],[8,"Labelable"],[3,"ModifierKey"],[3,"GlyphIter"],[3,"LayoutIter"],[3,"Glyph"],[3,"GlyphCache"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_raw","","",3,null],[11,"fmt","crossbeam::mem","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"swap","","",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",5,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Check if this queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. **Deprecated method**, use try_pop",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Attempt to dequeue from the front.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",9,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",9,null],[13,"Data","","The stealer has successfully stolen some data.",9,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",11,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","crossbeam::sync","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",12,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"fmt","crossbeam","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",14,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["daggy"] = {"doc":"**daggy** is a directed acyclic graph data structure library.","items":[[3,"EdgeIndex","daggy","Edge identifier.",null,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"Dag","","A Directed acyclic graph (DAG) data structure.",null,null],[3,"Children","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"Parents","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"EdgeIndices","","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.",null,null],[3,"WouldCycle","","An error returned by the `Dag::add_edge` method in the case that adding an edge would have caused the graph to cycle.",null,null],[12,"0","","",0,null],[0,"walker","","**Walker** is a trait providing a variety of useful methods for traversing graph types.",null,null],[3,"Recursive","daggy::walker","Recursively walks a graph using the recursive function `recursive_fn`.",null,null],[3,"Chain","","Walks the entirety of `a` before walking the entirety of `b`.",null,null],[3,"Filter","","A walker that applies some given predicate to each element returned by its walker. The only index pairs that will be yielded are those that make the predicate evaluate to true.",null,null],[3,"Peekable","","A walker that has a `.peek(&graph)` method that returns an optional next neighbor.",null,null],[3,"SkipWhile","","A walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",null,null],[3,"TakeWhile","","A walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",null,null],[3,"Skip","","A walker that skips the first n steps of this walk, and then yields all further steps.",null,null],[3,"Take","","A walker that yields the first n steps of this walk.",null,null],[3,"Cycle","","A walker that repeats its internal walker endlessly.",null,null],[3,"Inspect","","A walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",null,null],[3,"Iter","","An iterator yielding index pairs produced by its internal walker and graph.",null,null],[3,"IterEdges","","An iterator yielding edge indices produced by its internal walker and graph.",null,null],[3,"IterNodes","","An iterator yielding node indices produced by its internal walker and graph.",null,null],[3,"IterWeights","","An iterator yielding weights associated with the index pairs produced by its internal walker and graph.",null,null],[3,"IterEdgeWeights","","An iterator yielding edge weights associated with the indices produced by its internal walker and graph.",null,null],[3,"IterNodeWeights","","An iterator yielding node weights associated with the indices produced by its internal walker and graph.",null,null],[6,"IndexPair","","Short-hand for an edge node index pair.",null,null],[8,"Walker","","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",1,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given **Graph**.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given **Graph**.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_node","","The next node in our walk for the given **Graph**.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",1,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",1,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",1,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iterweights"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recursive"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new **Recursive** **Walker** starting from the node at the given index.",2,{"inputs":[{"name":"nodeindex"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"edges","","Convert to an iterator that only yields the edge indices.",12,{"inputs":[{"name":"self"}],"output":{"name":"iteredges"}}],[11,"nodes","","Convert to an iterator that only yields the node indices.",12,{"inputs":[{"name":"self"}],"output":{"name":"iternodes"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iteredges"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"iternodes"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"iterweights"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"edges","","Convert to an iterator yielding only the edge weights.",15,{"inputs":[{"name":"self"}],"output":{"name":"iteredgeweights"}}],[11,"nodes","","Convert to an iterator yielding only the node weights.",15,{"inputs":[{"name":"self"}],"output":{"name":"iternodeweights"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"iteredgeweights"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"iternodeweights"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"PetGraph","daggy","The Petgraph to be used internally within the Dag for storing/managing nodes and edges.",null,null],[6,"RawNodes","","Read only access into a **Dag**'s internal node array.",null,null],[6,"RawEdges","","Read only access into a **Dag**'s internal edge array.",null,null],[6,"RecursiveWalk","","An alias to simplify the **Recursive** **Walker** type returned by **Dag**.",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"dag"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wouldcycle"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty `Dag`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",18,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all nodes and edges from the **Dag**.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","The total number of nodes in the **Dag**.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of edgees in the **Dag**.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"graph","","Borrow the `Dag`'s underlying `PetGraph<N, Ix>`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"inputs":[{"name":"self"}],"output":{"name":"petgraph"}}],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"inputs":[{"name":"self"}],"output":{"name":"petgraph"}}],[11,"add_node","","Add a new node to the `Dag` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"result"}}],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"update_edge","","Update the edge from nodes `a` -> `b` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"result"}}],[11,"find_edge","","Find and return the index to the edge that describes `a` -> `b` if there is one.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"clear_edges","","Remove all edges.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"node_weight","","Borrow the weight from the node at the given index.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"raw_nodes","","Read from the internal node array.",18,{"inputs":[{"name":"self"}],"output":{"name":"rawnodes"}}],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",18,{"inputs":[{"name":"self"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_weight","","Borrow the weight from the edge at the given index.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"raw_edges","","Read from the internal edge array.",18,{"inputs":[{"name":"self"}],"output":{"name":"rawedges"}}],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",18,{"inputs":[{"name":"self"}],"output":{"name":"edgeweightsmut"}}],[11,"index_twice_mut","","Index the `Dag` by two indices.",18,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn't exist.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"parents"}}],[11,"children","","A \"walker\" object that may be used to step through the children of the given parent node.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"children"}}],[11,"recursive_walk","","A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"next","","",19,{"inputs":[{"name":"self"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"self"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",22,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"hash","","",23,null],[11,"hash","","",22,null],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"from","","",23,{"inputs":[{"name":"ix"}],"output":{"name":"nodeindex"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",23,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",22,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",23,{"inputs":[],"output":{"name":"nodeindex"}}]],"paths":[[3,"WouldCycle"],[8,"Walker"],[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"],[3,"EdgeIndex"],[3,"NodeIndex"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"]]};
searchIndex["deflate"] = {"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",null,null],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,null],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,null],[12,"matching_type","","Whether to use lazy or greedy matching.",0,null],[12,"special","","Force fixed/stored blocks (Not implemented yet).",0,null],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",null,null],[13,"Normal","","Compress normally.",1,null],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,null],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,null],[4,"Compression","","An enum describing the level of compression to be used by the encoder",null,null],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,null],[13,"Default","","Default level (`CompressionOptions::default()`).",2,null],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,null],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",null,null],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,null],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,null],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",null,null],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",null,null],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",null,null],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"specialoptions"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compressionoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"fast","","Returns  a fast set of compression settings",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"default","","Returns the options describing the default compression level.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"from","","",0,{"inputs":[{"name":"compression"}],"output":{"name":"compressionoptions"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matchingtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"write","","Encoders implementing a `Write` interface.",null,null],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",null,null],[3,"ZlibEncoder","","A Zlib encoder/compressor.",null,null],[11,"new","","Creates a new encoder using the provided compression options.",4,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"deflateencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"zlibencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",5,null],[11,"flush","","Flush the encoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["deque"] = {"doc":"A (mostly) lock-free concurrent work-stealing deque","items":[[3,"Worker","deque","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",0,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",0,null],[13,"Data","","The stealer has successfully stolen some data.",0,null],[5,"new","","Allocates a new work-stealing deque.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",1,{"inputs":[{"name":"self"}],"output":{"name":"stolen"}}]],"paths":[[4,"Stolen"],[3,"Stealer"],[3,"Worker"]]};
searchIndex["egli"] = {"doc":"<a href=\"https://github.com/Nercury/egli-rs\">     <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\" alt=\"Fork me on GitHub\"> </a> <style>.sidebar { margin-top: 53px }</style>","items":[[3,"Display","egli","`[EGL 1.0]` RAII wrapper for EGLDisplay.",null,null],[3,"Context","","`[EGL 1.0]` RAII wrapper for EGLContext.",null,null],[3,"Surface","","`[EGL 1.0]` RAII wrapper for EGLSurface.",null,null],[3,"ConfigFilterRef","","`[EGL 1.0]` Configuration filter builder.",null,null],[3,"FrameBufferConfigRef","","`[EGL 1.0]` Reference to frame buffer configuration.",null,null],[3,"Version","","`[EGL 1.0]` EGL version.",null,null],[12,"major","","",0,null],[12,"minor","","",0,null],[4,"ContextClientVersion","","",null,null],[13,"OpenGlEs1","","",1,null],[13,"OpenGlEs2","","",1,null],[4,"ColorBufferType","","",null,null],[13,"Rgb","","",2,null],[13,"Luminance","","",2,null],[4,"ConfigCaveat","","",null,null],[13,"None","","",3,null],[13,"Slow","","",3,null],[13,"NonConformant","","",3,null],[4,"TransparentType","","",null,null],[13,"None","","",4,null],[13,"TransparentRgb","","",4,null],[5,"query_extensions","","`[EGL 1.0]` Get all supported client extensions.",null,{"inputs":[],"output":{"name":"result"}}],[0,"egl","","C-style lower level EGL wrapper with unsafety removed.",null,null],[5,"bind_api","egli::egl","`[EGL 1.2]` Set the current rendering API.",null,{"inputs":[{"name":"eglenum"}],"output":{"name":"eglcallresult"}}],[5,"bind_tex_image","","`[EGL 1.1]` Defines a two-dimensional texture image.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"num_filtered_configs","","`[EGL 1.0]` Return the total number of display configs that match specified attributes.",null,null],[5,"get_filtered_configs","","`[EGL 1.0]` Return a list of EGL frame buffer configurations that match specified attributes.",null,null],[5,"copy_buffers","","`[EGL 1.0]` Copy EGL surface color buffer to a native pixmap.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"},{"name":"eglnativepixmaptype"}],"output":{"name":"eglcallresult"}}],[5,"create_context","","`[EGL 1.0]` Create a new EGL rendering context.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglconfig"}],"output":{"name":"eglcallresult"}}],[5,"create_context_with_attribs","","`[EGL 1.0]` Create a new EGL rendering context.",null,null],[5,"create_pbuffer_from_client_buffer","","`[EGL 1.2]` Create a new EGL pixel buffer surface bound to an OpenVG image.",null,null],[5,"create_pbuffer_surface","","`[EGL 1.0]` Create a new EGL pixel buffer surface.",null,null],[5,"create_pixmap_surface","","`[EGL 1.0]` Create a new EGL pixmap surface.",null,null],[5,"create_window_surface","","`[EGL 1.0]` Create a new EGL window surface.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglconfig"},{"name":"eglnativewindowtype"}],"output":{"name":"eglcallresult"}}],[5,"create_window_surface_with_attribs","","`[EGL 1.0]` Create a new EGL window surface.",null,null],[5,"destroy_context","","`[EGL 1.0]` Destroy an EGL rendering context.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglcontext"}],"output":{"name":"eglcallresult"}}],[5,"destroy_surface","","`[EGL 1.0]` Destroy an EGL surface.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"}],"output":{"name":"eglcallresult"}}],[5,"get_config_attrib","","`[EGL 1.0]` Return information about an EGL frame buffer configuration.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglconfig"},{"name":"eglint"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"num_configs","","`[EGL 1.0]` Return the total number of all available display configs.",null,{"inputs":[{"name":"egldisplay"}],"output":{"name":"eglcallresult"}}],[5,"get_configs","","`[EGL 1.0]` Return a list of all EGL frame buffer configurations for a display.",null,null],[5,"get_current_context","","`[EGL 1.4]` Return the current EGL rendering context.",null,{"inputs":[],"output":{"name":"eglcallresult"}}],[5,"get_current_display","","`[EGL 1.0]` Return the display for the current EGL rendering context.",null,{"inputs":[],"output":{"name":"eglcallresult"}}],[5,"get_current_surface","","`[EGL 1.0]` Return the read or draw surface for the current EGL rendering context.",null,{"inputs":[{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"get_display","","`[EGL 1.0]` Return an EGL display connection.",null,{"inputs":[{"name":"eglnativedisplaytype"}],"output":{"name":"eglcallresult"}}],[5,"get_error","","`[EGL 1.0]` Return error information.",null,{"inputs":[],"output":{"name":"eglint"}}],[5,"get_proc_address","","`[EGL 1.0]` Return a GL or an EGL extension function.",null,null],[5,"initialize","","`[EGL 1.0]` Initialize an EGL display connection.",null,{"inputs":[{"name":"egldisplay"}],"output":{"name":"eglcallresult"}}],[5,"initialize_and_get_version","","`[EGL 1.0]` Initialize an EGL display connection and get EGL version.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglint"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"make_current","","`[EGL 1.0]` Attach an EGL rendering context to EGL surfaces.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"},{"name":"eglsurface"},{"name":"eglcontext"}],"output":{"name":"eglcallresult"}}],[5,"query_api","","`[EGL 1.2]` Query the current rendering API.",null,{"inputs":[],"output":{"name":"eglenum"}}],[5,"query_context","","`[EGL 1.0]` Return EGL rendering context information.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglcontext"},{"name":"eglint"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"query_string","","`[EGL 1.0]` Return a string describing an EGL display connection.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"query_surface","","`[EGL 1.0]` Return EGL surface information.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"},{"name":"eglint"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"release_tex_image","","`[EGL 1.1]` Releases a color buffer that is being used as a texture.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"release_thread","","`[EGL 1.2]` Release EGL per-thread state.",null,{"inputs":[],"output":{"name":"eglcallresult"}}],[5,"surface_attrib","","`[EGL 1.1]` Set an EGL surface attribute.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"},{"name":"eglint"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"swap_buffers","","`[EGL 1.0]` Post EGL surface color buffer to a native window.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"}],"output":{"name":"eglcallresult"}}],[5,"swap_interval","","`[EGL 1.1]` Specifies the minimum number of video frame periods per buffer swap for the window associated with the current context.",null,{"inputs":[{"name":"egldisplay"},{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[5,"terminate","","`[EGL 1.0]` Terminate an EGL display connection.",null,{"inputs":[{"name":"egldisplay"}],"output":{"name":"eglcallresult"}}],[5,"wait_client","","`[EGL 1.2]` Complete client API execution prior to subsequent native rendering calls.",null,{"inputs":[],"output":{"name":"eglcallresult"}}],[5,"wait_gl","","`[EGL 1.0]` Complete GL execution prior to subsequent native rendering calls.",null,{"inputs":[],"output":{"name":"eglcallresult"}}],[5,"wait_native","","`[EGL 1.0]` Complete native execution prior to subsequent GL rendering calls.",null,{"inputs":[{"name":"eglint"}],"output":{"name":"eglcallresult"}}],[6,"EGLBoolean","","",null,null],[6,"EGLClientBuffer","","",null,null],[6,"EGLConfig","","",null,null],[6,"EGLContext","","",null,null],[6,"EGLDisplay","","",null,null],[6,"EGLenum","","",null,null],[6,"EGLint","","",null,null],[6,"EGLNativeDisplayType","","",null,null],[6,"EGLSurface","","",null,null],[6,"EGLNativePixmapType","","",null,null],[6,"EGLNativeWindowType","","",null,null],[17,"EGL_FALSE","","",null,null],[17,"EGL_TRUE","","",null,null],[17,"EGL_DEFAULT_DISPLAY","","",null,null],[17,"EGL_NO_CONTEXT","","",null,null],[17,"EGL_NO_DISPLAY","","",null,null],[17,"EGL_NO_SURFACE","","",null,null],[17,"EGL_DONT_CARE","","",null,null],[17,"EGL_SUCCESS","","",null,null],[17,"EGL_NOT_INITIALIZED","","",null,null],[17,"EGL_BAD_ACCESS","","",null,null],[17,"EGL_BAD_ALLOC","","",null,null],[17,"EGL_BAD_ATTRIBUTE","","",null,null],[17,"EGL_BAD_CONFIG","","",null,null],[17,"EGL_BAD_CONTEXT","","",null,null],[17,"EGL_BAD_CURRENT_SURFACE","","",null,null],[17,"EGL_BAD_DISPLAY","","",null,null],[17,"EGL_BAD_MATCH","","",null,null],[17,"EGL_BAD_NATIVE_PIXMAP","","",null,null],[17,"EGL_BAD_NATIVE_WINDOW","","",null,null],[17,"EGL_BAD_PARAMETER","","",null,null],[17,"EGL_BAD_SURFACE","","",null,null],[17,"EGL_CONTEXT_LOST","","",null,null],[17,"EGL_BUFFER_SIZE","","",null,null],[17,"EGL_ALPHA_SIZE","","",null,null],[17,"EGL_BLUE_SIZE","","",null,null],[17,"EGL_GREEN_SIZE","","",null,null],[17,"EGL_RED_SIZE","","",null,null],[17,"EGL_DEPTH_SIZE","","",null,null],[17,"EGL_STENCIL_SIZE","","",null,null],[17,"EGL_CONFIG_CAVEAT","","",null,null],[17,"EGL_CONFIG_ID","","",null,null],[17,"EGL_LEVEL","","",null,null],[17,"EGL_MAX_PBUFFER_HEIGHT","","",null,null],[17,"EGL_MAX_PBUFFER_PIXELS","","",null,null],[17,"EGL_MAX_PBUFFER_WIDTH","","",null,null],[17,"EGL_NATIVE_RENDERABLE","","",null,null],[17,"EGL_NATIVE_VISUAL_ID","","",null,null],[17,"EGL_NATIVE_VISUAL_TYPE","","",null,null],[17,"EGL_SAMPLES","","",null,null],[17,"EGL_SAMPLE_BUFFERS","","",null,null],[17,"EGL_SURFACE_TYPE","","",null,null],[17,"EGL_TRANSPARENT_TYPE","","",null,null],[17,"EGL_TRANSPARENT_BLUE_VALUE","","",null,null],[17,"EGL_TRANSPARENT_GREEN_VALUE","","",null,null],[17,"EGL_TRANSPARENT_RED_VALUE","","",null,null],[17,"EGL_NONE","","",null,null],[17,"EGL_BIND_TO_TEXTURE_RGB","","",null,null],[17,"EGL_BIND_TO_TEXTURE_RGBA","","",null,null],[17,"EGL_MIN_SWAP_INTERVAL","","",null,null],[17,"EGL_MAX_SWAP_INTERVAL","","",null,null],[17,"EGL_LUMINANCE_SIZE","","",null,null],[17,"EGL_ALPHA_MASK_SIZE","","",null,null],[17,"EGL_COLOR_BUFFER_TYPE","","",null,null],[17,"EGL_RENDERABLE_TYPE","","",null,null],[17,"EGL_MATCH_NATIVE_PIXMAP","","",null,null],[17,"EGL_CONFORMANT","","",null,null],[17,"EGL_SLOW_CONFIG","","",null,null],[17,"EGL_NON_CONFORMANT_CONFIG","","",null,null],[17,"EGL_TRANSPARENT_RGB","","",null,null],[17,"EGL_RGB_BUFFER","","",null,null],[17,"EGL_LUMINANCE_BUFFER","","",null,null],[17,"EGL_NO_TEXTURE","","",null,null],[17,"EGL_TEXTURE_RGB","","",null,null],[17,"EGL_TEXTURE_RGBA","","",null,null],[17,"EGL_TEXTURE_2D","","",null,null],[17,"EGL_VENDOR","","",null,null],[17,"EGL_VERSION","","",null,null],[17,"EGL_EXTENSIONS","","",null,null],[17,"EGL_CLIENT_APIS","","",null,null],[17,"EGL_HEIGHT","","",null,null],[17,"EGL_WIDTH","","",null,null],[17,"EGL_LARGEST_PBUFFER","","",null,null],[17,"EGL_TEXTURE_FORMAT","","",null,null],[17,"EGL_TEXTURE_TARGET","","",null,null],[17,"EGL_MIPMAP_TEXTURE","","",null,null],[17,"EGL_MIPMAP_LEVEL","","",null,null],[17,"EGL_RENDER_BUFFER","","",null,null],[17,"EGL_VG_COLORSPACE","","",null,null],[17,"EGL_VG_ALPHA_FORMAT","","",null,null],[17,"EGL_HORIZONTAL_RESOLUTION","","",null,null],[17,"EGL_VERTICAL_RESOLUTION","","",null,null],[17,"EGL_PIXEL_ASPECT_RATIO","","",null,null],[17,"EGL_SWAP_BEHAVIOR","","",null,null],[17,"EGL_MULTISAMPLE_RESOLVE","","",null,null],[17,"EGL_BACK_BUFFER","","",null,null],[17,"EGL_SINGLE_BUFFER","","",null,null],[17,"EGL_VG_COLORSPACE_sRGB","","",null,null],[17,"EGL_VG_COLORSPACE_LINEAR","","",null,null],[17,"EGL_VG_ALPHA_FORMAT_NONPRE","","",null,null],[17,"EGL_VG_ALPHA_FORMAT_PRE","","",null,null],[17,"EGL_DISPLAY_SCALING","","",null,null],[17,"EGL_UNKNOWN","","",null,null],[17,"EGL_BUFFER_PRESERVED","","",null,null],[17,"EGL_BUFFER_DESTROYED","","",null,null],[17,"EGL_OPENVG_IMAGE","","",null,null],[17,"EGL_CONTEXT_CLIENT_TYPE","","",null,null],[17,"EGL_CONTEXT_CLIENT_VERSION","","",null,null],[17,"EGL_MULTISAMPLE_RESOLVE_DEFAULT","","",null,null],[17,"EGL_MULTISAMPLE_RESOLVE_BOX","","",null,null],[17,"EGL_OPENGL_ES_API","","",null,null],[17,"EGL_OPENVG_API","","",null,null],[17,"EGL_OPENGL_API","","",null,null],[17,"EGL_DRAW","","",null,null],[17,"EGL_READ","","",null,null],[17,"EGL_CORE_NATIVE_ENGINE","","",null,null],[17,"EGL_COLORSPACE","","",null,null],[17,"EGL_ALPHA_FORMAT","","",null,null],[17,"EGL_COLORSPACE_sRGB","","",null,null],[17,"EGL_COLORSPACE_LINEAR","","",null,null],[17,"EGL_ALPHA_FORMAT_NONPRE","","",null,null],[17,"EGL_ALPHA_FORMAT_PRE","","",null,null],[0,"ffi","egli","Unsafe FFI API.",null,null],[5,"eglChooseConfig","egli::ffi","",null,null],[5,"eglCopyBuffers","","",null,null],[5,"eglCreateContext","","",null,null],[5,"eglCreatePbufferSurface","","",null,null],[5,"eglCreatePixmapSurface","","",null,null],[5,"eglCreateWindowSurface","","",null,null],[5,"eglDestroyContext","","",null,null],[5,"eglDestroySurface","","",null,null],[5,"eglGetConfigAttrib","","",null,null],[5,"eglGetConfigs","","",null,null],[5,"eglGetCurrentDisplay","","",null,null],[5,"eglGetCurrentSurface","","",null,null],[5,"eglGetDisplay","","",null,null],[5,"eglGetError","","",null,null],[5,"eglGetProcAddress","","",null,null],[5,"eglInitialize","","",null,null],[5,"eglMakeCurrent","","",null,null],[5,"eglQueryContext","","",null,null],[5,"eglQueryString","","",null,null],[5,"eglQuerySurface","","",null,null],[5,"eglSwapBuffers","","",null,null],[5,"eglTerminate","","",null,null],[5,"eglWaitGL","","",null,null],[5,"eglWaitNative","","",null,null],[5,"eglBindTexImage","","",null,null],[5,"eglReleaseTexImage","","",null,null],[5,"eglSurfaceAttrib","","",null,null],[5,"eglSwapInterval","","",null,null],[5,"eglBindAPI","","",null,null],[5,"eglQueryAPI","","",null,null],[5,"eglCreatePbufferFromClientBuffer","","",null,null],[5,"eglReleaseThread","","",null,null],[5,"eglWaitClient","","",null,null],[5,"eglGetCurrentContext","","",null,null],[0,"error","egli","Error and Result types.",null,null],[4,"EglCallError","egli::error","",null,null],[13,"GetConfigs","","",5,null],[13,"GetCurrentContext","","",5,null],[13,"GetCurrentDisplay","","",5,null],[13,"GetDisplay","","",5,null],[13,"GetCurrentSurface","","",5,null],[13,"GetConfigAttrib","","",5,null],[13,"DestroySurface","","",5,null],[13,"Initialize","","",5,null],[13,"MakeCurrent","","",5,null],[13,"DestroyContext","","",5,null],[13,"CreateWindowSurface","","",5,null],[13,"CreatePlatformWindowSurface","","",5,null],[13,"CreatePixmapSurface","","",5,null],[13,"CreatePbufferSurface","","",5,null],[13,"CreatePbufferFromClientBuffer","","",5,null],[13,"CreateContext","","",5,null],[13,"CopyBuffers","","",5,null],[13,"ChooseConfig","","",5,null],[13,"BindTexImage","","",5,null],[13,"BindAPI","","",5,null],[13,"Terminate","","",5,null],[13,"WaitClient","","",5,null],[13,"WaitGL","","",5,null],[13,"WaitNative","","",5,null],[13,"SwapInterval","","",5,null],[13,"SwapBuffers","","",5,null],[13,"SurfaceAttrib","","",5,null],[13,"ReleaseThread","","",5,null],[13,"ReleaseTexImage","","",5,null],[13,"QuerySurface","","",5,null],[13,"QueryString","","",5,null],[13,"QueryContext","","",5,null],[4,"Error","","",null,null],[13,"Egl","","",6,null],[13,"NonUtf8StringReceived","","",6,null],[6,"EglCallResult","","",null,null],[6,"Result","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"eglcallerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"eglcallerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"drop","egli","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"into","","",7,{"inputs":[{"name":"self"}],"output":{"name":"egldisplay"}}],[11,"from_display_id","","`[EGL 1.0]` Create a `Display` from an EGL display connection.",7,{"inputs":[{"name":"eglnativedisplaytype"}],"output":{"name":"result"}}],[11,"from_default_display","","`[EGL 1.0]` Creates a `Display` from the default display.",7,{"inputs":[],"output":{"name":"result"}}],[11,"initialize_and_get_version","","`[EGL 1.0]` Initialize this EGL display connection and return EGL version.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"initialize","","`[EGL 1.0]` Initialize this EGL display connection.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"query_client_apis","","`[EGL 1.2]` Query EGL_CLIENT_APIS.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"query_vendor","","`[EGL 1.0]` Query EGL_VENDOR.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"query_version","","`[EGL 1.0]` Get supported EGL version for this display.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"query_extensions","","`[EGL 1.0]` Get the set of display extensions supported by this display.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_configs","","`[EGL 1.0]` Get all possible display configurations.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"config_filter","","`[EGL 1.0]` Creates a new config filter for this display for safe invocation of `eglChooseConfig`.",7,{"inputs":[{"name":"self"}],"output":{"name":"configfilterref"}}],[11,"create_window_surface","","`[EGL 1.0]` Create a new EGL window surface.",7,{"inputs":[{"name":"self"},{"name":"framebufferconfigref"},{"name":"eglnativewindowtype"}],"output":{"name":"result"}}],[11,"create_context","","`[EGL 1.0]` Create a new EGL rendering context.",7,{"inputs":[{"name":"self"},{"name":"framebufferconfigref"}],"output":{"name":"result"}}],[11,"create_context_with_client_version","","`[EGL 1.3]` Create a new EGL rendering context.",7,{"inputs":[{"name":"self"},{"name":"framebufferconfigref"},{"name":"contextclientversion"}],"output":{"name":"result"}}],[11,"make_current","","`[EGL 1.0]` Attach an EGL rendering context to EGL surfaces.",7,{"inputs":[{"name":"self"},{"name":"surface"},{"name":"surface"},{"name":"context"}],"output":{"name":"result"}}],[11,"make_not_current","","`[EGL 1.0]` Detatch an EGL rendering context from EGL surfaces and contexts.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"swap_buffers","","`[EGL 1.0]` Post EGL surface color buffer to a native window.",7,{"inputs":[{"name":"self"},{"name":"surface"}],"output":{"name":"result"}}],[11,"with_handle","","Run an action with inner handle as parameter.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"forget","","Drops `Display` without cleaning up any resources.",7,{"inputs":[{"name":"self"}],"output":{"name":"egldisplay"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"into","","",8,{"inputs":[{"name":"self"}],"output":{"name":"eglcontext"}}],[11,"from_handle","","Create a `Context` from an existing EGL display and context handles.",8,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"}],"output":{"name":"context"}}],[11,"handle","","Get raw handle.",8,{"inputs":[{"name":"self"}],"output":{"name":"eglcontext"}}],[11,"forget","","Drops `Context` without cleaning up any resources.",8,{"inputs":[{"name":"self"}],"output":{"name":"eglcontext"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"into","","",9,{"inputs":[{"name":"self"}],"output":{"name":"eglsurface"}}],[11,"from_handle","","Create a `Surface` from an existing EGL display and surface handles.",9,{"inputs":[{"name":"egldisplay"},{"name":"eglsurface"}],"output":{"name":"surface"}}],[11,"handle","","Get raw handle.",9,{"inputs":[{"name":"self"}],"output":{"name":"eglsurface"}}],[11,"query_width","","[EGL 1.0] Returns the width of the surface in pixels.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"query_height","","[EGL 1.0] Returns the height of the surface in pixels.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"forget","","Drops `Surface` without cleaning up any resources.",9,{"inputs":[{"name":"self"}],"output":{"name":"eglsurface"}}],[11,"from_native","","",10,{"inputs":[{"name":"egldisplay"}],"output":{"name":"configfilterref"}}],[11,"with_alpha_mask_size","","Must be followed by a nonnegative integer that indicates the desired alpha mask buffer size, in bits. The smallest alpha mask buffers of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_alpha_size","","Must be followed by a nonnegative integer that indicates the desired size of the alpha component of the color buffer, in bits. If this value is zero, color buffers with the smallest alpha component size are preferred. Otherwise, color buffers with the largest alpha component of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_bind_to_texture_rgb","","Must be followed by `None`, `Some(true)`, or `Some(false)`. If `Some(true)` is specified, then only frame buffer configurations that support binding of color buffers to an OpenGL ES RGB texture will be considered. Currently only frame buffer configurations that support pbuffers allow this. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_bind_to_texture_rgba","","Must be followed by one of `None`, `Some(true)`, or `Some(false)`. If `Some(true)` is specified, then only frame buffer configurations that support binding of color buffers to an OpenGL ES RGBA texture will be considered. Currently only frame buffer configurations that support pbuffers allow this. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_blue_size","","Must be followed by a nonnegative integer that indicates the desired size of the blue component of the color buffer, in bits. If this value is zero, color buffers with the smallest blue component size are preferred. Otherwise, color buffers with the largest blue component of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_buffer_size","","Must be followed by a nonnegative integer that indicates the desired color buffer size, in bits. The smallest color buffers of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_color_buffer_type","","Must be followed by one of EGL_RGB_BUFFER or EGL_LUMINANCE_BUFFER.",10,{"inputs":[{"name":"self"},{"name":"colorbuffertype"}],"output":{"name":"self"}}],[11,"with_config_caveat","","Must be followed by `None`, `ConfigCaveat::None`, `ConfigCaveat::Slow`, or `ConfigCaveat::NonConformant`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_config_id","","Must be followed by a valid integer ID that indicates the desired EGL frame buffer configuration. When a EGL_CONFIG_ID is specified, all other attributes are ignored. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_conformant","","Must be followed by a bitmask indicating which types of client API contexts created with respect to the frame buffer configuration config must pass the required conformance tests for that API. Mask bits include:",10,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_depth_size","","Must be followed by a nonnegative integer that indicates the desired depth buffer size, in bits. The smallest depth buffers of at least the specified size is preferred. If the desired size is zero, frame buffer configurations with no depth buffer are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_green_size","","Must be followed by a nonnegative integer that indicates the desired size of the green component of the color buffer, in bits. If this value is zero, color buffers with the smallest green component size are preferred. Otherwise, color buffers with the largest green component of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_level","","Must be followed by an integer buffer level specification. This specification is honored exactly. Buffer level zero corresponds to the default frame buffer of the display. Buffer level one is the first overlay frame buffer, level two the second overlay frame buffer, and so on. Negative buffer levels correspond to underlay frame buffers. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"with_luminance_size","","Must be followed by a nonnegative integer that indicates the desired size of the luminance component of the color buffer, in bits. If this value is zero, color buffers with the smallest luminance component size are preferred. Otherwise, color buffers with the largest luminance component of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_match_native_pixmap","","Must be followed by the handle of a valid native pixmap, cast to `Some(i32)`, or `None`. If the value is not `None`, only configs which support creating pixmap surfaces with this pixmap using eglCreatePixmapSurface will match this attribute. If the value is `None`, then configs are not matched for this attribute. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_native_renderable","","Must be followed by EGL_DONT_CARE, EGL_TRUE, or EGL_FALSE. If EGL_TRUE is specified, then only frame buffer configurations that allow native rendering into the surface will be considered. The default value is EGL_DONT_CARE.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_max_swap_interval","","Must be followed by a integer that indicates the maximum value that can be passed to `eglSwapInterval`. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_min_swap_interval","","Must be followed by a integer that indicates the minimum value that can be passed to `eglSwapInterval`. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_red_size","","Must be followed by a nonnegative integer that indicates the desired size of the red component of the color buffer, in bits. If this value is zero, color buffers with the smallest red component size are preferred. Otherwise, color buffers with the largest red component of at least the specified size are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_sample_buffers","","Must be followed by the minimum acceptable number of multisample buffers. Configurations with the smallest number of multisample buffers that meet or exceed this minimum number are preferred. Currently operation with more than one multisample buffer is undefined, so only values of zero or one will produce a match. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"with_samples","","Must be followed by the minimum number of samples required in multisample buffers. Configurations with the smallest number of samples that meet or exceed the specified minimum number are preferred. Note that it is possible for color samples in the multisample buffer to have fewer bits than colors in the main color buffers. However, multisampled colors maintain at least as much color resolution in aggregate as the main color buffers.",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"with_stencil_size","","Must be followed by a nonnegative integer that indicates the desired stencil buffer size, in bits. The smallest stencil buffers of at least the specified size are preferred. If the desired size is zero, frame buffer configurations with no stencil buffer are preferred. The default value is zero.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_renderable_type","","Must be followed by a bitmask indicating which types of client API contexts the frame buffer configuration must support creating with eglCreateContext). Mask bits are the same as for attribute EGL_CONFORMANT. The default value is EGL_OPENGL_ES_BIT.",10,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_surface_type","","Must be followed by a bitmask indicating which EGL surface types and capabilities the frame buffer configuration must support. Mask bits include:",10,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_transparent_type","","Must be followed by one of `TransparentType::None` or `TransparentType::TransparentRgb`. If `TransparentType::None` is specified, then only opaque frame buffer configurations will be considered. If `TransparentType::TransparentRgb` is specified, then only transparent frame buffer configurations will be considered. The default value is `TransparentType::None`.",10,{"inputs":[{"name":"self"},{"name":"transparenttype"}],"output":{"name":"self"}}],[11,"with_transparent_red_value","","Must be followed by an integer value indicating the transparent red value. The value must be between zero and the maximum color buffer value for red. Only frame buffer configurations that use the specified transparent red value will be considered. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_transparent_green_value","","Must be followed by an integer value indicating the transparent green value. The value must be between zero and the maximum color buffer value for green. Only frame buffer configurations that use the specified transparent green value will be considered. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_transparent_blue_value","","Must be followed by an integer value indicating the transparent blue value. The value must be between zero and the maximum color buffer value for blue. Only frame buffer configurations that use the specified transparent blue value will be considered. The default value is `None`.",10,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"choose_configs","","Get filtered display configurations.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"framebufferconfigref"}}],[11,"from_native","","",11,{"inputs":[{"name":"egldisplay"},{"name":"eglconfig"}],"output":{"name":"framebufferconfigref"}}],[11,"handle","","Get native config handle.",11,{"inputs":[{"name":"self"}],"output":{"name":"eglconfig"}}],[11,"alpha_size","","Returns the number of bits of alpha stored in the color buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"alpha_mask_size","","Returns the number of bits in the alpha mask buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind_to_texture_rgb","","Returns whether color buffers can be bound to an RGB texture.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind_to_texture_rgba","","Returns whether buffers can be bound to an RGBA texture.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"blue_size","","Returns the number of bits of blue stored in the color buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"buffer_size","","Returns the depth of the color buffer. It is the sum of EGL_RED_SIZE, EGL_GREEN_SIZE, EGL_BLUE_SIZE, and EGL_ALPHA_SIZE.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"color_buffer_type","","Returns the color buffer type. Possible types are EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"config_caveat","","Returns the caveats for the frame buffer configuration. Possible caveat values are EGL_NONE, EGL_SLOW_CONFIG, and EGL_NON_CONFORMANT.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"config_id","","Returns the ID of the frame buffer configuration.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"conformant","","Returns a bitmask indicating which client API contexts created with respect to this config are conformant.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"depth_size","","Returns the number of bits in the depth buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"green_size","","Returns the number of bits of green stored in the color buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"level","","Returns the frame buffer level. Level zero is the default frame buffer. Positive levels correspond to frame buffers that overlay the default buffer and negative levels correspond to frame buffers that underlay the default buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"luminance_size","","Returns the number of bits of luminance stored in the luminance buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"max_pbuffer_width","","Returns the maximum width of a pixel buffer surface in pixels.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"max_pbuffer_height","","Returns the maximum height of a pixel buffer surface in pixels.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"max_pbuffer_pixels","","Returns the maximum size of a pixel buffer surface in pixels.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"max_swap_interval","","Returns the maximum value that can be passed to eglSwapInterval.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"min_swap_interval","","Returns the minimum value that can be passed to eglSwapInterval.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"native_renderable","","Returns whether native rendering APIs can render into the surface.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"native_visual_id","","Returns the ID of the associated native visual.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"native_visual_type","","Returns the type of the associated native visual.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"red_size","","Returns the number of bits of red stored in the color buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"renderable_type","","Returns a bitmask indicating the types of supported client API contexts.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sample_buffers","","Returns the number of multisample buffers.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"samples","","Returns the number of samples per pixel.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"stencil_size","","Returns the number of bits in the stencil buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"surface_type","","Returns a bitmask indicating the types of supported EGL surfaces.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"transparent_type","","Returns the type of supported transparency. Possible transparency values are: EGL_NONE, and EGL_TRANSPARENT_RGB.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"transparent_red_value","","Returns the transparent red value.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"transparent_green_value","","Returns the transparent green value.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"transparent_blue_value","","Returns the transparent blue value.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"renderable","","Renderable type mask bits.",null,null],[3,"Type","egli::renderable","",null,null],[17,"OPENGL","","EGL_OPENGL_BIT",null,null],[17,"OPENGL_ES","","EGL_OPENGL_ES_BIT",null,null],[17,"OPENGL_ES2","","EGL_OPENGL_ES2_BIT",null,null],[17,"OPENGL_ES3","","EGL_OPENGL_ES3_BIT",null,null],[17,"OPENVG","","EGL_OPENVG_BIT",null,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"type"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"type"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"i32"}],"output":{"name":"type"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"type"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"type"}}],[0,"surface","egli","Surface type mask bits.",null,null],[3,"Type","egli::surface","",null,null],[17,"PBUFFER","","EGL_PBUFFER_BIT",null,null],[17,"PIXMAP","","EGL_PIXMAP_BIT",null,null],[17,"WINDOW","","EGL_WINDOW_BIT",null,null],[17,"VG_COLORSPACE_LINEAR","","EGL_VG_COLORSPACE_LINEAR_BIT",null,null],[17,"VG_ALPHA_FORMAT_PRE","","EGL_VG_ALPHA_FORMAT_PRE_BIT",null,null],[17,"MULTISAMPLE_RESOLVE_BOX","","EGL_MULTISAMPLE_RESOLVE_BOX_BIT",null,null],[17,"SWAP_BEHAVIOR_PRESERVED","","EGL_SWAP_BEHAVIOR_PRESERVED_BIT",null,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"type"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"type"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"i32"}],"output":{"name":"type"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,{"inputs":[{"name":"self"},{"name":"type"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"bitor_assign","","Adds the set of flags.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"bitxor_assign","","Toggles the set of flags.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"sub_assign","","Disables all flags enabled in the set.",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"type"}}],[11,"clone","egli","",2,{"inputs":[{"name":"self"}],"output":{"name":"colorbuffertype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","",2,{"inputs":[{"name":"eglint"}],"output":{"name":"colorbuffertype"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"configcaveat"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","",3,{"inputs":[{"name":"eglint"}],"output":{"name":"configcaveat"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"transparenttype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","",4,{"inputs":[{"name":"eglint"}],"output":{"name":"transparenttype"}}]],"paths":[[3,"Version"],[4,"ContextClientVersion"],[4,"ColorBufferType"],[4,"ConfigCaveat"],[4,"TransparentType"],[4,"EglCallError"],[4,"Error"],[3,"Display"],[3,"Context"],[3,"Surface"],[3,"ConfigFilterRef"],[3,"FrameBufferConfigRef"],[3,"Type"],[3,"Type"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a `Some` value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",0,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",0,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"default","","Returns None.",0,{"inputs":[],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["fireplace"] = {"doc":"","items":[[3,"Config","fireplace","Main configuration struct",null,null],[12,"outputs","","A `HashMap` of an `OutputConfig` for each name of an `Output`. The name `default` or `generic` might be used for a general configuration.",0,null],[12,"logging","","Logging configuration",0,null],[12,"keys","","A `HashMap` of global actions that may be invoked through keys.",0,null],[12,"view","","Configuration of keys related to `View`s",0,null],[12,"exec","","Configuration of program execution by keys.",0,null],[12,"workspace","","Configuration for Workspaces",0,null],[12,"focus","","Configuration for `View` focusing",0,null],[12,"ui","","Ui related configuration",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"config"}}]],"paths":[[3,"Config"]]};
searchIndex["fireplace_lib"] = {"doc":"Fireplace Window Manager Library","items":[[0,"utils","fireplace_lib","Collection of utility functions and macros",null,null],[0,"enum_serialization","fireplace_lib::utils","Automatic De/Serialization implementation for enums",null,null],[0,"coordinates","","Utility functions regarding different coordinate systems used in fireplace",null,null],[5,"x_wlc_to_conrod","fireplace_lib::utils::coordinates","Convert a wlc x coordinate to its conrod counterpart",null,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"f64"}}],[5,"y_wlc_to_conrod","","Convert a wlc y coordinate to its conrod counterpart",null,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"f64"}}],[0,"callback","fireplace_lib","Partial implementations of the `Callback` trait for easy composability",null,null],[3,"Split","fireplace_lib::callback","Struct wrapping `AsSplit` Implementations",null,null],[3,"VecCallback","","Struct wrapping `AsVecCallback` Implementations",null,null],[3,"Wrapper","","Struct wrapping `AsWrapper` Implementations",null,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"output_created","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_focus","","",0,{"inputs":[{"name":"self"},{"name":"output"},{"name":"bool"}],"output":null}],[11,"output_resolution","","",0,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","",0,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",0,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_context_created","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_move_to_output","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"output"},{"name":"output"}],"output":null}],[11,"view_request_geometry","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"view_render_pre","","",0,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","",0,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_properties_updated","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"}],"output":null}],[11,"keyboard_key","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"pointer_button","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_scroll","","",0,null],[11,"pointer_motion","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"touch","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"touchtype"},{"name":"i32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"compositor_ready","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"compositor_terminate","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"output_created","","",1,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_destroyed","","",1,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_focus","","",1,{"inputs":[{"name":"self"},{"name":"output"},{"name":"bool"}],"output":null}],[11,"output_resolution","","",1,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","",1,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",1,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_context_created","","",1,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",1,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","",1,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",1,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_move_to_output","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"output"},{"name":"output"}],"output":null}],[11,"view_request_geometry","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"view_render_pre","","",1,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","",1,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_properties_updated","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"}],"output":null}],[11,"keyboard_key","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"pointer_button","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_scroll","","",1,null],[11,"pointer_motion","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"touch","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"touchtype"},{"name":"i32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"compositor_ready","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"compositor_terminate","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"output_created","","",2,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_destroyed","","",2,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_focus","","",2,{"inputs":[{"name":"self"},{"name":"output"},{"name":"bool"}],"output":null}],[11,"output_resolution","","",2,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","",2,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",2,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_context_created","","",2,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",2,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","",2,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",2,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_move_to_output","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"output"},{"name":"output"}],"output":null}],[11,"view_request_geometry","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"view_render_pre","","",2,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","",2,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_properties_updated","","",2,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"}],"output":null}],[11,"keyboard_key","","",2,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"pointer_button","","",2,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_scroll","","",2,null],[11,"pointer_motion","","",2,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"touch","","",2,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"touchtype"},{"name":"i32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"compositor_ready","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"compositor_terminate","","",2,{"inputs":[{"name":"self"}],"output":null}],[8,"AsSplit","","A trait to express that your struct may split Callback calls onto two children.",null,null],[16,"Callback1","","Type of the first child",3,null],[16,"Callback2","","Type of the second child",3,null],[10,"first_child","","Returns a mutable reference to your first child, when it exists",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"second_child","","Returns a mutable reference to your second child, when it exists",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"AsVecCallback","","A trait to express that your struct may split Callback calls onto an arbitrary amount of children.",null,null],[16,"Callback","","Type of the children",4,null],[10,"children","","Returns a mutable slice of the children",4,null],[8,"AsWrapper","","A trait to express that your struct may forward Callback calls onto a wrapped child.",null,null],[10,"child","","Returns a mutable reference to the wrapped child, if one exists",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"IntoCallback","","A trait to express the ability to consume an object and acquire something that implements `Callback`",null,null],[10,"into_callback","","Converts into a `Callback` implementation",6,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[0,"handlers","fireplace_lib","Handlers",null,null],[3,"StoreHandler","fireplace_lib::handlers","Handler to initialize a `Store` for each `View` and `Output`",null,null],[3,"FocusHandler","","Handler to direct window focus by given properties",null,null],[3,"FocusConfig","","Configuration for a `FocusHandler`",null,null],[12,"on_creation","","Always focus a newly created `View`",7,null],[12,"on_click","","Switch focus upon clicking onto an unfocused `View`",7,null],[12,"follows_mouse","","Switch focus when the mouse enters a previously unfocused `View`",7,null],[3,"PointerHandler","","Handler to move the pointer according to mouse movement",null,null],[3,"OutputConfigHandler","","Handler to apply output configurations to every newly created `Output` automatically.",null,null],[3,"OutputConfig","","Output configuration",null,null],[12,"scale","","Scale of the `Output`",8,null],[11,"default","","",9,{"inputs":[],"output":{"name":"storehandler"}}],[11,"new","","Initialize a new `StoreHandler`",9,{"inputs":[],"output":{"name":"storehandler"}}],[11,"output_resolution","","",9,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_created","","",9,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"view_created","","",9,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"focushandler"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"focusconfig"}}],[11,"new","","Initialize a new `FocusHandler` with a given `FocusConfig`",10,{"inputs":[{"name":"focusconfig"}],"output":{"name":"focushandler"}}],[11,"view_created","","",10,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_focus","","",10,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_destroyed","","",10,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"pointer_motion","","",10,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_button","","",10,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"view_request_state","","",10,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[0,"keyboard","","Collection of common Keyboard related types.",null,null],[3,"KeyPattern","fireplace_lib::handlers::keyboard","Describtion of a key combination that might be handled by the compositor.",null,null],[12,"state","","If the Pattern should match if the Key was pressed or when it gets released",11,null],[12,"modifiers","","What modifiers are expected to be pressed alongside the key",11,null],[12,"key","","The actual key, that was pressed",11,null],[3,"KeyboardHandler","","Handler to handle global key events",null,null],[8,"KeyHandler","","Implement to express you may handle a certain key event",null,null],[10,"handle_key","","Handle an event",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"keypattern"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"keypattern"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"keypattern"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"new","","Create a new KeyPattern",11,{"inputs":[{"name":"keystate"},{"name":"flags"},{"name":"key"}],"output":{"name":"keypattern"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"keyboardhandler"}}],[11,"new","","Initialize a new `KeyboardHandler`",13,{"inputs":[],"output":{"name":"keyboardhandler"}}],[11,"register","","Register a new `KeyPattern` and `KeyHandler` combination, that triggers the `KeyHandler` once the corresponding `KeyPattern` was encountered.",13,{"inputs":[{"name":"self"},{"name":"keypattern"},{"name":"h"}],"output":null}],[11,"keyboard_key","","",13,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"default","fireplace_lib::handlers","",14,{"inputs":[],"output":{"name":"pointerhandler"}}],[11,"pointer_motion","","",14,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"new","","Initialize a new `PointerHandler`",14,{"inputs":[],"output":{"name":"pointerhandler"}}],[0,"workspaces","","Workspace handling",null,null],[3,"WorkspaceHandler","fireplace_lib::handlers::workspaces","Handler that creates and manages `Workspace`s",null,null],[3,"WorkspacesConfig","","Configuration for the `WorkspaceHandler`",null,null],[12,"spaces","","A `HashMap` of an `WorkspaceConfig` for each name of an `Workspace`. The name `default` or `generic` might be used for a generic configuration.",15,null],[12,"keys","","Key configuration",15,null],[3,"WorkspaceConfig","","Configuration for a single Workspace",null,null],[12,"name","","Name of the workspace, used for Ui",16,null],[12,"mode","","Configuration for the `Mode` that shall handle the `View`s of this `Workspace`",16,null],[3,"KeyPatterns","","`KeyPattern`s triggering workspace related actions",null,null],[12,"next","","Switch to next workspace",17,null],[12,"prev","","Switch to previous workspace",17,null],[12,"workspace1","","Switch to workspace 1",17,null],[12,"workspace2","","Switch to workspace 2",17,null],[12,"workspace3","","Switch to workspace 3",17,null],[12,"workspace4","","Switch to workspace 4",17,null],[12,"workspace5","","Switch to workspace 5",17,null],[12,"workspace6","","Switch to workspace 6",17,null],[12,"workspace7","","Switch to workspace 7",17,null],[12,"workspace8","","Switch to workspace 8",17,null],[12,"workspace9","","Switch to workspace 9",17,null],[12,"workspace10","","Switch to workspace 10",17,null],[12,"workspace11","","Switch to workspace 11",17,null],[12,"workspace12","","Switch to workspace 12",17,null],[12,"workspace13","","Switch to workspace 13",17,null],[12,"workspace14","","Switch to workspace 14",17,null],[12,"workspace15","","Switch to workspace 15",17,null],[12,"workspace16","","Switch to workspace 16",17,null],[12,"workspace17","","Switch to workspace 17",17,null],[12,"workspace18","","Switch to workspace 18",17,null],[12,"workspace19","","Switch to workspace 19",17,null],[12,"workspace20","","Switch to workspace 20",17,null],[12,"workspace21","","Switch to workspace 21",17,null],[12,"workspace22","","Switch to workspace 22",17,null],[12,"workspace23","","Switch to workspace 23",17,null],[12,"workspace24","","Switch to workspace 24",17,null],[12,"workspace25","","Switch to workspace 25",17,null],[12,"workspace26","","Switch to workspace 26",17,null],[12,"workspace27","","Switch to workspace 27",17,null],[12,"workspace28","","Switch to workspace 28",17,null],[12,"workspace29","","Switch to workspace 29",17,null],[12,"workspace30","","Switch to workspace 30",17,null],[12,"workspace31","","Switch to workspace 31",17,null],[12,"workspace32","","Switch to workspace 32",17,null],[12,"moveto_workspace1","","Move focused `View` to workspace 1",17,null],[12,"moveto_workspace2","","Move focused `View` to workspace 2",17,null],[12,"moveto_workspace3","","Move focused `View` to workspace 3",17,null],[12,"moveto_workspace4","","Move focused `View` to workspace 4",17,null],[12,"moveto_workspace5","","Move focused `View` to workspace 5",17,null],[12,"moveto_workspace6","","Move focused `View` to workspace 6",17,null],[12,"moveto_workspace7","","Move focused `View` to workspace 7",17,null],[12,"moveto_workspace8","","Move focused `View` to workspace 8",17,null],[12,"moveto_workspace9","","Move focused `View` to workspace 9",17,null],[12,"moveto_workspace10","","Move focused `View` to workspace 10",17,null],[12,"moveto_workspace11","","Move focused `View` to workspace 11",17,null],[12,"moveto_workspace12","","Move focused `View` to workspace 12",17,null],[12,"moveto_workspace13","","Move focused `View` to workspace 13",17,null],[12,"moveto_workspace14","","Move focused `View` to workspace 14",17,null],[12,"moveto_workspace15","","Move focused `View` to workspace 15",17,null],[12,"moveto_workspace16","","Move focused `View` to workspace 16",17,null],[12,"moveto_workspace17","","Move focused `View` to workspace 17",17,null],[12,"moveto_workspace18","","Move focused `View` to workspace 18",17,null],[12,"moveto_workspace19","","Move focused `View` to workspace 19",17,null],[12,"moveto_workspace20","","Move focused `View` to workspace 20",17,null],[12,"moveto_workspace21","","Move focused `View` to workspace 21",17,null],[12,"moveto_workspace22","","Move focused `View` to workspace 22",17,null],[12,"moveto_workspace23","","Move focused `View` to workspace 23",17,null],[12,"moveto_workspace24","","Move focused `View` to workspace 24",17,null],[12,"moveto_workspace25","","Move focused `View` to workspace 25",17,null],[12,"moveto_workspace26","","Move focused `View` to workspace 26",17,null],[12,"moveto_workspace27","","Move focused `View` to workspace 27",17,null],[12,"moveto_workspace28","","Move focused `View` to workspace 28",17,null],[12,"moveto_workspace29","","Move focused `View` to workspace 29",17,null],[12,"moveto_workspace30","","Move focused `View` to workspace 30",17,null],[12,"moveto_workspace31","","Move focused `View` to workspace 31",17,null],[12,"moveto_workspace32","","Move focused `View` to workspace 32",17,null],[3,"ActiveWorkspace","","Key for receiving the currently active workspace's number and name from any `Output`s `Store`.",null,null],[3,"ViewWorkspace","","Key for receiving the currently workspace's number and name of any `View`s `Store`.",null,null],[0,"modes","","Collection of different `Mode`s",null,null],[3,"Combined","fireplace_lib::handlers::workspaces::modes","A `Mode` that splits `View` by given filter rules onto two given `Mode`s",null,null],[3,"CombinedConfig","","Configuration for `Combined`",null,null],[12,"top","","Configuration for the upper `Mode`",18,null],[12,"bottom","","Configuration for the lower `Mode`",18,null],[12,"predicate","","`Predicate` that decides if a new `View` shall be assigned to the upper `Mode` (if it matches) or not.",18,null],[12,"keys","","Key configuration",18,null],[3,"CombinedKeyPatterns","","`KeyPattern`s toggling modes",null,null],[12,"toggle","","Toggle the current `Mode` of a `View`",19,null],[3,"Floating","","A `Mode` that does traditional `View` management.",null,null],[3,"FloatingConfig","","Configuration for `Floating`",null,null],[3,"SwitchKeyPatterns","","`KeyPattern`s switching modes",null,null],[12,"switch_prev","","Switch to the previous mode",20,null],[12,"switch_next","","Switch to the next mode",20,null],[3,"Switch","","A `Mode` that lets you conviniently switch between different `Mode`s",null,null],[3,"SwitchConfig","","Configuration for `Switch`",null,null],[12,"modes","","Configuration of switchable `Mode`s",21,null],[12,"keys","","Key configuration",21,null],[3,"Fullscreen","","A `Mode` that lets you pull one `View` into fullscreen operation while letting another wrapped `Mode` handle the rest",null,null],[3,"FullscreenConfig","","Configuration of `Fullscreen`",null,null],[12,"mode","","Configuration of the wrapped `Mode`",22,null],[12,"keys","","Key configuration",22,null],[3,"FullscreenKeyPatterns","","`KeyPattern`s toggling fullscreen",null,null],[12,"toggle","","Toggle fullscreen operation for the currently focused `View`",23,null],[4,"CombinedPredicate","","A `Predicate` may filter given `Views`",null,null],[13,"Not","","Negates a given `Predicate`",24,null],[13,"Any","","Matches if any given `Predicate` matches",24,null],[13,"All","","Matches if all given `Predicate`s are matching",24,null],[13,"Type","","Matches if the given `ViewType` is a subset of the `View`'s `ViewType`",24,null],[13,"Title","","Matches if the given String matches the `View`'s title",24,null],[13,"Class","","Matches if the given String matches the `View`'s class",24,null],[13,"Instance","","Matches if the given String matches the `View`'s instance",24,null],[13,"AppId","","Matches if the given String matches the `View`'s app id",24,null],[4,"AnyMode","","Enumeration of all possible `Mode`s, makes storing any mode much easier",null,null],[13,"Bsp","","Bsp `Mode`",25,null],[13,"Floating","","Floating `Mode`",25,null],[13,"Combined","","Combined `Mode`",25,null],[13,"Switch","","Switch `Mode`",25,null],[13,"Fullscreen","","Fullscreen `Mode`",25,null],[4,"AnyModeConfig","","Configuration for `AnyMode`",null,null],[13,"Bsp","","Configuration for Bsp `Mode`",26,null],[13,"Floating","","Configuration for Floating `Mode`",26,null],[13,"Combined","","Configuration for Combined `Mode`",26,null],[13,"Switch","","Configuration for Switch `Mode`",26,null],[13,"Fullscreen","","Configuration for Fullscreen `Mode`",26,null],[0,"bsp","","i3-like **B**inary **S**plit  **P**artitioning `Mode` and corresponding handlers and types",null,null],[3,"IndicatorConfig","fireplace_lib::handlers::workspaces::modes::bsp","Configuration for `IndicatorsHandler`",null,null],[12,"width","","Thicknes of the indicator borders in screen points",27,null],[3,"IndicatorsHandler","","A handler used to display border for indication of focus around `View`s",null,null],[3,"BSP","","A tiling `Mode` that organises `View`s in a binary tree structure and displays them by deviding the available space",null,null],[3,"BSPConfig","","Configuration for `BSP`",null,null],[12,"starting_orientation","","Which `Orientation` to split by the `Mode` shall start with",28,null],[12,"keys","","Key configuration",28,null],[12,"ui","","Supporting Ui configuration, if desired",28,null],[3,"Ui","","`BSP` supporting Ui configuration",null,null],[12,"indicator","","`View` indicators configuration",29,null],[3,"KeyPatterns","","`KeyPatterns` reorganising the internal tree",null,null],[12,"focus_left","","Switch focus to the closest container on the left",30,null],[12,"focus_right","","Switch focus to the closest container on the right",30,null],[12,"focus_up","","Switch focus to the closest container above",30,null],[12,"focus_down","","Switch focus to the closest container below",30,null],[12,"move_left","","Move the current container one tile left",30,null],[12,"move_right","","Move the current container one tile right",30,null],[12,"move_up","","Move the current container one tile up",30,null],[12,"move_down","","Move the current container one tile down",30,null],[12,"resize_left","","Resize the current container by moving it's border leftwards",30,null],[12,"resize_right","","Resize the current container by moving it's border rightwards",30,null],[12,"resize_up","","Resize the current container by moving it's border upwards",30,null],[12,"resize_down","","Resize the current container by moving it's border downwards",30,null],[12,"toggle_orientation","","Toggle the orientation used to split the current container on a new `View` between `Horizontal` and `Vertical`",30,null],[12,"horizontal_orientation","","Switch the orientation used to split the current container on a new `View` to `Horizontal`",30,null],[12,"vertical_orientation","","Switch the orientation used to split the current container on a new `View` to `Vertical`",30,null],[4,"Orientation","","",null,null],[13,"Horizontal","","",31,null],[13,"Vertical","","",31,null],[11,"default","","",32,{"inputs":[],"output":{"name":"indicatorshandler"}}],[11,"new","","Initialize a new `IndicatorsHandler`",32,{"inputs":[{"name":"indicatorconfig"}],"output":{"name":"indicatorshandler"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"indicatorconfig"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"indicatorconfig"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"indicatorconfig"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"indicatorconfig"}}],[11,"output_context_created","","",32,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","",32,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",32,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[6,"BSPWrap","","Convinient type alias for a wrapped `BSP`",null,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"bspconfig"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bspconfig"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"bspconfig"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"bspconfig"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"ui"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"keypatterns"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"keypatterns"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"serialize","","",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"orientation"}}],[11,"not","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"child","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","fireplace_lib::callback","",0,{"inputs":[{"name":"bspconfig"}],"output":{"name":"self"}}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"view_created","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_move_to_output","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"output"},{"name":"output"}],"output":null}],[11,"output_resolution","","",0,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"keyboard_key","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"fmt","fireplace_lib::handlers::workspaces::modes","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"combinedconfig"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"combinedconfig"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"combinedconfig"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"matches","","Returns true if a given `View` matches this `Predicate`",24,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"keypatterns"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"keypatterns"}}],[11,"first_child","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"second_child","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","fireplace_lib::callback","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"view_created","","",1,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",1,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_request_geometry","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"view_render_pre","","",1,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","",1,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_properties_updated","","",1,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"}],"output":null}],[11,"keyboard_key","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"pointer_button","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_scroll","","",1,null],[11,"pointer_motion","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"touch","","",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"touchtype"},{"name":"i32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"fmt","fireplace_lib::handlers::workspaces::modes","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"floatingconfig"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"floatingconfig"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"floatingconfig"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"view_created","","",36,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_focus","","",36,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_destroyed","","",36,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_request_geometry","","",36,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","",36,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","",36,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","",36,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"output_resolution","","",36,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"pointer_button","","",36,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_motion","","",36,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"floatingconfig"}],"output":{"name":"floating"}}],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"switchconfig"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"switchconfig"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"switchconfig"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"keypatterns"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"keypatterns"}}],[11,"child","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","fireplace_lib::callback","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"view_created","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"output_focus","","",0,{"inputs":[{"name":"self"},{"name":"output"},{"name":"bool"}],"output":null}],[11,"output_resolution","","",0,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_context_created","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"keyboard_key","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"compositor_ready","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"compositor_terminate","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","fireplace_lib::handlers::workspaces::modes","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenconfig"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"fullscreenconfig"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"fullscreenconfig"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"keypatterns"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"keypatterns"}}],[11,"child","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","fireplace_lib::callback","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"keyboard_key","","",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"view_request_state","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[6,"CombinedWrap","fireplace_lib::handlers::workspaces::modes","Convinient type alias for a wrapped `Combined`",null,null],[6,"SwitchWrap","","Convinient type alias for a wrapped `Switch`",null,null],[6,"FullscreenWrap","","Convinient type alias for a wrapped `Fullscreen`",null,null],[6,"AnyModeWrap","","Convinient type alias for a wrapped `AnyMode`",null,null],[8,"Mode","","Common interface for `Mode`s mostly used by workspaces",null,null],[16,"Arguments","","Arguments to the `new` constructor",39,null],[10,"new","","Common constructor for every `Mode`",39,null],[10,"len","","Number of `View`s managed",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","If this `Mode` currently manages no `View`s",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"anymodeconfig"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"anymodeconfig"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"anymodeconfig"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"anymodeconfig"}}],[11,"child","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","fireplace_lib::callback","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_created","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_focus","","",0,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"default","fireplace_lib::handlers::workspaces","",15,{"inputs":[],"output":{"name":"workspacesconfig"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"workspaceconfig"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"keypatterns"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"keypatterns"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"keypatterns"}}],[11,"num","","Returns the currently active workspace's number",40,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"name","","Returns the currently active workspace's name",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num","","Returns the currently active workspace's number",41,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"name","","Returns the currently active workspace's name",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Initialize a new `WorkspaceHandler` with a given `WorkspaceHandler`",42,{"inputs":[{"name":"workspacesconfig"}],"output":{"name":"workspacehandler"}}],[11,"moveto_workspace","","Move the given `View` to the `Workspace` of the given `index`",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"u8"}],"output":null}],[11,"active_spaces","","Returns an array of currently active `Workspace` indicies",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"switch_workspace","","Switch the currently focused `Output` to the workspace of the given `index`",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"output_created","","",42,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_destroyed","","",42,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_focus","","",42,{"inputs":[{"name":"self"},{"name":"output"},{"name":"bool"}],"output":null}],[11,"output_resolution","","",42,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","",42,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",42,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_context_created","","",42,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",42,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","",42,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","",42,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_move_to_output","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"output"},{"name":"output"}],"output":null}],[11,"view_request_geometry","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"view_render_pre","","",42,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","",42,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_properties_updated","","",42,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"}],"output":null}],[11,"keyboard_key","","",42,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"pointer_button","","",42,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_scroll","","",42,null],[11,"pointer_motion","","",42,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"touch","","",42,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"touchtype"},{"name":"i32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"compositor_ready","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"compositor_terminate","","",42,{"inputs":[{"name":"self"}],"output":null}],[0,"geometry","fireplace_lib::handlers","Handlers related to `Output` and `View` geometry",null,null],[3,"GapsConfig","fireplace_lib::handlers::geometry","Configuration for the `GapsHandler`",null,null],[12,"width","","Width in screen points of the gaps created by the handler",43,null],[3,"GapsHandler","","Handler to make some gaps around `View`s",null,null],[3,"UsableScreenGeometry","","Key for receiving the usable screen geometry, that is the part of the screen not used by UI elements, from an `Output`s `Store`.",null,null],[3,"UsableViewGeometry","","Key for receiving the usable view geometry, that is the part of and area mapped to a `View` not used by UI elements around it, from a `View`s `Store`.",null,null],[3,"ViewScissor","","Value to express that borders of a View shall be shortened",null,null],[12,"up","","Amount of points the upper border should be moved inside the geometry used",44,null],[12,"right","","Amount of points the right border should be moved inside the geometry used",44,null],[12,"down","","Amount of points the lower border should be moved inside the geometry used",44,null],[12,"left","","Amount of points the left border should be moved inside the geometry used",44,null],[3,"InitialViewGeometry","","Key for receiving the initial view geometry, that is the size and origin the `View` has requested at launch, from a `View`s `Sotre`.",null,null],[3,"GeometryHandler","","Handler that initializes default `UsableScreenGeometry` and `UsableViewGeometry` values for created `View`s and `Output`s",null,null],[11,"default","","",43,{"inputs":[],"output":{"name":"gapsconfig"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"gapshandler"}}],[11,"new","","Initialize a new `GapsHandler` with a given `GapsConfig`",45,{"inputs":[{"name":"gapsconfig"}],"output":{"name":"gapshandler"}}],[11,"view_created","","",45,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"geometryhandler"}}],[11,"new","","Initialize a new `GeometryHandler`",46,{"inputs":[],"output":{"name":"geometryhandler"}}],[11,"output_created","","",46,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_resolution","","",46,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"view_created","","",46,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"default","fireplace_lib::handlers","",8,{"inputs":[],"output":{"name":"outputconfig"}}],[11,"new","","Initialize a new `OutputConfigHandler`",47,{"inputs":[{"name":"hashmap"}],"output":{"name":"outputconfighandler"}}],[11,"output_created","","",47,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[0,"render","","Collection of handlers related to render/draw directly inside of the compositor.",null,null],[3,"GLInit","fireplace_lib::handlers::render","Handler to load GL functions via `egl` at runtime for all `Output` contexts to make GL calls possible.",null,null],[3,"GraphicsRenderer","","Handler to draw using pistons `graphics` API for 2D drawing inside the compositor.",null,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"child","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output_context_created","fireplace_lib::callback","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"new","fireplace_lib::handlers::render","Create a new GLInit handler. Exposes some unstable APIs.",48,{"inputs":[{"name":"i"}],"output":{"name":"glinit"}}],[11,"child","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output_context_created","fireplace_lib::callback","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",0,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_render_pre","","",0,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",0,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"view_render_pre","","",0,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","",0,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"new","fireplace_lib::handlers::render","Initialize a new `GraphicsRenderer`",49,{"inputs":[{"name":"i"}],"output":{"name":"glinit"}}],[0,"conrod","","Types to use the `conrod` crate for UI rendering directly inside the compositor.",null,null],[3,"ConrodInstance","fireplace_lib::handlers::render::conrod","Instance to render `ConrodProvider`s",null,null],[12,"ui","","conrod `Ui` used for rendering",50,null],[12,"text_tex","","GL ES `Texture` used for caching rendered glyphs",50,null],[12,"text_cache","","Glyph cache for `conrod` rendering",50,null],[12,"image_map","","Map loading images as `Texture`s to be used by `conrod` via their `Id`s",50,null],[3,"ConrodRenderer","","Renderer created by `ConrodHandler`",null,null],[12,"foreground","","Foreground instance. Renders behind any `View`.",51,null],[12,"background","","Background instance. Renders before any `View`.",51,null],[3,"ConrodHandler","","Handler that initializes a `ConrodRenderer` for every `Output`.",null,null],[11,"new","","Initializes a new `ConrodInstance`",50,{"inputs":[{"name":"dimensions"},{"name":"logger"}],"output":{"name":"conrodinstance"}}],[11,"register","","Register a new `ConrodProvider` to be rendered",50,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"image_map","","Obtain a reference to the `ImageMap` to store images used by `Widget`s",50,{"inputs":[{"name":"self"}],"output":{"name":"imagemap"}}],[11,"render","","Render on a given `RenderOutput`",50,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"new","","Initialize a new `ConrodRenderer` for given screen `Dimensions`",51,{"inputs":[{"name":"dimensions"}],"output":{"name":"conrodrenderer"}}],[11,"output_resolution","","",51,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","",51,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",51,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[0,"provider","","Providers for `Widget`s to be rendered by `ConrodInstance`",null,null],[0,"background","fireplace_lib::handlers::render::conrod::provider","Types to render a background via `conrod` on the compositor",null,null],[3,"BackgroundHandler","fireplace_lib::handlers::render::conrod::provider::background","Handler that initializes a `Background` provider for every created `Output`",null,null],[3,"Background","","A provider rendering a desktop background",null,null],[4,"BackgroundConfig","","Configuration for a `BackgroundHandler` describing what kind of background shall be set.",null,null],[13,"Color","","A solid color as backgound",52,null],[13,"Image","","An image rendered as background",52,null],[11,"default","","",53,{"inputs":[],"output":{"name":"backgroundhandler"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"backgroundconfig"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"backgroundconfig"}}],[11,"new_colored","","Initialize a new `BackgroundHandler` from a solid color",53,{"inputs":[{"name":"conrodcolor"}],"output":{"name":"backgroundhandler"}}],[11,"new_from_path","","Initialize a new `BackgroundHandler` from an image file",53,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[11,"new_from_image","","Initialize a new `BackgroundHandler` from an already loaded `RgbaImage`",53,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"backgroundhandler"}}],[11,"new_from_dyn_image","","Initialize a new `BackgroundHandler` from any already loaded image",53,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"backgroundhandler"}}],[11,"new","","Initialize a new `BackgroundHandler` from a given configuration",53,{"inputs":[{"name":"backgroundconfig"}],"output":{"name":"backgroundhandler"}}],[11,"output_context_created","","",53,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"render","","",54,{"inputs":[{"name":"self"},{"name":"output"},{"name":"uicell"}],"output":null}],[0,"statusbar","fireplace_lib::handlers::render::conrod::provider","Types to render a statusbar via `conrod` on the compositor",null,null],[3,"Time","fireplace_lib::handlers::render::conrod::provider::statusbar","`StatusbarItem` for displaying the current time",null,null],[3,"TimeConfig","","Configuration for `Time`",null,null],[12,"font","","Font to be used for the rendered time",55,null],[12,"format","","Format of the rendered time. See chrono",55,null],[12,"alignment","","Alignment of the time on the statusbar",55,null],[12,"color","","Text color of the rendered time",55,null],[12,"margin","","Margin to other `StatusbarItem`s",55,null],[3,"WorkspaceIndicator","","`StatusbarItem` for displaying the currently active workspace",null,null],[3,"WorkspaceIndicatorConfig","","Configuration for `WorkspaceIndicator`",null,null],[12,"font","","Font to be used for the rendered workspace number and name",56,null],[12,"alignment","","Alignment of the indicator on the statusbar",56,null],[12,"color","","Text color of the rendered workspace number and name",56,null],[12,"margin","","Margin to other `StatusbarItem`s",56,null],[3,"StatusbarHandler","","Handler that initializes a `Statusbar` provider for every created `Output`",null,null],[3,"StatusbarConfig","","Configuration for a `StatusbarHandler` describing how the statubar shall look and what it shall display",null,null],[12,"height","","Height of the statusbar",57,null],[12,"color","","Background color of the statusbar",57,null],[12,"location","","Location of the statusbar",57,null],[12,"time","","Configuration for the `Time` `StatusbarItem` if desired",57,null],[12,"workspace","","Configuration for the `WorkspaceIndicator` `StatusbarItem` if desired",57,null],[3,"Statusbar","","A provider rendering a statusbar",null,null],[4,"Location","","",null,null],[13,"Top","","",58,null],[13,"Buttom","","",58,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"timeconfig"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"timeconfig"}}],[11,"new","","Initialize a new `Workspace` indicator, usually done by a `StatusbarHandler`",59,{"inputs":[{"name":"output"},{"name":"conrodinstance"},{"name":"timeconfig"}],"output":{"name":"self"}}],[11,"positionable","","",59,null],[11,"render","","",59,{"inputs":[{"name":"self"},{"name":"output"},{"name":"f64"},{"name":"uicell"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"workspaceindicatorconfig"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"workspaceindicatorconfig"}}],[11,"new","","Initialize a new `Workspace` indicator, usually done by a `StatusbarHandler`",60,{"inputs":[{"name":"output"},{"name":"conrodinstance"},{"name":"workspaceindicatorconfig"}],"output":{"name":"self"}}],[11,"positionable","","",60,null],[11,"render","","",60,{"inputs":[{"name":"self"},{"name":"output"},{"name":"f64"},{"name":"uicell"}],"output":null}],[8,"StatusbarItem","","Interface for a statusbar item, that might be rendered on the statusbar",null,null],[10,"positionable","","Returns a `Canvas` with an `Id`, that shall be positioned on the statusbar according to `Justify`, so the item may be rendered onto of the `Canvas` without obstructing other `StatusbarItem`s",61,null],[10,"render","","Renders the item using `ui` with the given `height` on top of the previously via `positionable` returned `Canvas`",61,{"inputs":[{"name":"self"},{"name":"output"},{"name":"f64"},{"name":"uicell"}],"output":null}],[11,"default","","",57,{"inputs":[],"output":{"name":"statusbarconfig"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"serialize","","",58,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",58,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"location"}}],[11,"new","","Initialize a new `StatusbarHandler`",62,{"inputs":[{"name":"statusbarconfig"}],"output":{"name":"statusbarhandler"}}],[11,"output_context_created","","",62,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_created","","",62,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_resolution","","",62,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"render","","",63,{"inputs":[{"name":"self"},{"name":"output"},{"name":"uicell"}],"output":null}],[8,"ConrodProvider","fireplace_lib::handlers::render::conrod::provider","An Interface for dealing with types, that want to render on a `ConrodInstance`",null,null],[10,"render","","Render all `Widget`s managed by this provider via the provided `Cell` with the given context by `output`.",64,{"inputs":[{"name":"self"},{"name":"output"},{"name":"uicell"}],"output":null}],[0,"deserializer","fireplace_lib::handlers::render::conrod","Collection of `Deserialize` implementations for `conrod` and related data types",null,null],[3,"Align","fireplace_lib::handlers::render::conrod::deserializer","Wrapper around `conrod::Align` that implements `Deserialize`",null,null],[12,"0","","",65,null],[3,"Color","","Wrapper around `conrod::color::Color` that implements `Deserialize`",null,null],[12,"0","","",66,null],[3,"Font","","Structure describing a `Font`",null,null],[12,"family","","Font family if desired",67,null],[12,"monospace","","If the selected font shall be monospaced",67,null],[12,"italic","","If the selected font shall be italic",67,null],[12,"oblique","","If the selected font shall be oblique",67,null],[12,"bold","","If the selected font shall be bold",67,null],[3,"Image","","Wrapper around `image::RgbaImage` that implements `Deserialize`",null,null],[12,"0","","",68,null],[3,"Justify","","Wrapper around `conrod::Justify` that implements `Deserialize`",null,null],[12,"0","","",69,null],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"deref","","",68,null],[11,"deserialize","","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"deref","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"color"}}],[11,"deserialize","","",66,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"deref","","",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"align"}}],[11,"deserialize","","",65,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"font"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"property","","Return a `FontProperty` for loading the described `Font`",67,{"inputs":[{"name":"self"}],"output":{"name":"fontproperty"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"justify"}}],[11,"deref","","",69,null],[11,"default","","",69,{"inputs":[],"output":{"name":"justify"}}],[11,"deserialize","","",69,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","fireplace_lib::handlers::render::conrod","Initialize a new `ConrodHandler`",70,{"inputs":[],"output":{"name":"glinit"}}],[11,"output_context_created","","",70,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","",70,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_resolution","","",70,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","",70,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","",70,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[8,"StoreKey","fireplace_lib::handlers","Implement to store a certain type in the `Store`.",null,null],[16,"Value","","`Value` is the type to be stored, while the type of the key may be used to add, get and remove the `Value` type from the `Store`;",71,null],[8,"Store","","Implemented by any `View` and `Output` to store arbitrary data.",null,null],[10,"insert","","Insert a value into the `Store`.",72,null],[10,"contains","","Check if the `Store` holds any value for the key `T`.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get","","Get a reference-counted and locked reference to the stored value",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"remove","","Try to remove and receive the currently stored value",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"enum_str","fireplace_lib","Wrapping an enum in `enum_str` will implement `De/Serialize`.",null,null]],"paths":[[3,"Wrapper"],[3,"Split"],[3,"VecCallback"],[8,"AsSplit"],[8,"AsVecCallback"],[8,"AsWrapper"],[8,"IntoCallback"],[3,"FocusConfig"],[3,"OutputConfig"],[3,"StoreHandler"],[3,"FocusHandler"],[3,"KeyPattern"],[8,"KeyHandler"],[3,"KeyboardHandler"],[3,"PointerHandler"],[3,"WorkspacesConfig"],[3,"WorkspaceConfig"],[3,"KeyPatterns"],[3,"CombinedConfig"],[3,"CombinedKeyPatterns"],[3,"SwitchKeyPatterns"],[3,"SwitchConfig"],[3,"FullscreenConfig"],[3,"FullscreenKeyPatterns"],[4,"CombinedPredicate"],[4,"AnyMode"],[4,"AnyModeConfig"],[3,"IndicatorConfig"],[3,"BSPConfig"],[3,"Ui"],[3,"KeyPatterns"],[4,"Orientation"],[3,"IndicatorsHandler"],[3,"BSP"],[3,"Combined"],[3,"FloatingConfig"],[3,"Floating"],[3,"Switch"],[3,"Fullscreen"],[8,"Mode"],[3,"ActiveWorkspace"],[3,"ViewWorkspace"],[3,"WorkspaceHandler"],[3,"GapsConfig"],[3,"ViewScissor"],[3,"GapsHandler"],[3,"GeometryHandler"],[3,"OutputConfigHandler"],[3,"GLInit"],[3,"GraphicsRenderer"],[3,"ConrodInstance"],[3,"ConrodRenderer"],[4,"BackgroundConfig"],[3,"BackgroundHandler"],[3,"Background"],[3,"TimeConfig"],[3,"WorkspaceIndicatorConfig"],[3,"StatusbarConfig"],[4,"Location"],[3,"Time"],[3,"WorkspaceIndicator"],[8,"StatusbarItem"],[3,"StatusbarHandler"],[3,"Statusbar"],[8,"ConrodProvider"],[3,"Align"],[3,"Color"],[3,"Font"],[3,"Image"],[3,"Justify"],[3,"ConrodHandler"],[8,"StoreKey"],[8,"Store"]]};
searchIndex["fixedbitset"] = {"doc":"**FixedBitSet** is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","**FixedBitSet** is a simple fixed size set of bits that can be enabled (1 / **true**) or disabled (0 / **false**).",null,null],[8,"IndexRange","","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"fixedbitset"}}],[11,"with_capacity","","Create a new **FixedBitSet** with a specific number of bits, all initially clear.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"grow","","Grow capacity to **bits**, all new bits initialized to zero",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","Return the length of the **FixedBitSet** in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","Return **true** if the bit is enabled in the **FixedBitSet**, **false** otherwise.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clear","","Clear all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Enable `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"put","","Enable `bit`, and return its previous value.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","**Panics** if **bit** is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"copy_bit","","Copies boolean value from specified bit to the specified bit.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"count_ones","","Count the number of set bits in the given bit range.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"as_slice","","View the bitset as a slice of `u32` blocks",1,null],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last will cause `contains` to return potentially incorrect results for bits past the bitlength.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"IndexRange"],[3,"FixedBitSet"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Powf","","Floating number power.",null,null],[10,"powf","","Returns floating power of the number.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to ```value * (π / 180)```.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to ```value * (180 / π)```.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",6,{"inputs":[],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Returns inverse sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Returns inverse cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Returns inverse tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Returns the four quadrant arctangent of self (y) and other (x).",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Returns hyperbolic sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Returns hyperbolic cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Returns hyperbolic tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Returns inverse hyperbolic sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Returns inverse hyperbolic cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Returns inverse hyperbolic tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",10,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",10,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",10,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[10,"from_u32","","from a u32",10,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_i32","","from a i32",10,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Powf"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["font_loader"] = {"doc":"Font-Loader A font loading utility written in and for rust.","items":[[0,"system_fonts","font_loader","Font loading utilities for installed system fonts",null,null],[3,"FontProperty","font_loader::system_fonts","The platform specific font properties",null,null],[3,"FontPropertyBuilder","","Builder for FontProperty",null,null],[5,"get","","Get the binary data and index of a specific font Note that only truetype fonts are supported",null,{"inputs":[{"name":"fontproperty"}],"output":{"name":"option"}}],[5,"query_all","","Query the names of all fonts installed in the system Note that only truetype fonts are supported",null,{"inputs":[],"output":{"name":"vec"}}],[5,"query_specific","","Query the names of specifc fonts installed in the system Note that only truetype fonts are supported",null,{"inputs":[{"name":"fontproperty"}],"output":{"name":"vec"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"fontpropertybuilder"}}],[11,"italic","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fontpropertybuilder"}}],[11,"oblique","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fontpropertybuilder"}}],[11,"bold","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fontpropertybuilder"}}],[11,"monospace","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fontpropertybuilder"}}],[11,"family","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fontpropertybuilder"}}],[11,"build","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fontproperty"}}]],"paths":[[3,"FontPropertyBuilder"]]};
searchIndex["fontconfig_sys"] = {"doc":"","items":[[3,"Struct__FcMatrix","fontconfig_sys","",null,null],[12,"xx","","",0,null],[12,"xy","","",0,null],[12,"yx","","",0,null],[12,"yy","","",0,null],[3,"Struct__FcObjectType","","",null,null],[12,"object","","",1,null],[12,"_type","","",1,null],[3,"Struct__FcConstant","","",null,null],[12,"name","","",2,null],[12,"object","","",2,null],[12,"value","","",2,null],[3,"Struct__FcValue","","",null,null],[12,"_type","","",3,null],[12,"u","","",3,null],[3,"Union_Unnamed1","","",null,null],[12,"_bindgen_data_","","",4,null],[3,"Struct__FcFontSet","","",null,null],[12,"nfont","","",5,null],[12,"sfont","","",5,null],[12,"fonts","","",5,null],[3,"Struct__FcObjectSet","","",null,null],[12,"nobject","","",6,null],[12,"sobject","","",6,null],[12,"objects","","",6,null],[4,"Struct__FcCharSet","","",null,null],[4,"Struct__FcPattern","","",null,null],[4,"Struct__FcLangSet","","",null,null],[4,"Struct__FcAtomic","","",null,null],[4,"Struct__FcConfig","","",null,null],[4,"Struct__FcGlobalCache","","",null,null],[4,"Struct__FcBlanks","","",null,null],[4,"Struct__FcStrList","","",null,null],[4,"Struct__FcStrSet","","",null,null],[4,"Struct__FcCache","","",null,null],[5,"FcBlanksCreate","","",null,null],[5,"FcBlanksDestroy","","",null,null],[5,"FcBlanksAdd","","",null,null],[5,"FcBlanksIsMember","","",null,null],[5,"FcCacheDir","","",null,null],[5,"FcCacheCopySet","","",null,null],[5,"FcCacheSubdir","","",null,null],[5,"FcCacheNumSubdir","","",null,null],[5,"FcCacheNumFont","","",null,null],[5,"FcDirCacheUnlink","","",null,null],[5,"FcDirCacheValid","","",null,null],[5,"FcDirCacheClean","","",null,null],[5,"FcCacheCreateTagFile","","",null,null],[5,"FcConfigHome","","",null,null],[5,"FcConfigEnableHome","","",null,null],[5,"FcConfigFilename","","",null,null],[5,"FcConfigCreate","","",null,null],[5,"FcConfigReference","","",null,null],[5,"FcConfigDestroy","","",null,null],[5,"FcConfigSetCurrent","","",null,null],[5,"FcConfigGetCurrent","","",null,null],[5,"FcConfigUptoDate","","",null,null],[5,"FcConfigBuildFonts","","",null,null],[5,"FcConfigGetFontDirs","","",null,null],[5,"FcConfigGetConfigDirs","","",null,null],[5,"FcConfigGetConfigFiles","","",null,null],[5,"FcConfigGetCache","","",null,null],[5,"FcConfigGetBlanks","","",null,null],[5,"FcConfigGetCacheDirs","","",null,null],[5,"FcConfigGetRescanInterval","","",null,null],[5,"FcConfigSetRescanInterval","","",null,null],[5,"FcConfigGetFonts","","",null,null],[5,"FcConfigAppFontAddFile","","",null,null],[5,"FcConfigAppFontAddDir","","",null,null],[5,"FcConfigAppFontClear","","",null,null],[5,"FcConfigSubstituteWithPat","","",null,null],[5,"FcConfigSubstitute","","",null,null],[5,"FcConfigGetSysRoot","","",null,null],[5,"FcConfigSetSysRoot","","",null,null],[5,"FcCharSetCreate","","",null,null],[5,"FcCharSetNew","","",null,null],[5,"FcCharSetDestroy","","",null,null],[5,"FcCharSetAddChar","","",null,null],[5,"FcCharSetDelChar","","",null,null],[5,"FcCharSetCopy","","",null,null],[5,"FcCharSetEqual","","",null,null],[5,"FcCharSetIntersect","","",null,null],[5,"FcCharSetUnion","","",null,null],[5,"FcCharSetSubtract","","",null,null],[5,"FcCharSetMerge","","",null,null],[5,"FcCharSetHasChar","","",null,null],[5,"FcCharSetCount","","",null,null],[5,"FcCharSetIntersectCount","","",null,null],[5,"FcCharSetSubtractCount","","",null,null],[5,"FcCharSetIsSubset","","",null,null],[5,"FcCharSetFirstPage","","",null,null],[5,"FcCharSetNextPage","","",null,null],[5,"FcCharSetCoverage","","",null,null],[5,"FcValuePrint","","",null,null],[5,"FcPatternPrint","","",null,null],[5,"FcFontSetPrint","","",null,null],[5,"FcGetDefaultLangs","","",null,null],[5,"FcDefaultSubstitute","","",null,null],[5,"FcFileIsDir","","",null,null],[5,"FcFileScan","","",null,null],[5,"FcDirScan","","",null,null],[5,"FcDirSave","","",null,null],[5,"FcDirCacheLoad","","",null,null],[5,"FcDirCacheRescan","","",null,null],[5,"FcDirCacheRead","","",null,null],[5,"FcDirCacheLoadFile","","",null,null],[5,"FcDirCacheUnload","","",null,null],[5,"FcFreeTypeQuery","","",null,null],[5,"FcFontSetCreate","","",null,null],[5,"FcFontSetDestroy","","",null,null],[5,"FcFontSetAdd","","",null,null],[5,"FcInitLoadConfig","","",null,null],[5,"FcInitLoadConfigAndFonts","","",null,null],[5,"FcInit","","",null,null],[5,"FcFini","","",null,null],[5,"FcGetVersion","","",null,null],[5,"FcInitReinitialize","","",null,null],[5,"FcInitBringUptoDate","","",null,null],[5,"FcGetLangs","","",null,null],[5,"FcLangNormalize","","",null,null],[5,"FcLangGetCharSet","","",null,null],[5,"FcLangSetCreate","","",null,null],[5,"FcLangSetDestroy","","",null,null],[5,"FcLangSetCopy","","",null,null],[5,"FcLangSetAdd","","",null,null],[5,"FcLangSetDel","","",null,null],[5,"FcLangSetHasLang","","",null,null],[5,"FcLangSetCompare","","",null,null],[5,"FcLangSetContains","","",null,null],[5,"FcLangSetEqual","","",null,null],[5,"FcLangSetHash","","",null,null],[5,"FcLangSetGetLangs","","",null,null],[5,"FcLangSetUnion","","",null,null],[5,"FcLangSetSubtract","","",null,null],[5,"FcObjectSetCreate","","",null,null],[5,"FcObjectSetAdd","","",null,null],[5,"FcObjectSetDestroy","","",null,null],[5,"FcObjectSetBuild","","",null,null],[5,"FcFontSetList","","",null,null],[5,"FcFontList","","",null,null],[5,"FcAtomicCreate","","",null,null],[5,"FcAtomicLock","","",null,null],[5,"FcAtomicNewFile","","",null,null],[5,"FcAtomicOrigFile","","",null,null],[5,"FcAtomicReplaceOrig","","",null,null],[5,"FcAtomicDeleteNew","","",null,null],[5,"FcAtomicUnlock","","",null,null],[5,"FcAtomicDestroy","","",null,null],[5,"FcFontSetMatch","","",null,null],[5,"FcFontMatch","","",null,null],[5,"FcFontRenderPrepare","","",null,null],[5,"FcFontSetSort","","",null,null],[5,"FcFontSort","","",null,null],[5,"FcFontSetSortDestroy","","",null,null],[5,"FcMatrixCopy","","",null,null],[5,"FcMatrixEqual","","",null,null],[5,"FcMatrixMultiply","","",null,null],[5,"FcMatrixRotate","","",null,null],[5,"FcMatrixScale","","",null,null],[5,"FcMatrixShear","","",null,null],[5,"FcNameRegisterObjectTypes","","",null,null],[5,"FcNameUnregisterObjectTypes","","",null,null],[5,"FcNameGetObjectType","","",null,null],[5,"FcNameRegisterConstants","","",null,null],[5,"FcNameUnregisterConstants","","",null,null],[5,"FcNameGetConstant","","",null,null],[5,"FcNameConstant","","",null,null],[5,"FcNameParse","","",null,null],[5,"FcNameUnparse","","",null,null],[5,"FcPatternCreate","","",null,null],[5,"FcPatternDuplicate","","",null,null],[5,"FcPatternReference","","",null,null],[5,"FcPatternFilter","","",null,null],[5,"FcValueDestroy","","",null,null],[5,"FcValueEqual","","",null,null],[5,"FcValueSave","","",null,null],[5,"FcPatternDestroy","","",null,null],[5,"FcPatternEqual","","",null,null],[5,"FcPatternEqualSubset","","",null,null],[5,"FcPatternHash","","",null,null],[5,"FcPatternAdd","","",null,null],[5,"FcPatternAddWeak","","",null,null],[5,"FcPatternGet","","",null,null],[5,"FcPatternDel","","",null,null],[5,"FcPatternRemove","","",null,null],[5,"FcPatternAddInteger","","",null,null],[5,"FcPatternAddDouble","","",null,null],[5,"FcPatternAddString","","",null,null],[5,"FcPatternAddMatrix","","",null,null],[5,"FcPatternAddCharSet","","",null,null],[5,"FcPatternAddBool","","",null,null],[5,"FcPatternAddLangSet","","",null,null],[5,"FcPatternGetInteger","","",null,null],[5,"FcPatternGetDouble","","",null,null],[5,"FcPatternGetString","","",null,null],[5,"FcPatternGetMatrix","","",null,null],[5,"FcPatternGetCharSet","","",null,null],[5,"FcPatternGetBool","","",null,null],[5,"FcPatternGetLangSet","","",null,null],[5,"FcPatternBuild","","",null,null],[5,"FcPatternFormat","","",null,null],[5,"FcStrCopy","","",null,null],[5,"FcStrCopyFilename","","",null,null],[5,"FcStrPlus","","",null,null],[5,"FcStrFree","","",null,null],[5,"FcStrDowncase","","",null,null],[5,"FcStrCmpIgnoreCase","","",null,null],[5,"FcStrCmp","","",null,null],[5,"FcStrStrIgnoreCase","","",null,null],[5,"FcStrStr","","",null,null],[5,"FcUtf8ToUcs4","","",null,null],[5,"FcUtf8Len","","",null,null],[5,"FcUcs4ToUtf8","","",null,null],[5,"FcUtf16ToUcs4","","",null,null],[5,"FcUtf16Len","","",null,null],[5,"FcStrDirname","","",null,null],[5,"FcStrBasename","","",null,null],[5,"FcStrSetCreate","","",null,null],[5,"FcStrSetMember","","",null,null],[5,"FcStrSetEqual","","",null,null],[5,"FcStrSetAdd","","",null,null],[5,"FcStrSetAddFilename","","",null,null],[5,"FcStrSetDel","","",null,null],[5,"FcStrSetDestroy","","",null,null],[5,"FcStrListCreate","","",null,null],[5,"FcStrListFirst","","",null,null],[5,"FcStrListNext","","",null,null],[5,"FcStrListDone","","",null,null],[5,"FcConfigParseAndLoad","","",null,null],[6,"FcChar8","","",null,null],[6,"FcChar16","","",null,null],[6,"FcChar32","","",null,null],[6,"FcBool","","",null,null],[6,"Enum__FcType","","",null,null],[6,"FcType","","",null,null],[6,"FcMatrix","","",null,null],[6,"FcCharSet","","",null,null],[6,"FcObjectType","","",null,null],[6,"FcConstant","","",null,null],[6,"Enum__FcResult","","",null,null],[6,"FcResult","","",null,null],[6,"FcPattern","","",null,null],[6,"FcLangSet","","",null,null],[6,"FcValue","","",null,null],[6,"FcFontSet","","",null,null],[6,"FcObjectSet","","",null,null],[6,"Enum__FcMatchKind","","",null,null],[6,"FcMatchKind","","",null,null],[6,"Enum__FcLangResult","","",null,null],[6,"FcLangResult","","",null,null],[6,"Enum__FcSetName","","",null,null],[6,"FcSetName","","",null,null],[6,"FcAtomic","","",null,null],[6,"Enum_Unnamed2","","",null,null],[6,"FcEndian","","",null,null],[6,"FcConfig","","",null,null],[6,"FcFileCache","","",null,null],[6,"FcBlanks","","",null,null],[6,"FcStrList","","",null,null],[6,"FcStrSet","","",null,null],[6,"FcCache","","",null,null],[17,"FcTypeUnknown","","",null,null],[17,"FcTypeVoid","","",null,null],[17,"FcTypeInteger","","",null,null],[17,"FcTypeDouble","","",null,null],[17,"FcTypeString","","",null,null],[17,"FcTypeBool","","",null,null],[17,"FcTypeMatrix","","",null,null],[17,"FcTypeCharSet","","",null,null],[17,"FcTypeFTFace","","",null,null],[17,"FcTypeLangSet","","",null,null],[17,"FcResultMatch","","",null,null],[17,"FcResultNoMatch","","",null,null],[17,"FcResultTypeMismatch","","",null,null],[17,"FcResultNoId","","",null,null],[17,"FcResultOutOfMemory","","",null,null],[17,"FcMatchPattern","","",null,null],[17,"FcMatchFont","","",null,null],[17,"FcMatchScan","","",null,null],[17,"FcLangEqual","","",null,null],[17,"FcLangDifferentCountry","","",null,null],[17,"FcLangDifferentTerritory","","",null,null],[17,"FcLangDifferentLang","","",null,null],[17,"FcSetSystem","","",null,null],[17,"FcSetApplication","","",null,null],[17,"FcEndianBig","","",null,null],[17,"FcEndianLittle","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"s","","",4,null],[11,"i","","",4,null],[11,"b","","",4,null],[11,"d","","",4,null],[11,"m","","",4,null],[11,"c","","",4,null],[11,"f","","",4,null],[11,"l","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"Struct__FcMatrix"],[3,"Struct__FcObjectType"],[3,"Struct__FcConstant"],[3,"Struct__FcValue"],[3,"Union_Unnamed1"],[3,"Struct__FcFontSet"],[3,"Struct__FcObjectSet"]]};
searchIndex["gif"] = {"doc":"GIF en- and decoding library ![Build Status](https://travis-ci.org/PistonDevelopers/image-gif.svg?branch=master)","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame. The returned frame does **not** any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"disposalmethod"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",8,{"inputs":[{"name":"self"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",7,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",1,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"self"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular pattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This currently only considers upper/lower case relationships between ASCII characters, but in future this might be extended to work with Unicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix) must be matched by a literal `/`, rather than by `*` or `?` or `[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`, or `[...]` will not match. This is useful because such files are conventionally considered hidden on Unix systems and it might be desirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in brackets. The resulting string will, when compiled into a `Pattern`, match the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matchoptions"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used when calling functions that do not take an explicit `MatchOptions` parameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["graphics"] = {"doc":"A library for 2D graphics that works with multiple back-ends.","items":[[8,"ImageSize","graphics","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",0,null],[11,"get_width","","Gets the image width.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[3,"Viewport","","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. ```[x, y, width height]``` where ```(x, y)``` is lower left corner.",1,null],[12,"draw_size","","The size of frame buffer in pixels.",1,null],[12,"window_size","","The size of window in points.",1,null],[5,"clear","","Clears the screen.",null,{"inputs":[{"name":"color"},{"name":"g"}],"output":null}],[5,"image","","Draws image.",null,null],[5,"ellipse","","Draws ellipse.",null,{"inputs":[{"name":"color"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"circle_arc","","Draws arc",null,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"scalar"},{"name":"scalar"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"rectangle","","Draws rectangle.",null,{"inputs":[{"name":"color"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"polygon","","Draws polygon.",null,{"inputs":[{"name":"color"},{"name":"polygon"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"line","","Draws line.",null,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"l"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"text","","Draws text.",null,{"inputs":[{"name":"color"},{"name":"fontsize"},{"name":"str"},{"name":"c"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"draw_state","","Graphics draw state.",null,null],[3,"DrawState","graphics::draw_state","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this rectangle (in screen space) will be written to as a result of rendering.",2,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",2,null],[12,"blend","","Blend function to use. If None, blending is disabled.",2,null],[4,"Blend","","The blend setting to use when drawing.",null,null],[13,"Alpha","","Alpha blending (allows semi-transparent pixels).",3,null],[13,"Add","","Additive blending.",3,null],[13,"Multiply","","Multiply color components.",3,null],[13,"Invert","","Invert colors when rendering a white shape.",3,null],[4,"Stencil","","Stencil buffer settings.",null,null],[13,"Clip","","Draw to stencil buffer.",4,null],[13,"Inside","","Draw pixels that have stencil value.",4,null],[13,"Outside","","Draw pixels that does not have stencil value.",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"drawstate"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"new_alpha","","Uses alpha blending.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255. This can be used for clipping.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255. Draws inside the shape defined by stencil buffer.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255. Draws outside the shape defined by stencil buffer.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"blend","","Sets blending.",2,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"stencil"}],"output":{"name":"bool"}}],[0,"character","graphics","A text character",null,null],[3,"Character","graphics::character","Holds rendered character data.",null,null],[12,"offset","","The offset of character.",5,null],[12,"size","","The size of character, including space.",5,null],[12,"texture","","The texture of the character.",5,null],[8,"CharacterCache","","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The textyre type associated with the character cache.",6,null],[10,"character","","Get reference to character.",6,{"inputs":[{"name":"self"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"character"}}],[11,"width","","Return the width for some given text.",6,{"inputs":[{"name":"self"},{"name":"fontsize"},{"name":"str"}],"output":{"name":"scalar"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"character"}}],[11,"left","","The left offset.",5,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top","","The top offset.",5,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"width","","Gets width of character, including space to the next one.",5,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"height","","Sets height of character, including space to the next one.",5,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[0,"context","graphics","Transformation context",null,null],[3,"Context","graphics::context","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",7,null],[12,"view","","View transformation.",7,null],[12,"transform","","Current transformation.",7,null],[12,"draw_state","","Current draw state settings.",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"new","","Creates a new drawing context.",7,{"inputs":[],"output":{"name":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",7,{"inputs":[{"name":"viewport"}],"output":{"name":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",7,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reset","","Moves the current transform to the default coordinate system.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"store_view","","Stores the current transform as new view.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"get_view_size","","Computes the current view size.",7,{"inputs":[{"name":"self"}],"output":{"name":"vec2d"}}],[0,"color","graphics","Helper methods for colors",null,null],[5,"grey","graphics::color","Returns a grey color",null,{"inputs":[{"name":"colorcomponent"}],"output":{"name":"color"}}],[5,"alpha","","Returns a semi-transparent white color",null,{"inputs":[{"name":"colorcomponent"}],"output":{"name":"color"}}],[5,"hex","","Converts from hexadecimal color format",null,{"inputs":[{"name":"str"}],"output":{"name":"color"}}],[5,"gamma_srgb_to_linear","","Converts gamma (brightness) from sRGB to linear color space.",null,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[5,"gamma_linear_to_srgb","","Converts gamma (brightness) of a color from linear color space to sRGB.",null,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[17,"WHITE","","White color.",null,null],[17,"BLACK","","Black color.",null,null],[17,"TRANSPARENT","","Transparent color.",null,null],[0,"polygon","graphics","Draw polygon",null,null],[3,"Polygon","graphics::polygon","A polygon",null,null],[12,"color","","The color of the polygon",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"new","","Creates new polygon",8,{"inputs":[{"name":"color"}],"output":{"name":"polygon"}}],[11,"color","","Sets color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"draw","","Draws polygon using the default method.",8,{"inputs":[{"name":"self"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws polygon using triangulation.",8,{"inputs":[{"name":"self"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tween_lerp","","Draws tweened polygon with linear interpolation, using default method.",8,{"inputs":[{"name":"self"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tween_lerp_tri","","Draws tweened polygon with linear interpolation, using triangulation.",8,{"inputs":[{"name":"self"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"line","graphics","Draw Line",null,null],[3,"Line","graphics::line","A colored line with a default border radius",null,null],[12,"color","","The line color",9,null],[12,"radius","","The line radius",9,null],[12,"shape","","The line shape",9,null],[4,"Shape","","The shape of the line",null,null],[13,"Square","","Square edges",10,null],[13,"Round","","Round edges",10,null],[13,"Bevel","","Bevel edges",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"new","","Creates a new line",9,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"line"}}],[11,"new_round","","Creates a new line",9,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"line"}}],[11,"color","","Sets color.",9,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"radius","","Sets radius.",9,{"inputs":[{"name":"self"},{"name":"radius"}],"output":{"name":"self"}}],[11,"width","","Sets width.",9,{"inputs":[{"name":"self"},{"name":"width"}],"output":{"name":"self"}}],[11,"shape","","Sets shape.",9,{"inputs":[{"name":"self"},{"name":"shape"}],"output":{"name":"self"}}],[11,"draw","","Draws line using default method.",9,{"inputs":[{"name":"self"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws line using triangulation.",9,{"inputs":[{"name":"self"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_arrow","","Draws an arrow",9,{"inputs":[{"name":"self"},{"name":"l"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"circle_arc","graphics","Draw an arc",null,null],[3,"CircleArc","graphics::circle_arc","A curved line",null,null],[12,"color","","The arcs color",11,null],[12,"radius","","The radius of the arc (Thickness of the drawing, not the radius of the circle)",11,null],[12,"start","","The start of the arc in radians",11,null],[12,"end","","The end of the arc in radians",11,null],[12,"resolution","","The resolution for the arc.",11,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"circlearc"}}],[11,"new","","Creates a new arc",11,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"circlearc"}}],[11,"color","","Sets the arcs color.",11,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"radius","","Sets the radius of the arc (Thickness of the arc, not the radius of the circle it wraps)",11,{"inputs":[{"name":"self"},{"name":"radius"}],"output":{"name":"self"}}],[11,"start","","Sets the start of the arc (in radians).",11,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"end","","Sets the end of the arc (in radians).",11,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"resolution","","Sets the resolution of the arcs smoothness.",11,{"inputs":[{"name":"self"},{"name":"resolution"}],"output":{"name":"self"}}],[11,"draw","","Draws circle arc using default method.",11,{"inputs":[{"name":"self"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws circle arc using triangulation.",11,{"inputs":[{"name":"self"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"ellipse","graphics","Draw ellipse",null,null],[3,"Border","graphics::ellipse","Ellipse border",null,null],[12,"color","","The border color",12,null],[12,"radius","","The border radius",12,null],[3,"Ellipse","","An ellipse with filled color",null,null],[12,"color","","The ellipse color",13,null],[12,"border","","The ellipse border",13,null],[12,"resolution","","The resolution for the shape, 360 degrees.",13,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"ellipse"}}],[11,"new","","Creates a new ellipse",13,{"inputs":[{"name":"color"}],"output":{"name":"ellipse"}}],[11,"new_border","","Creates a new ellipse border",13,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"ellipse"}}],[11,"color","","Sets ellipse color.",13,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Sets ellipse border.",13,{"inputs":[{"name":"self"},{"name":"border"}],"output":{"name":"self"}}],[11,"maybe_border","","Sets optional ellipse border.",13,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"resolution","","Sets resolution of the ellipse smoothness.",13,{"inputs":[{"name":"self"},{"name":"resolution"}],"output":{"name":"self"}}],[11,"draw","","Draws ellipse using default method.",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws ellipse using triangulation.",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"rectangle","graphics","Draw rectangle",null,null],[3,"Border","graphics::rectangle","The border of the rectangle",null,null],[12,"color","","The color of the border",14,null],[12,"radius","","The radius of the border. The half-width of the line by which border is drawn.",14,null],[3,"Rectangle","","A filled rectangle",null,null],[12,"color","","The rectangle color",15,null],[12,"shape","","The roundness of the rectangle",15,null],[12,"border","","The border",15,null],[4,"Shape","","The shape of the rectangle corners",null,null],[13,"Square","","Square corners",16,null],[13,"Round","","Round corners, with resolution per corner.",16,null],[13,"Bevel","","Bevel corners",16,null],[5,"rectangle_by_corners","","Create `types::Rectangle` by the two opposit corners.",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[5,"centered","","Use x, y, half-width, half-height",null,{"inputs":[{"name":"rectangle"}],"output":{"name":"rectangle"}}],[5,"centered_square","","Create `types::Rectangle` for a square with a center in (`x`, `y`) and side `2 * radius`.",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[5,"square","","Create `types::Rectangle` for a square with a top-left corner in (`x`, `y`) and side `size`.",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"border"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"new","","Creates a new rectangle.",15,{"inputs":[{"name":"color"}],"output":{"name":"rectangle"}}],[11,"new_round","","Creates a new rectangle with rounded corners.",15,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"new_border","","Creates a new rectangle border.",15,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"new_round_border","","Creates a new rectangle border with rounded corners.",15,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"color","","Sets color.",15,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"shape","","Sets shape of the corners.",15,{"inputs":[{"name":"self"},{"name":"shape"}],"output":{"name":"self"}}],[11,"border","","Sets border properties.",15,{"inputs":[{"name":"self"},{"name":"border"}],"output":{"name":"self"}}],[11,"maybe_border","","Sets optional border.",15,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"draw","","Draws the rectangle using the default method.",15,{"inputs":[{"name":"self"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws the rectangle using triangulation.",15,{"inputs":[{"name":"self"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"image","graphics","Draw an image",null,null],[3,"Image","graphics::image","An image",null,null],[12,"color","","The color",17,null],[12,"rectangle","","The rectangle to draw image inside",17,null],[12,"source_rectangle","","The image source rectangle",17,null],[5,"draw_many","","Draws many images.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"new","","Creates a new image",17,{"inputs":[],"output":{"name":"image"}}],[11,"new_color","","Creates a new colored image",17,{"inputs":[{"name":"color"}],"output":{"name":"image"}}],[11,"color","","Sets color.",17,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"maybe_color","","Sets optional color.",17,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"rect","","Sets rectangle.",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"maybe_rect","","Sets optional rectangle.",17,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"src_rect","","Sets source rectangle.",17,{"inputs":[{"name":"self"},{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"maybe_src_rect","","Sets optional source rectangle.",17,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"draw","","Draws image using default method.",17,null],[11,"draw_tri","","Draws image using triangulation.",17,null],[0,"types","graphics","Contains type aliases used in this library",null,null],[6,"Area","graphics::types","The type used for area.",null,null],[6,"Color","","[red, green, blue, alpha]",null,null],[6,"ColorComponent","","The type used for color component.",null,null],[6,"Line","","[x1, y1, x2, y2]",null,null],[6,"SourceRectangle","","[x, y, w, h]",null,null],[6,"Polygon","","[p0, p1, ...]",null,null],[6,"Polygons","","A slice of polygons.",null,null],[6,"Radius","","The type used for radius.",null,null],[6,"Resolution","","The type used for resolution.",null,null],[6,"Ray","","[x, y, dir_x, dir_y]",null,null],[6,"Rectangle","","Rectangle dimensions: [x, y, w, h]",null,null],[6,"Triangle","","[x1, y1, x2, y2, x3, y3]",null,null],[6,"Width","","The type used for width.",null,null],[6,"FontSize","","The type used for font size.",null,null],[0,"modular_index","graphics","Helper functions for computing modular index safely.",null,null],[5,"offset","graphics::modular_index","Computes modular offset safely for indices.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"isize"}],"output":{"name":"usize"}}],[5,"previous","","Computes previous modular index safely.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"next","","Computes next modular index safely.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"text","graphics","Draw text",null,null],[3,"Text","graphics::text","Renders text",null,null],[12,"color","","The color",18,null],[12,"font_size","","The font size",18,null],[12,"round","","Whether or not the text's position should be rounded (to a signed distance field).",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"new","","Creates a new text with black color",18,{"inputs":[{"name":"fontsize"}],"output":{"name":"text"}}],[11,"new_color","","Creates a new colored text",18,{"inputs":[{"name":"color"},{"name":"fontsize"}],"output":{"name":"text"}}],[11,"round","","A builder method indicating that the Text's position should be rounded upon drawing.",18,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"draw","","Draws text with a character cache",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"c"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"triangulation","graphics","Methods for converting shapes into triangles.",null,null],[5,"tx","graphics::triangulation","Transformed x coordinate as f32.",null,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"f32"}}],[5,"ty","","Transformed y coordinate as f32.",null,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"f32"}}],[5,"with_lerp_polygons_tri_list","","Streams tweened polygons using linear interpolation.",null,{"inputs":[{"name":"matrix2d"},{"name":"polygons"},{"name":"scalar"},{"name":"f"}],"output":null}],[5,"with_ellipse_tri_list","","Streams an ellipse specified by a resolution.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"f"}],"output":null}],[5,"with_round_border_line_tri_list","","Streams a round border line.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"line"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_round_rectangle_tri_list","","Streams a round rectangle.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"stream_polygon_tri_list","","Streams a polygon into tri list. Uses buffers that fit inside L1 cache.",null,{"inputs":[{"name":"matrix2d"},{"name":"e"},{"name":"f"}],"output":null}],[5,"with_ellipse_border_tri_list","","Streams an ellipse border specified by a resolution.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_arc_tri_list","","Streams an arc between the two radian boundaries.",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_round_rectangle_border_tri_list","","Streams a round rectangle border.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"stream_quad_tri_list","","Streams a quad into tri list.",null,{"inputs":[{"name":"matrix2d"},{"name":"e"},{"name":"f"}],"output":null}],[5,"with_polygon_tri_list","","Splits polygon into convex segments. Create a buffer that fits into L1 cache with 1KB overhead.",null,{"inputs":[{"name":"matrix2d"},{"name":"polygon"},{"name":"f"}],"output":null}],[5,"rect_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_border_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_tri_list_uv","","Creates triangle list texture coords from image.",null,null],[0,"math","graphics","Various methods for computing with vectors.",null,null],[5,"multiply","graphics::math","Multiplies two matrices.",null,null],[5,"dot","","Computes the dot product.",null,null],[5,"cross","","Computes the cross product.",null,null],[5,"add","","Adds two vectors.",null,null],[5,"sub","","Subtracts 'b' from 'a'.",null,null],[5,"cast","","Converts to another vector type.",null,null],[5,"mul","","Multiplies two vectors component wise.",null,null],[5,"mul_scalar","","Multiplies the vector with a scalar.",null,null],[5,"square_len","","Computes the square length of a vector.",null,null],[5,"transform_pos","","Transforms a 2D position through matrix.",null,null],[5,"transform_vec","","Transforms a 2D vector through matrix.",null,null],[5,"perp","","Creates a perpendicular vector.",null,null],[5,"abs_transform","","Transforms from normalized to absolute coordinates.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"translate","","Creates a translation matrix.",null,{"inputs":[{"name":"vec2d"}],"output":{"name":"matrix2d"}}],[5,"rotate_radians","","Creates a rotation matrix.",null,{"inputs":[{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"orient","","Orients x axis to look at point.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"scale","","Create a scale matrix.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"shear","","Create a shear matrix.",null,{"inputs":[{"name":"vec2d"}],"output":{"name":"matrix2d"}}],[5,"identity","","Create an identity matrix.",null,{"inputs":[],"output":{"name":"matrix2d"}}],[5,"get_scale","","Extract scale information from matrix.",null,{"inputs":[{"name":"matrix2d"}],"output":{"name":"vec2d"}}],[5,"separation","","Compute the shortest vector from point to ray. A ray stores starting point and directional vector.",null,{"inputs":[{"name":"ray"},{"name":"vec2d"}],"output":{"name":"vec2d"}}],[5,"least_separation_4","","Returns the least separation out of four. Each seperation can be computed using `separation` function. The separation returned can be used to solve collision of rectangles.",null,{"inputs":[{"name":"vec2d"},{"name":"vec2d"},{"name":"vec2d"},{"name":"vec2d"}],"output":{"name":"vec2d"}}],[5,"margin_rectangle","","Shrinks a rectangle by a factor on all sides.",null,{"inputs":[{"name":"rectangle"},{"name":"t"}],"output":{"name":"rectangle"}}],[5,"relative_rectangle","","Computes a relative rectangle using the rectangle as a tile.",null,{"inputs":[{"name":"rectangle"},{"name":"vec2d"}],"output":{"name":"rectangle"}}],[5,"overlap_rectangle","","Computes overlap between two rectangles. The area of the overlapping rectangle is positive. A shared edge or corner is not considered overlap.",null,{"inputs":[{"name":"rectangle"},{"name":"rectangle"}],"output":{"name":"option"}}],[5,"relative_source_rectangle","","Computes a relative source rectangle using the source rectangle as a tile.",null,{"inputs":[{"name":"sourcerectangle"},{"name":"t"},{"name":"t"}],"output":{"name":"sourcerectangle"}}],[5,"modular_offset","","Computes modular offset safely for numbers.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"area_centroid","","Computes the area and centroid of a simple polygon.",null,null],[5,"area","","Computes area of a simple polygon.",null,{"inputs":[{"name":"polygon"}],"output":{"name":"t"}}],[5,"centroid","","Computes centroid of a simple polygon.",null,{"inputs":[{"name":"polygon"}],"output":{"name":"vec2d"}}],[5,"line_side","","Returns a number that tells which side it is relative to a line.",null,{"inputs":[{"name":"line"},{"name":"vec2d"}],"output":{"name":"t"}}],[5,"inside_triangle","","Returns true if point is inside triangle.",null,{"inputs":[{"name":"triangle"},{"name":"vec2d"}],"output":{"name":"bool"}}],[5,"triangle_face","","Returns true if triangle is clockwise.",null,{"inputs":[{"name":"triangle"}],"output":{"name":"bool"}}],[5,"to_barycentric","","Transforms from cartesian coordinates to barycentric.",null,{"inputs":[{"name":"triangle"},{"name":"vec2d"}],"output":{"name":"vec3d"}}],[5,"from_barycentric","","Transforms from barycentric coordinates to cartesian.",null,{"inputs":[{"name":"triangle"},{"name":"vec3d"}],"output":{"name":"vec2d"}}],[5,"hsv","","Transform color with hue, saturation and value.",null,{"inputs":[{"name":"color"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[6,"Scalar","","The type used for scalars.",null,null],[6,"Matrix2d","","The type used for matrices.",null,null],[6,"Vec2d","","The type used for 2D vectors.",null,null],[6,"Vec3d","","The type used for 3D vectors.",null,null],[0,"deform","graphics","Least square deforming of a 2D grid.",null,null],[3,"DeformGrid","graphics::deform","Represents a deformed grid.",null,null],[12,"cols","","The number of columns in the grid.",19,null],[12,"rows","","The number of rows in the grid.",19,null],[12,"rect","","The grid undeformed, which is a plain rectangle.",19,null],[12,"vertices","","The vertices, deformed.",19,null],[12,"indices","","The triangle indices.",19,null],[12,"texture_coords","","The texture coordinates.",19,null],[12,"ps","","Initial position of control points.",19,null],[12,"qs","","The current position of control points.",19,null],[12,"wis","","A weight computation buffer, one for each control point.",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"deformgrid"}}],[11,"new","","Creates a new DeformGrid.",19,{"inputs":[{"name":"rectangle"},{"name":"usize"},{"name":"usize"}],"output":{"name":"deformgrid"}}],[11,"set_current","","Sets current control position.",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vec2d"}],"output":null}],[11,"set_original","","Sets original control position.",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vec2d"}],"output":null}],[11,"reset_control_points","","Removes all control points.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_vertices_and_texture_coords","","Sets vertices and texture coords back to default.",19,{"inputs":[{"name":"self"}],"output":null}],[11,"hit","","Finds original coordinate. If the deformed grid is overlapping itself, multiple hits might occur. Returns the first hit it finds.",19,{"inputs":[{"name":"self"},{"name":"vec2d"}],"output":{"name":"option"}}],[11,"draw_image","","Draws deformed image using default method.",19,null],[11,"draw_image_tri","","Draws deformed image using triangulation.",19,null],[11,"add_control_point","","Adds a control point, in original coordinates.",19,{"inputs":[{"name":"self"},{"name":"vec2d"}],"output":null}],[11,"draw_vertical_lines","","Draw vertical grid lines.",19,{"inputs":[{"name":"self"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_horizontal_lines","","Draw horizontal grid lines.",19,{"inputs":[{"name":"self"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"update","","Updates the grid, by deforming the vertices.",19,{"inputs":[{"name":"self"}],"output":null}],[0,"grid","graphics","A flat grid with square cells.",null,null],[3,"Grid","graphics::grid","Represents a flat grid with square cells.",null,null],[12,"cols","","Number of columns.",20,null],[12,"rows","","Number of rows.",20,null],[12,"units","","The width and height of each grid cell.",20,null],[3,"GridCells","","Iterates through the cells of a grid as (u32, u32).",null,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"grid"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"gridcells"}}],[11,"draw","","Draws the grid.",20,{"inputs":[{"name":"self"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"cells","","Get a GridIterator for the grid",20,{"inputs":[{"name":"self"}],"output":{"name":"gridcells"}}],[11,"cell_position","","Get on-screen position of a grid cell",20,null],[11,"x_pos","","Get on-screen x position of a grid cell",20,null],[11,"y_pos","","Get on-screen y position of a grid cell",20,null],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"radians","graphics","Reexport radians helper trait from vecmath",null,null],[8,"Radians","graphics::radians","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to ```value * (π / 180)```.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to ```value * (180 / π)```.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[17,"BACK_END_MAX_VERTEX_COUNT","graphics","Any triangulation method called on the back-end never exceeds this number of vertices. This can be used to initialize buffers that fit the chunk size.",null,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",23,null],[10,"clear_color","","Clears background with a color.",23,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",23,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[10,"tri_list","","Renders list of 2d triangles using a solid color.",23,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",23,null],[11,"rectangle","","Draws a rectangle.",23,{"inputs":[{"name":"self"},{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon","","Draws a polygon.",23,{"inputs":[{"name":"self"},{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",23,{"inputs":[{"name":"self"},{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"image","","Draws image.",23,null],[11,"ellipse","","Draws ellipse.",23,{"inputs":[{"name":"self"},{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"line","","Draws line.",23,{"inputs":[{"name":"self"},{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"circle_arc","","Draws circle arc.",23,{"inputs":[{"name":"self"},{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"deform_image","","Draws deformed image.",23,null],[8,"SourceRectangled","","Should be implemented by contexts that have source rectangle information.",null,null],[10,"src_rect","","Adds a source rectangle.",24,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"src_rel","","Moves to a relative source rectangle using the current source rectangle as tile.",24,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"src_flip_h","","Flips the source rectangle horizontally.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"src_flip_v","","Flips the source rectangle vertically.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"src_flip_hv","","Flips the source rectangle horizontally and vertically.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Rectangled","","Should be implemented by contexts that have rectangle information.",null,null],[10,"margin","","Shrinks the current rectangle equally by all sides.",25,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"expand","","Expands the current rectangle equally by all sides.",25,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"rel","","Moves to a relative rectangle using the current rectangle as tile.",25,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",26,{"inputs":[{"name":"self"},{"name":"matrix2d"}],"output":{"name":"self"}}],[10,"prepend_transform","","Prepends transform to the current one.",26,{"inputs":[{"name":"self"},{"name":"matrix2d"}],"output":{"name":"self"}}],[10,"trans","","Translate x an y in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"orient","","Orients x axis to look at point locally.",26,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"scale","","Scales in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"shear","","Shears in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"vec2d"}],"output":{"name":"self"}}],[8,"Colored","","Implemented by contexts that contains color.",null,null],[10,"mul_rgba","","Multiplies with red, green, blue and alpha values.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"tint","","Mixes the current color with white.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"shade","","Mixes the current color with black.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[10,"hue_rad","","Rotates hue by radians.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",1,null],[11,"rectangle","","Draws a rectangle.",23,{"inputs":[{"name":"self"},{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon","","Draws a polygon.",23,{"inputs":[{"name":"self"},{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",23,{"inputs":[{"name":"self"},{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"image","","Draws image.",23,null],[11,"ellipse","","Draws ellipse.",23,{"inputs":[{"name":"self"},{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"line","","Draws line.",23,{"inputs":[{"name":"self"},{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"circle_arc","","Draws circle arc.",23,{"inputs":[{"name":"self"},{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"deform_image","","Draws deformed image.",23,null],[11,"src_rect","graphics::types","",28,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"src_rel","","",28,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"src_flip_h","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"src_flip_v","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"src_flip_hv","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"expand","graphics","Expands the current rectangle equally by all sides.",25,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"margin","graphics::types","",29,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rel","","",29,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_deg","graphics","Rotates degrees in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",26,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_transform","graphics::math","",30,{"inputs":[{"name":"self"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"prepend_transform","","",30,{"inputs":[{"name":"self"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"trans","","",30,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_rad","","",30,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"orient","","",30,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scale","","",30,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shear","","",30,{"inputs":[{"name":"self"},{"name":"vec2d"}],"output":{"name":"self"}}],[11,"append_transform","graphics::context","",7,{"inputs":[{"name":"self"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"prepend_transform","","",7,{"inputs":[{"name":"self"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"trans","","",7,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_rad","","",7,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"orient","","",7,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scale","","",7,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shear","","",7,{"inputs":[{"name":"self"},{"name":"vec2d"}],"output":{"name":"self"}}],[11,"tint","graphics","Mixes the current color with white.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"shade","","Mixes the current color with black.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",27,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::types","",31,{"inputs":[{"name":"self"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",31,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::line","",9,{"inputs":[{"name":"self"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",9,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::ellipse","",13,{"inputs":[{"name":"self"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",13,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::rectangle","",15,{"inputs":[{"name":"self"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",15,{"inputs":[{"name":"self"},{"name":"colorcomponent"}],"output":{"name":"self"}}]],"paths":[[8,"ImageSize"],[3,"Viewport"],[3,"DrawState"],[4,"Blend"],[4,"Stencil"],[3,"Character"],[8,"CharacterCache"],[3,"Context"],[3,"Polygon"],[3,"Line"],[4,"Shape"],[3,"CircleArc"],[3,"Border"],[3,"Ellipse"],[3,"Border"],[3,"Rectangle"],[4,"Shape"],[3,"Image"],[3,"Text"],[3,"DeformGrid"],[3,"Grid"],[3,"GridCells"],[8,"Radians"],[8,"Graphics"],[8,"SourceRectangled"],[8,"Rectangled"],[8,"Transformed"],[8,"Colored"],[6,"SourceRectangle"],[6,"Rectangle"],[6,"Matrix2d"],[6,"Color"]]};
searchIndex["id_tree"] = {"doc":"A library for creating and modifying Tree structures.","items":[[3,"NodeBuilder","id_tree","",null,null],[3,"Node","","",null,null],[3,"TreeBuilder","","",null,null],[3,"Tree","","",null,null],[3,"NodeId","","",null,null],[4,"RemoveBehavior","","",null,null],[13,"DropChildren","","",0,null],[13,"LiftChildren","","",0,null],[13,"OrphanChildren","","",0,null],[4,"MoveBehavior","","",null,null],[13,"ToRoot","","",1,null],[13,"ToParent","","",1,null],[4,"InsertBehavior","","",null,null],[13,"AsRoot","","",2,null],[13,"UnderNode","","",2,null],[4,"SwapBehavior","","",null,null],[13,"TakeChildren","","",3,null],[13,"LeaveChildren","","",3,null],[13,"ChildrenOnly","","",3,null],[4,"NodeIdError","","",null,null],[13,"InvalidNodeIdForTree","","Occurs when a `NodeId` is used on a `Tree` from which it did not originate.",4,null],[13,"NodeIdNoLongerValid","","Occurs when a `NodeId` is used on a `Tree` after the corresponding `Node` has been removed.",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"nodeiderror"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"nodebuilder"}}],[11,"with_child_capacity","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodebuilder"}}],[11,"build","","",5,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"new","","",6,{"inputs":[{"name":"t"}],"output":{"name":"node"}}],[11,"data","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"data_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace_data","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"parent","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"treebuilder"}}],[11,"with_root","","",7,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"treebuilder"}}],[11,"with_node_capacity","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"treebuilder"}}],[11,"with_swap_capacity","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"treebuilder"}}],[11,"build","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tree"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"tree"}}],[11,"insert","","Inserts a new `Node` into the `Tree`.  The `InsertBehavior` provided will determine where the `Node` is inserted.",8,{"inputs":[{"name":"self"},{"name":"node"},{"name":"insertbehavior"}],"output":{"name":"result"}}],[11,"get","","",8,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"result"}}],[11,"get_mut","","",8,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"result"}}],[11,"remove_node","","Remove a `Node` from the `Tree`.  The `RemoveBehavior` provided determines what happens to the removed `Node`'s children.",8,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"removebehavior"}],"output":{"name":"result"}}],[11,"move_node","","Moves a `Node` in the `Tree` to a new location based upon the `MoveBehavior` provided.",8,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"movebehavior"}],"output":{"name":"result"}}],[11,"sort_children_by","","",8,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"result"}}],[11,"sort_children_by_data","","",8,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"result"}}],[11,"sort_children_by_key","","",8,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"result"}}],[11,"swap_nodes","","Swap `Node`s in the `Tree` based upon the `SwapBehavior` provided.",8,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"},{"name":"swapbehavior"}],"output":{"name":"result"}}],[11,"root_node_id","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null]],"paths":[[4,"RemoveBehavior"],[4,"MoveBehavior"],[4,"InsertBehavior"],[4,"SwapBehavior"],[4,"NodeIdError"],[3,"NodeBuilder"],[3,"Node"],[3,"TreeBuilder"],[3,"Tree"],[3,"NodeId"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"DecodingResult","","Result of a decoding process",null,null],[13,"U8","","A vector of unsigned bytes",6,null],[13,"U16","","A vector of unsigned words",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",8,null],[13,"JPEG","","An Image in JPEG Format",8,null],[13,"GIF","","An Image in GIF Format",8,null],[13,"WEBP","","An Image in WEBP Format",8,null],[13,"PPM","","An Image in PPM Format",8,null],[13,"TIFF","","An Image in TIFF Format",8,null],[13,"TGA","","An Image in TGA Format",8,null],[13,"BMP","","An Image in BMP Format",8,null],[13,"ICO","","An Image in ICO Format",8,null],[13,"HDR","","An Image in Radiance HDR Format",8,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",9,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",9,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",9,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",9,null],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"guess_format","","Guess image format from memory block",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",10,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",10,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",10,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",10,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. ```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions. ```nwidth``` and ```nheight``` are the new dimensions. ```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image. ```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. ```sigma``` is the amount to blur the image by. ```threshold``` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug: https://github.com/rust-lang/rust/issues/18241 Functions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image. ```contrast``` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image. ```value``` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",11,null],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",11,null],[10,"map_color","","Maps `color` to the closest color in the color map.",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bilevel"}}],[11,"index_of","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"self"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```. This function takes ownership of the Reader.",13,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",13,null],[11,"read_image","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",14,null],[12,"height","","The height of the luma plane",14,null],[12,"ybuf","","The luma plane of the frame",14,null],[12,"keyframe","","Indicates whether this frame is a keyframe",14,null],[12,"for_display","","Indicates whether this frame is intended for display",14,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",14,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"default","","",14,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",15,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```. This function takes ownership of the Writer.",16,{"inputs":[{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image. ```width``` and ```height``` are the dimensions of the buffer. ```color``` is the buffers ColorType.",16,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream ```r```",17,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",17,null],[11,"read_image","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",18,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and ```height``` and ```ColorType``` ```c```",18,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",19,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",19,null],[11,"read_image","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```.",20,{"inputs":[{"name":"w"}],"output":{"name":"icoencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and ```height``` and ```ColorType``` ```c```.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",20,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to ```w```",21,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"new_with_quality","","Create a new encoder that writes its output to ```w```, and has the quality parameter ```quality``` with a value in the range 1-100 where 1 is the worst and 100 is the best.",21,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and ```height``` and ```ColorType``` ```c```",21,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",22,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",22,null],[11,"read_image","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",23,null],[12,"dispose","","Disposal method.",23,null],[12,"transparent","","Transparent index (if available).",23,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",23,null],[12,"top","","Offset from the top border of the canvas.",23,null],[12,"left","","Offset from the left border of the canvas.",23,null],[12,"width","","Width of the frame.",23,null],[12,"height","","Height of the frame.",23,null],[12,"interlaced","","True if the image is interlaced.",23,null],[12,"palette","","Frame local color palette if available.",23,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",23,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam ```r```",24,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",24,null],[11,"read_image","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",25,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",25,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",26,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",26,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",26,null],[11,"read_image","","",26,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",27,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",27,null],[11,"read_image","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"bmp","image","Decoding of BMP Images",null,null],[3,"BMPDecoder","image::bmp","A bmp decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",28,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",28,null],[11,"read_image","","",28,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[0,"hdr","image","Decoding of Radiance HDR Images",null,null],[3,"HDRAdapter","image::hdr","Adapter to conform to ```ImageDecoder``` trait",null,null],[3,"HDRDecoder","","An Radiance HDR decoder",null,null],[3,"RGBE8Pixel","","Refer to wikipedia",null,null],[12,"c","","Color components",29,null],[12,"e","","Exponent",29,null],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",null,null],[3,"HDRMetadata","","Metadata for Radiance HDR image",null,null],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation. ",30,null],[12,"height","","Height of decoded image. It depends on orientation too.",30,null],[12,"orientation","","Orientation matrix. For standart orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",30,null],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m^2 Image may not contain physical data, even if this field is set. ",30,null],[12,"color_correction","","Divide color values by corresponing tuple member (r, g, b) to get to get physical radiance in watts/steradian/m^2 Image may not contain physical data, even if this field is set. ",30,null],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",30,null],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",30,null],[3,"HDREncoder","","Radiance HDR encoder",null,null],[5,"rgbe8","","Creates ```RGBE8Pixel``` from components",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgbe8pixel"}}],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"to_rgbe8","","Converts ```Rgb<f32>``` into ```RGBE8Pixel```",null,{"inputs":[{"name":"rgb"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates adapter",31,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"new_nonstrict","","Allows reading old Radiance HDR images",31,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"row_len","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",31,null],[11,"read_image","","",31,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"to_hdr","","Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly",29,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr","","Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2",29,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb<T> using provided scale and gamma",29,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rgb"}}],[11,"new","","Reads Radiance HDR image header from stream ```r``` if the header is valid, creates HDRDecoder  strict mode is enabled",32,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"with_strictness","","Reads Radiance HDR image header from stream ```reader```, if the header is valid, creates ```HDRDecoder```.",32,{"inputs":[{"name":"r"},{"name":"bool"}],"output":{"name":"imageresult"}}],[11,"metadata","","Returns file metadata. Refer to ```HDRMetadata``` for details.",32,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_image_transform","","Consumes decoder and returns a vector of tranformed pixels",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"imageresult"}}],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb<u8> pixels. scale = 1, gamma = 2.2",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb<f32> pixels.",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"into_iter","","",32,null],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"new","","Creates encoder",34,{"inputs":[{"name":"w"}],"output":{"name":"hdrencoder"}}],[11,"encode","","Encodes the image ```data``` that has dimensions ```width``` and ```height```",34,null],[17,"SIGNATURE","","Radiance HDR file signature",null,null],[11,"fmt","image","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",37,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",37,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",37,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",37,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",37,null],[11,"bounds","","",37,null],[11,"get_pixel","","",37,null],[11,"put_pixel","","",37,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",37,null],[11,"get_pixel_mut","","",37,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",9,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image. This method operates inplace.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by ```nwidth``` and ```nheight```.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. ```nwidth``` and ```nheight``` are the new image's dimensions",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image. ```sigma``` is a measure of how much to blur by.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image. ```sigma``` is the amount to blur the image by. ```threshold``` is a control of how much to sharpen.",9,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",9,null],[11,"adjust_contrast","","Adjust the contrast of this image. ```contrast``` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image. ```value``` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",9,null],[11,"bounds","","",9,null],[11,"get_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",38,{"inputs":[{"name":"self"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",38,null],[11,"width","","The width of this image.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",38,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",38,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",38,{"inputs":[{"name":"self"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",38,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",38,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",38,null],[11,"deref_mut","","",38,null],[11,"index","","",38,null],[11,"index_mut","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",38,null],[11,"bounds","","",38,null],[11,"get_pixel","","",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",38,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",38,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"convert","","",38,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",39,{"inputs":[{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",40,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",40,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",40,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",40,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",40,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into ```buf``` and returns the row index",41,null],[10,"read_image","","Decodes the entire image and return it as a Vector",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from ```x``` and ```y``` and having ```length``` and ```width```",41,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",42,null],[10,"dimensions","","The width and height of this image.",42,null],[11,"width","","The width of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",42,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",42,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",42,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",42,null],[10,"put_pixel","","Put a pixel at location (x, y)",42,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",42,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",42,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",42,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",42,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",42,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",43,null],[10,"channel_count","","Returns the number of channels of this pixel type.",43,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",43,null],[10,"channels_mut","","Returns the components as a mutable slice",43,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel See gimp babl.",43,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",43,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",43,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",43,null],[10,"from_slice","","Returns a view into a slice.",43,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",43,null],[10,"to_rgb","","Convert this pixel to RGB",43,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",43,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",43,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",43,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function ```f``` to each channel except the alpha channel. Apply the function ```g``` to the alpha channel.",43,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function ```f``` to each channel except the alpha channel. Apply the function ```g``` to the alpha channel. Works in-place.",43,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and ```other``` pairwise.",43,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and ```other``` pairwise. Works in-place.",43,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",43,{"inputs":[{"name":"self"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",43,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",44,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",23,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"frame"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_animated","image","Returns true if the image is animated",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",41,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from ```x``` and ```y``` and having ```length``` and ```width```",41,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[11,"width","","The width of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",42,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",42,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",42,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",42,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",42,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",45,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["inflate"] = {"doc":"","items":[[3,"InflateStream","inflate","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"update","","",0,null]],"paths":[[3,"InflateStream"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions to be used in window frameworks and widgets libraries.","items":[[3,"AfterRenderArgs","input","After render arguments.",null,null],[3,"CloseArgs","","Close arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",0,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",1,null],[12,"width","","The width of rendered area in points.",1,null],[12,"height","","The height of rendered area in points.",1,null],[12,"draw_width","","The width of rendered area in pixels.",1,null],[12,"draw_height","","The height of rendered area in pixels.",1,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",2,null],[12,"id","","A unique identifier for touch event.",2,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",2,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",2,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",2,null],[12,"px","","The x coordinate of the touch pressure direction.",2,null],[12,"py","","The y coordinate of the touch pressure direction.",2,null],[12,"pz","","The z coordinate of the touch pressure direction.",2,null],[12,"is_3d","","Whether the touch is in 3D.",2,null],[12,"touch","","The touch state.",2,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",3,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",4,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",5,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",5,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",5,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",5,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",6,null],[13,"Mouse","","A mouse button.",6,null],[13,"Controller","","A controller button.",6,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",7,null],[13,"MouseRelative","","x and y in relative coordinates.",7,null],[13,"MouseScroll","","x and y in scroll ticks.",7,null],[13,"ControllerAxis","","controller axis move event.",7,null],[13,"Touch","","touch event.",7,null],[4,"Input","","Models input events.",null,null],[13,"Press","","Pressed a button.",8,null],[13,"Release","","Released a button.",8,null],[13,"Move","","Moved mouse cursor.",8,null],[13,"Text","","Text (usually from keyboard).",8,null],[13,"Resize","","Window got resized.",8,null],[13,"Focus","","Window gained or lost focus.",8,null],[13,"Cursor","","Window gained or lost cursor.",8,null],[13,"Close","","Window closed.",8,null],[13,"Render","","Render graphics.",8,null],[13,"AfterRender","","After rendering and swapping buffers.",8,null],[13,"Update","","Update the state of the application.",8,null],[13,"Idle","","Do background tasks that can be done incrementally.",8,null],[13,"Custom","","Custom event.",8,null],[0,"controller","","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",9,null],[12,"button","","Which button was pressed.",9,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",10,null],[12,"axis","","The axis that moved.",10,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",10,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",11,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",9,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",10,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"self"}}],[11,"from_controller_axis_args","input","",8,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"controller_axis","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",12,null],[13,"Backspace","","",12,null],[13,"Tab","","",12,null],[13,"Return","","",12,null],[13,"Escape","","",12,null],[13,"Space","","",12,null],[13,"Exclaim","","",12,null],[13,"Quotedbl","","",12,null],[13,"Hash","","",12,null],[13,"Dollar","","",12,null],[13,"Percent","","",12,null],[13,"Ampersand","","",12,null],[13,"Quote","","",12,null],[13,"LeftParen","","",12,null],[13,"RightParen","","",12,null],[13,"Asterisk","","",12,null],[13,"Plus","","",12,null],[13,"Comma","","",12,null],[13,"Minus","","",12,null],[13,"Period","","",12,null],[13,"Slash","","",12,null],[13,"D0","","",12,null],[13,"D1","","",12,null],[13,"D2","","",12,null],[13,"D3","","",12,null],[13,"D4","","",12,null],[13,"D5","","",12,null],[13,"D6","","",12,null],[13,"D7","","",12,null],[13,"D8","","",12,null],[13,"D9","","",12,null],[13,"Colon","","",12,null],[13,"Semicolon","","",12,null],[13,"Less","","",12,null],[13,"Equals","","",12,null],[13,"Greater","","",12,null],[13,"Question","","",12,null],[13,"At","","",12,null],[13,"LeftBracket","","",12,null],[13,"Backslash","","",12,null],[13,"RightBracket","","",12,null],[13,"Caret","","",12,null],[13,"Underscore","","",12,null],[13,"Backquote","","",12,null],[13,"A","","",12,null],[13,"B","","",12,null],[13,"C","","",12,null],[13,"D","","",12,null],[13,"E","","",12,null],[13,"F","","",12,null],[13,"G","","",12,null],[13,"H","","",12,null],[13,"I","","",12,null],[13,"J","","",12,null],[13,"K","","",12,null],[13,"L","","",12,null],[13,"M","","",12,null],[13,"N","","",12,null],[13,"O","","",12,null],[13,"P","","",12,null],[13,"Q","","",12,null],[13,"R","","",12,null],[13,"S","","",12,null],[13,"T","","",12,null],[13,"U","","",12,null],[13,"V","","",12,null],[13,"W","","",12,null],[13,"X","","",12,null],[13,"Y","","",12,null],[13,"Z","","",12,null],[13,"Delete","","",12,null],[13,"CapsLock","","",12,null],[13,"F1","","",12,null],[13,"F2","","",12,null],[13,"F3","","",12,null],[13,"F4","","",12,null],[13,"F5","","",12,null],[13,"F6","","",12,null],[13,"F7","","",12,null],[13,"F8","","",12,null],[13,"F9","","",12,null],[13,"F10","","",12,null],[13,"F11","","",12,null],[13,"F12","","",12,null],[13,"PrintScreen","","",12,null],[13,"ScrollLock","","",12,null],[13,"Pause","","",12,null],[13,"Insert","","",12,null],[13,"Home","","",12,null],[13,"PageUp","","",12,null],[13,"End","","",12,null],[13,"PageDown","","",12,null],[13,"Right","","",12,null],[13,"Left","","",12,null],[13,"Down","","",12,null],[13,"Up","","",12,null],[13,"NumLockClear","","",12,null],[13,"NumPadDivide","","",12,null],[13,"NumPadMultiply","","",12,null],[13,"NumPadMinus","","",12,null],[13,"NumPadPlus","","",12,null],[13,"NumPadEnter","","",12,null],[13,"NumPad1","","",12,null],[13,"NumPad2","","",12,null],[13,"NumPad3","","",12,null],[13,"NumPad4","","",12,null],[13,"NumPad5","","",12,null],[13,"NumPad6","","",12,null],[13,"NumPad7","","",12,null],[13,"NumPad8","","",12,null],[13,"NumPad9","","",12,null],[13,"NumPad0","","",12,null],[13,"NumPadPeriod","","",12,null],[13,"Application","","",12,null],[13,"Power","","",12,null],[13,"NumPadEquals","","",12,null],[13,"F13","","",12,null],[13,"F14","","",12,null],[13,"F15","","",12,null],[13,"F16","","",12,null],[13,"F17","","",12,null],[13,"F18","","",12,null],[13,"F19","","",12,null],[13,"F20","","",12,null],[13,"F21","","",12,null],[13,"F22","","",12,null],[13,"F23","","",12,null],[13,"F24","","",12,null],[13,"Execute","","",12,null],[13,"Help","","",12,null],[13,"Menu","","",12,null],[13,"Select","","",12,null],[13,"Stop","","",12,null],[13,"Again","","",12,null],[13,"Undo","","",12,null],[13,"Cut","","",12,null],[13,"Copy","","",12,null],[13,"Paste","","",12,null],[13,"Find","","",12,null],[13,"Mute","","",12,null],[13,"VolumeUp","","",12,null],[13,"VolumeDown","","",12,null],[13,"NumPadComma","","",12,null],[13,"NumPadEqualsAS400","","",12,null],[13,"AltErase","","",12,null],[13,"Sysreq","","",12,null],[13,"Cancel","","",12,null],[13,"Clear","","",12,null],[13,"Prior","","",12,null],[13,"Return2","","",12,null],[13,"Separator","","",12,null],[13,"Out","","",12,null],[13,"Oper","","",12,null],[13,"ClearAgain","","",12,null],[13,"CrSel","","",12,null],[13,"ExSel","","",12,null],[13,"NumPad00","","",12,null],[13,"NumPad000","","",12,null],[13,"ThousandsSeparator","","",12,null],[13,"DecimalSeparator","","",12,null],[13,"CurrencyUnit","","",12,null],[13,"CurrencySubUnit","","",12,null],[13,"NumPadLeftParen","","",12,null],[13,"NumPadRightParen","","",12,null],[13,"NumPadLeftBrace","","",12,null],[13,"NumPadRightBrace","","",12,null],[13,"NumPadTab","","",12,null],[13,"NumPadBackspace","","",12,null],[13,"NumPadA","","",12,null],[13,"NumPadB","","",12,null],[13,"NumPadC","","",12,null],[13,"NumPadD","","",12,null],[13,"NumPadE","","",12,null],[13,"NumPadF","","",12,null],[13,"NumPadXor","","",12,null],[13,"NumPadPower","","",12,null],[13,"NumPadPercent","","",12,null],[13,"NumPadLess","","",12,null],[13,"NumPadGreater","","",12,null],[13,"NumPadAmpersand","","",12,null],[13,"NumPadDblAmpersand","","",12,null],[13,"NumPadVerticalBar","","",12,null],[13,"NumPadDblVerticalBar","","",12,null],[13,"NumPadColon","","",12,null],[13,"NumPadHash","","",12,null],[13,"NumPadSpace","","",12,null],[13,"NumPadAt","","",12,null],[13,"NumPadExclam","","",12,null],[13,"NumPadMemStore","","",12,null],[13,"NumPadMemRecall","","",12,null],[13,"NumPadMemClear","","",12,null],[13,"NumPadMemAdd","","",12,null],[13,"NumPadMemSubtract","","",12,null],[13,"NumPadMemMultiply","","",12,null],[13,"NumPadMemDivide","","",12,null],[13,"NumPadPlusMinus","","",12,null],[13,"NumPadClear","","",12,null],[13,"NumPadClearEntry","","",12,null],[13,"NumPadBinary","","",12,null],[13,"NumPadOctal","","",12,null],[13,"NumPadDecimal","","",12,null],[13,"NumPadHexadecimal","","",12,null],[13,"LCtrl","","",12,null],[13,"LShift","","",12,null],[13,"LAlt","","",12,null],[13,"LGui","","",12,null],[13,"RCtrl","","",12,null],[13,"RShift","","",12,null],[13,"RAlt","","",12,null],[13,"RGui","","",12,null],[13,"Mode","","",12,null],[13,"AudioNext","","",12,null],[13,"AudioPrev","","",12,null],[13,"AudioStop","","",12,null],[13,"AudioPlay","","",12,null],[13,"AudioMute","","",12,null],[13,"MediaSelect","","",12,null],[13,"Www","","",12,null],[13,"Mail","","",12,null],[13,"Calculator","","",12,null],[13,"Computer","","",12,null],[13,"AcSearch","","",12,null],[13,"AcHome","","",12,null],[13,"AcBack","","",12,null],[13,"AcForward","","",12,null],[13,"AcStop","","",12,null],[13,"AcRefresh","","",12,null],[13,"AcBookmarks","","",12,null],[13,"BrightnessDown","","",12,null],[13,"BrightnessUp","","",12,null],[13,"DisplaySwitch","","",12,null],[13,"KbdIllumToggle","","",12,null],[13,"KbdIllumDown","","",12,null],[13,"KbdIllumUp","","",12,null],[13,"Eject","","",12,null],[13,"Sleep","","",12,null],[17,"NO_MODIFIER","","No modifier.",null,null],[17,"CTRL","","Ctrl.",null,null],[17,"SHIFT","","Shift.",null,null],[17,"ALT","","Alt.",null,null],[17,"GUI","","Gui.",null,null],[17,"CTRL_SHIFT","","Ctrl + Shift.",null,null],[17,"CTRL_ALT","","Ctrl + Alt.",null,null],[17,"CTRL_GUI","","Ctrl + Gui.",null,null],[17,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",null,null],[17,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",null,null],[17,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",null,null],[17,"SHIFT_ALT","","Shift + Alt.",null,null],[17,"SHIFT_GUI","","Shift + Gui.",null,null],[17,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",null,null],[17,"ALT_GUI","","Alt + Gui.",null,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",13,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"default","","",13,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"from","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",14,null],[13,"Left","","Left mouse button.",14,null],[13,"Right","","Right mouse button.",14,null],[13,"Middle","","Middle mouse button.",14,null],[13,"X1","","Extra mouse button number 1.",14,null],[13,"X2","","Extra mouse button number 2.",14,null],[13,"Button6","","Mouse button number 6.",14,null],[13,"Button7","","Mouse button number 7.",14,null],[13,"Button8","","Mouse button number 8.",14,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",15,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",16,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",17,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from_xy","input","",8,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_cursor","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",8,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_relative","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",8,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_scroll","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",18,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"event_id","input","",8,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"with_args","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"afterrenderargs"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_after_render_args","","",8,{"inputs":[{"name":"afterrenderargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"after_render","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"closeargs"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"closeargs"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_close_args","","",8,{"inputs":[{"name":"closeargs"},{"name":"input"}],"output":{"name":"option"}}],[11,"close","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_cursor","","",8,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"cursor","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_focused","","",8,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"focus","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"idleargs"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_idle_args","","",8,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_button","","",8,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[11,"press","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_button","","",8,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[11,"release","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"viewport","","Returns viewport information filling entire render area.",1,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"from_render_args","","",8,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"render","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_width_height","","",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[11,"resize","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_text","","",8,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[11,"text","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"touchargs"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates arguments for 2D touch.",2,null],[11,"new_3d","","Creates arguments for 3D touch.",2,null],[11,"position","","The position of the touch in 2D.",2,null],[11,"position_3d","","The position of the touch in 3D.",2,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",2,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",2,null],[11,"from_touch_args","","",8,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"touch","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"updateargs"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_update_args","","",8,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"update","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",21,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"CloseEvent","","Window is closing.",null,null],[10,"from_close_args","","Creates a close event from arguments.",22,{"inputs":[{"name":"closeargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"close","","Calls closure if this is a close event.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"close_args","","Returns close arguments.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",23,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",24,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",25,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",25,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",26,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",27,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",28,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",29,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",30,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TouchEvent","","When a touch is started, moved, ended or cancelled.",null,null],[10,"from_touch_args","","Creates a touch event.",31,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"touch","","Calls closure if this is a touch event.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"touch_args","","Returns touch arguments.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",32,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",32,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"close_args","","Returns close arguments.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",25,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"touch_args","","Returns touch arguments.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",32,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"IdleArgs"],[3,"RenderArgs"],[3,"TouchArgs"],[3,"UpdateArgs"],[3,"EventId"],[4,"Touch"],[4,"Button"],[4,"Motion"],[4,"Input"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[3,"CloseArgs"],[8,"AfterRenderEvent"],[8,"CloseEvent"],[8,"CursorEvent"],[8,"FocusEvent"],[8,"IdleEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"ResizeEvent"],[8,"RenderEvent"],[8,"TextEvent"],[8,"TouchEvent"],[8,"UpdateEvent"]]};
searchIndex["interpolation"] = {"doc":"Interpolation algorithms.","items":[[4,"EaseFunction","interpolation","",null,null],[13,"QuadraticIn","","",0,null],[13,"QuadraticOut","","",0,null],[13,"QuadraticInOut","","",0,null],[13,"CubicIn","","",0,null],[13,"CubicOut","","",0,null],[13,"CubicInOut","","",0,null],[13,"QuarticIn","","",0,null],[13,"QuarticOut","","",0,null],[13,"QuarticInOut","","",0,null],[13,"QuinticIn","","",0,null],[13,"QuinticOut","","",0,null],[13,"QuinticInOut","","",0,null],[13,"SineIn","","",0,null],[13,"SineOut","","",0,null],[13,"SineInOut","","",0,null],[13,"CircularIn","","",0,null],[13,"CircularOut","","",0,null],[13,"CircularInOut","","",0,null],[13,"ExponentialIn","","",0,null],[13,"ExponentialOut","","",0,null],[13,"ExponentialInOut","","",0,null],[13,"ElasticIn","","",0,null],[13,"ElasticOut","","",0,null],[13,"ElasticInOut","","",0,null],[13,"BackIn","","",0,null],[13,"BackOut","","",0,null],[13,"BackInOut","","",0,null],[13,"BounceIn","","",0,null],[13,"BounceOut","","",0,null],[13,"BounceInOut","","",0,null],[5,"lerp","","Performs linear interpolation. A linear interpolation consists of two states 'a' and 'b'. The 't' variable is a factor between 0 and 1 that gives weight to 'a' or 'b'. When 't' is zero then 'a' has full weight. When 't' is one then 'b' has full weight.",null,null],[5,"quad_bez","","Performs quadratic beziér interpolation. This is done by nesting linear interpolations. For more information, see:",null,null],[5,"cub_bez","","Performs cubic beziér interpolation. This is done by interpolation between two quadratic beziér. For more information, see:",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"easefunction"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"easefunction"}],"output":{"name":"bool"}}],[8,"Ease","","",null,null],[10,"calc","","Calculate the eased value, normalized",1,{"inputs":[{"name":"self"},{"name":"easefunction"}],"output":{"name":"self"}}],[10,"quadratic_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quadratic_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quadratic_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cubic_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cubic_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cubic_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quartic_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quartic_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quartic_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quintic_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quintic_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"quintic_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sine_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sine_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sine_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"circular_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"circular_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"circular_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exponential_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exponential_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exponential_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"elastic_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"elastic_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"elastic_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"back_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"back_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"back_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"bounce_in","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"bounce_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"bounce_in_out","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Spatial","","Used for interpolation over spatial structures.",null,null],[16,"Scalar","","The scalar type.",2,null],[10,"add","","Add",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub","","Subtract",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"scale","","Scales with a scalar.",2,null]],"paths":[[4,"EaseFunction"],[8,"Ease"],[8,"Spatial"]]};
searchIndex["ioctl"] = {"doc":"","items":[[3,"input_event","ioctl","",null,null],[12,"time","","",0,null],[12,"_type","","",0,null],[12,"code","","",0,null],[12,"value","","",0,null],[3,"input_id","","",null,null],[12,"bustype","","",1,null],[12,"vendor","","",1,null],[12,"product","","",1,null],[12,"version","","",1,null],[3,"ff_effect","","",null,null],[12,"_type","","",2,null],[12,"id","","",2,null],[12,"direction","","",2,null],[12,"trigger","","",2,null],[12,"replay","","",2,null],[12,"u","","",2,null],[3,"Union_Unnamed16","","",null,null],[12,"_bindgen_data_","","",3,null],[3,"input_absinfo","","",null,null],[12,"value","","",4,null],[12,"minimum","","",4,null],[12,"maximum","","",4,null],[12,"fuzz","","",4,null],[12,"flat","","",4,null],[12,"resolution","","",4,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",5,null],[12,"len","","",5,null],[12,"index","","",5,null],[12,"keycode","","",5,null],[12,"scancode","","",5,null],[3,"ff_replay","","",null,null],[12,"length","","",6,null],[12,"delay","","",6,null],[3,"ff_trigger","","",null,null],[12,"button","","",7,null],[12,"interval","","",7,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",8,null],[12,"attack_level","","",8,null],[12,"fade_length","","",8,null],[12,"fade_level","","",8,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",9,null],[12,"envelope","","",9,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",10,null],[12,"end_level","","",10,null],[12,"envelope","","",10,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",11,null],[12,"left_saturation","","",11,null],[12,"right_coeff","","",11,null],[12,"left_coeff","","",11,null],[12,"deadband","","",11,null],[12,"center","","",11,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",12,null],[12,"period","","",12,null],[12,"magnitude","","",12,null],[12,"offset","","",12,null],[12,"phase","","",12,null],[12,"envelope","","",12,null],[12,"custom_len","","",12,null],[12,"custom_data","","",12,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",13,null],[12,"weak_magnitude","","",13,null],[5,"ioc_dir","","Extracts the \"direction\" (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"eviocgname","","",null,null],[5,"eviocgphys","","",null,null],[5,"eviocguniq","","",null,null],[5,"eviocgprop","","",null,null],[5,"eviocgmtslots","","",null,null],[5,"eviocgkey","","",null,null],[5,"eviocgled","","",null,null],[5,"eviocgsnd","","",null,null],[5,"eviocgsw","","",null,null],[5,"eviocsff","","",null,null],[5,"eviocgrab","","",null,null],[5,"eviocrevoke","","",null,null],[5,"eviocsclockid","","",null,null],[5,"eviocgbit","","",null,null],[5,"eviocgabs","","",null,null],[5,"apm_ioc_standby","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"apm_ioc_suspend","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"btrfs_ioc_balance_ctl","","",null,null],[5,"btrfs_ioc_clone","","",null,null],[5,"btrfs_ioc_default_subvol","","",null,null],[5,"btrfs_ioc_get_fslabel","","",null,null],[5,"btrfs_ioc_quota_rescan_wait","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"btrfs_ioc_scrub_cancel","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"btrfs_ioc_set_fslabel","","",null,null],[5,"btrfs_ioc_start_sync","","",null,null],[5,"btrfs_ioc_subvol_getflags","","",null,null],[5,"btrfs_ioc_subvol_setflags","","",null,null],[5,"btrfs_ioc_sync","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"btrfs_ioc_trans_end","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"btrfs_ioc_trans_start","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"btrfs_ioc_wait_sync","","",null,null],[5,"cm_iocardoff","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cm_iocgstatus","","",null,null],[5,"cm_iocsrdr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cxl_ioctl_get_process_element","","",null,null],[5,"drm_ioctl_agp_acquire","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_agp_release","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_drop_master","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_mode_rmfb","","",null,null],[5,"drm_ioctl_radeon_cp_idle","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_radeon_cp_reset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_radeon_cp_resume","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_radeon_cp_start","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_radeon_flip","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_radeon_reset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_radeon_swap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"drm_ioctl_set_master","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"eviocgeffects","","",null,null],[5,"eviocgid","","",null,null],[5,"eviocgkeycode","","",null,null],[5,"eviocgrep","","",null,null],[5,"eviocgversion","","",null,null],[5,"eviocrmff","","",null,null],[5,"eviocskeycode","","",null,null],[5,"eviocsrep","","",null,null],[5,"ext2_ioc_getflags","","",null,null],[5,"ext2_ioc_getversion","","",null,null],[5,"ext2_ioc_getversion_new","","",null,null],[5,"ext2_ioc_group_extend","","",null,null],[5,"ext2_ioc_setflags","","",null,null],[5,"ext2_ioc_setversion","","",null,null],[5,"ext2_ioc_setversion_new","","",null,null],[5,"ext4_ioc_resize_fs","","",null,null],[5,"fat_ioctl_get_attributes","","",null,null],[5,"fat_ioctl_get_volume_id","","",null,null],[5,"fat_ioctl_set_attributes","","",null,null],[5,"fs_ioc32_getflags","","",null,null],[5,"fs_ioc32_getversion","","",null,null],[5,"fs_ioc32_setflags","","",null,null],[5,"fs_ioc32_setversion","","",null,null],[5,"fs_ioc_getflags","","",null,null],[5,"fs_ioc_getversion","","",null,null],[5,"fs_ioc_setflags","","",null,null],[5,"fs_ioc_setversion","","",null,null],[5,"fw_cdev_ioc_get_speed","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"hidiocapplication","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"hidiocgflag","","",null,null],[5,"hidiocgrdescsize","","",null,null],[5,"hidiocgversion","","",null,null],[5,"hidiocinitreport","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"hidiocsflag","","",null,null],[5,"iiocdbgvar","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocdrvctl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocgetcps","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocgetdvr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocgetmap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocgetprf","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocgetset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetaif","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetaln","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetanm","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetasl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetdif","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetdil","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetdln","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetdnm","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetdwrset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetgcf","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetgnm","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetgpn","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnethup","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetlcr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocnetscf","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsetbrj","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsetgst","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsetmap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsetprf","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsetset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsetver","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"iiocsigprf","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ioctl_wdm_max_command","","",null,null],[5,"ivtv_ioc_passthrough_mode","","",null,null],[5,"jsiocgaxes","","",null,null],[5,"jsiocgaxmap","","",null,null],[5,"jsiocgbuttons","","",null,null],[5,"jsiocgversion","","",null,null],[5,"jsiocsaxmap","","",null,null],[5,"kiocsound","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"meyeioc_qbuf_capt","","",null,null],[5,"meyeioc_stillcapt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"meyeioc_stilljcapt","","",null,null],[5,"meyeioc_sync","","",null,null],[5,"mgsl_iocclrmodcount","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocgif","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocgstats","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocgtxidle","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocgxctrl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocgxsync","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_ioclooptxdone","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocrxenable","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocsif","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocstxidle","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocsxctrl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocsxsync","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_ioctxabort","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_ioctxenable","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"mgsl_iocwaitevent","","",null,null],[5,"nvme_ioctl_id","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"osiocgnetaddr","","",null,null],[5,"osiocsnetaddr","","",null,null],[5,"pciioc_controller","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"pciioc_mmap_is_io","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"pciioc_mmap_is_mem","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"pciioc_write_combine","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"perf_event_ioc_disable","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"perf_event_ioc_enable","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"perf_event_ioc_id","","",null,null],[5,"perf_event_ioc_period","","",null,null],[5,"perf_event_ioc_refresh","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"perf_event_ioc_reset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"perf_event_ioc_set_filter","","",null,null],[5,"perf_event_ioc_set_output","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"pmu_ioc_can_sleep","","",null,null],[5,"pmu_ioc_get_backlight","","",null,null],[5,"pmu_ioc_get_model","","",null,null],[5,"pmu_ioc_grab_backlight","","",null,null],[5,"pmu_ioc_has_adb","","",null,null],[5,"pmu_ioc_set_backlight","","",null,null],[5,"pmu_ioc_sleep","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"pppiocattach","","",null,null],[5,"pppiocattchan","","",null,null],[5,"pppiocbundle","","",null,null],[5,"pppiocconnect","","",null,null],[5,"pppiocdetach","","",null,null],[5,"pppiocdisconn","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"pppiocgasyncmap","","",null,null],[5,"pppiocgchan","","",null,null],[5,"pppiocgcompressors","","",null,null],[5,"pppiocgdebug","","",null,null],[5,"pppiocgflags","","",null,null],[5,"pppiocgifname","","",null,null],[5,"pppiocgmpflags","","",null,null],[5,"pppiocgmru","","",null,null],[5,"pppiocgrasyncmap","","",null,null],[5,"pppiocgunit","","",null,null],[5,"pppiocnewunit","","",null,null],[5,"pppiocsasyncmap","","",null,null],[5,"pppiocscompressor","","",null,null],[5,"pppiocsdebug","","",null,null],[5,"pppiocsflags","","",null,null],[5,"pppiocsmaxcid","","",null,null],[5,"pppiocsmpflags","","",null,null],[5,"pppiocsmpmru","","",null,null],[5,"pppiocsmpmtu","","",null,null],[5,"pppiocsmrru","","",null,null],[5,"pppiocsmru","","",null,null],[5,"pppiocsrasyncmap","","",null,null],[5,"pppiocxferunit","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"reiserfs_ioc_getflags","","",null,null],[5,"reiserfs_ioc_getversion","","",null,null],[5,"resierfs_ioc_setflags","","",null,null],[5,"reiserfs_ioc_setversion","","",null,null],[5,"reiserfs_ioc_unpack","","",null,null],[5,"rfkill_ioctl_noinput","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_benchmark_command","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_doorlock","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_doorunlock","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_get_bus_number","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_get_idlun","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_probe_host","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_send_command","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_start_unit","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_stop_unit","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_sync","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_tagged_disable","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_tagged_enable","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"scsi_ioctl_test_unit_ready","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocadddlci","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocaddmulti","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocaddrt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocaipxitfcrt","","",null,null],[5,"siocaipxprislt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocatalkdifaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocatmark","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25addfwd","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25adduid","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25bpqaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25ctlcon","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25delfwd","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25deluid","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25devctl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25getinfo","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25getinfoold","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25getparms","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25getuid","","",null,null],[5,"siocax25nouid","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25optrt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocax25setparms","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbondchangeactive","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbondenslave","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbondinfoquery","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbondrelease","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbondsethwaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbondslaveinfoquery","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbraddbr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbraddif","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbrdelbr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocbrdelif","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdarp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdeldlci","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdelmulti","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdelrt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdevplip","","",null,null],[5,"siocdevprivate","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdifaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocdrarp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocethtool","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgarp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgbpqethparam","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgcmfirmware","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgcmfrequency","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgcmpids","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgcmstats","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgdebserint","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgdongle","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgetlinkname","","",null,null],[5,"siocghwtstamp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifbr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifbrdaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifconf","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifcount","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifdstaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifencap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifflags","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifhwaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifindex","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifmap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifmem","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifmetric","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifmtu","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifname","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifnetmask","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifpflags","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifslave","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgiftxqlen","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgifvlan","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgkeepalive","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgkeepperiod","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocglease","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgmediabusy","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgmiiphy","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgmiireg","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgmode","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgoutfill","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgpgrp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgpppcstats","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgpppstats","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgpppver","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgqos","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgrarp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgreceiving","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgstamp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocgstampns","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocinq","","",null,null],[5,"siocipxcfgdata","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocipxncpconn","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocmkclip","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocnrctlcon","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocnrdecobs","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocnrgetparms","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocnrrtctl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocnrsetparms","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocoutq","","",null,null],[5,"siocoutqnsd","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocparm_mask","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocprotoprivate","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsaccept","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsclrrt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsgcause","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsgfacilities","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsgl2call","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsl2call","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrsscause","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrssl2call","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocrtmsg","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsarp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsbandwidth","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsbpqethaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsbpqethopt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsbpqethparam","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocscmfrequency","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocscmpids","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsdebserint","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsdongle","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsdtrrts","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocshwtstamp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifatmtcp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifbr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifbrdaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifdstaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifencap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifflags","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifhwaddr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifhwbroadcast","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsiflink","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifmap","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifmem","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifmetric","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifmtu","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifname","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifnetmask","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifpflags","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifslave","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsiftxqlen","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsifvlan","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocskeepalive","","",null,null],[5,"siocskeepperiod","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocslease","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsmediabusy","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsmiireg","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsmode","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsoutfill","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocspgrp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocsrarp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocwandev","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25callaccptapprv","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25gcalluserdata","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25gcausediag","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25gdtefacilities","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25gfacilities","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25gsubscrip","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25scalluserdata","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25scausediag","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25scudmatchlen","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25sdtefacilities","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25sendcallaccpt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25sfacilities","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"siocx25ssubscrip","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_ioctl_clear_patches","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_ioctl_reset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_ioctl_set_connection","","",null,null],[5,"sndrv_dm_fm_ioctl_set_mode","","",null,null],[5,"sndrv_dm_fm_oss_ioctl_play_note","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_oss_ioctl_reset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_oss_ioctl_set_mode","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_oss_ioctl_set_opl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_oss_ioctl_set_params","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_dm_fm_oss_ioctl_set_voice","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_emu10k1_ioctl_continue","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_emu10k1_ioctl_dbg_read","","",null,null],[5,"sndrv_emu10k1_ioctl_pversion","","",null,null],[5,"sndrv_emu10k1_ioctl_single_step","","",null,null],[5,"sndrv_emu10k1_ioctl_stop","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_emu10k1_ioctl_tram_setup","","",null,null],[5,"sndrv_emu10k1_ioctl_zero_tram_counter","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_firewire_ioctl_lock","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_firewire_ioctl_unlock","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_sb_csp_ioctl_pause","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_sb_csp_ioctl_restart","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_sb_csp_ioctl_stop","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sndrv_sb_csp_ioctl_unload_code","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"sonypi_iocgbat1cap","","",null,null],[5,"sonypi_iocgbat1rem","","",null,null],[5,"sonypi_iocgbat2cap","","",null,null],[5,"sonypi_iocgbat2rem","","",null,null],[5,"sonypi_iocgbatflags","","",null,null],[5,"sonypi_iocgblue","","",null,null],[5,"sonypi_iocgbrt","","",null,null],[5,"sonypi_iocgfan","","",null,null],[5,"sonypi_iocgtemp","","",null,null],[5,"sonypi_iocsblue","","",null,null],[5,"sonypi_iocsbrt","","",null,null],[5,"sonypi_iocsfan","","",null,null],[5,"spiocstype","","",null,null],[5,"spi_ioc_rd_bits_per_word","","",null,null],[5,"spi_ioc_rd_lsb_first","","",null,null],[5,"spi_ioc_rd_max_speed_hz","","",null,null],[5,"spi_ioc_rd_mode","","",null,null],[5,"spi_ioc_rd_mode32","","",null,null],[5,"spi_ioc_wr_bits_per_word","","",null,null],[5,"spi_ioc_wr_lsb_first","","",null,null],[5,"spi_ioc_wr_max_speed_hz","","",null,null],[5,"spi_ioc_wr_mode","","",null,null],[5,"spi_ioc_wr_mode32","","",null,null],[5,"sys_f_ioctlsocket","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tioccbrk","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tioccons","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocexcl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgdev","","",null,null],[5,"tiocgetd","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgexcl","","",null,null],[5,"tiocgicount","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocglcktrmios","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgpgrp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgpkt","","",null,null],[5,"tiocgptlck","","",null,null],[5,"tiocgptn","","",null,null],[5,"tiocgrs485","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgserial","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgsid","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgsoftcar","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocgwinsz","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocinq","","",null,null],[5,"tioclinux","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_blankedscreen","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_blankscreen","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_getfgconsole","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_getkmsgredirect","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_getmousereporting","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_getshiftstate","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_pastesel","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_scrollconsole","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selbuttonmask","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selchar","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selclear","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selline","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selloadlut","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selmousereport","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selpointer","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_selword","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_setkmsgredirect","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_setsel","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_setvesablank","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocl_unblankscreen","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocmbic","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocmbis","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocmget","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocmiwait","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocmset","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_car","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_cd","","",null,null],[5,"tiocm_cts","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_dsr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_dtr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_le","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_loop","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_out1","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_out2","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_ri","","",null,null],[5,"tiocm_rng","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_rts","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_sr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocm_st","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocnotty","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocnxcl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocoutq","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_data","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_dostop","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_flushread","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_flushwrite","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_ioctl","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_nostop","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_start","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocpkt_stop","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsbrk","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsctty","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocserconfig","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsergetlsr","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsergetmulti","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsergstruct","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsergwild","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsersetmulti","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocserswild","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocser_temt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsetd","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsig","","",null,null],[5,"tiocslcktrmios","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocspgrp","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsptlck","","",null,null],[5,"tiocsrs485","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsserial","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocssoftcar","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocsti","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocswinsz","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"tiocvhangup","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ubi_iocdet","","",null,null],[5,"ubi_iocebch","","",null,null],[5,"ubi_ioceber","","",null,null],[5,"ubi_iocebismap","","",null,null],[5,"ubi_iocebunmap","","",null,null],[5,"ubi_iocrmvol","","",null,null],[5,"ubi_iocvolrmblk","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ubi_iocvolup","","",null,null],[5,"usbtmc_ioctl_abort_bulk_in","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"usbtmc_ioctl_abort_bulk_out","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"usbtmc_ioctl_clear","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"usbtmc_ioctl_clear_in_halt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"usbtmc_ioctl_clear_out_halt","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"usbtmc_ioctl_indicator_pulse","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"vidioc_g_input","","",null,null],[5,"vidioc_g_output","","",null,null],[5,"vidioc_g_priority","","",null,null],[5,"vidioc_log_status","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"vidioc_omap3isp_stat_en","","",null,null],[5,"vidioc_overlay","","",null,null],[5,"vidioc_reserved","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"vidioc_streamoff","","",null,null],[5,"vidioc_streamon","","",null,null],[5,"vidioc_s_input","","",null,null],[5,"vidioc_s_output","","",null,null],[5,"vidioc_s_priority","","",null,null],[5,"wdioc_getbootstatus","","",null,null],[5,"wdioc_getpretimeout","","",null,null],[5,"wdioc_getstatus","","",null,null],[5,"wdioc_gettemp","","",null,null],[5,"wdioc_gettimeleft","","",null,null],[5,"wdioc_gettimeout","","",null,null],[5,"wdioc_keepalive","","",null,null],[5,"wdioc_setoptions","","",null,null],[5,"wdioc_setpretimeout","","",null,null],[5,"wdioc_settimeout","","",null,null],[5,"x86_ioc_rdmsr_regs","","",null,null],[5,"x86_ioc_wrmsr_regs","","",null,null],[5,"xfs_ioc_freeze","","",null,null],[5,"xfs_ioc_getversion","","",null,null],[5,"xfs_ioc_getxflags","","",null,null],[5,"xfs_ioc_goingdown","","",null,null],[5,"xfs_ioc_setxflags","","",null,null],[5,"xfs_ioc_thaw","","",null,null],[5,"fioclex","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cz_nboards","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cz_boot_start","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cz_boot_data","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cz_boot_end","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"cz_test","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed16"}}],[11,"constant","","",3,null],[11,"ramp","","",3,null],[11,"periodic","","",3,null],[11,"condition","","",3,null],[11,"rumble","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"input_absinfo"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[14,"ioc","","Encode an ioctl command.",null,null],[14,"io","","Encode an ioctl command that has no associated data.",null,null],[14,"ior","","Encode an ioctl command that reads.",null,null],[14,"iow","","Encode an ioctl command that writes.",null,null],[14,"iorw","","Encode an ioctl command that both reads and writes.",null,null],[14,"ioctl","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"input_event"],[3,"input_id"],[3,"ff_effect"],[3,"Union_Unnamed16"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"]]};
searchIndex["isatty"] = {"doc":"","items":[[5,"stdout_isatty","isatty","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"stderr_isatty","","",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[]};
searchIndex["jpeg_decoder"] = {"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",null,null],[3,"ImageInfo","","Represents metadata of an image.",null,null],[12,"width","","The width of the image, in pixels.",0,null],[12,"height","","The height of the image, in pixels.",0,null],[12,"pixel_format","","The pixel format of the image.",0,null],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",null,null],[13,"L8","","Luminance (grayscale), 8 bits",1,null],[13,"RGB24","","RGB, 8 bits per channel",1,null],[13,"CMYK32","","CMYK, 8 bits per channel",1,null],[4,"Error","","Errors that can occur while decoding a JPEG image.",null,null],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,null],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,null],[13,"Io","","An I/O error occurred while decoding the image.",2,null],[13,"Internal","","An internal error occurred while decoding the image.",2,null],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",null,null],[13,"Hierarchical","","Hierarchical JPEG.",3,null],[13,"Lossless","","Lossless JPEG.",3,null],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,null],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,null],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,null],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,null],[13,"SubsamplingRatio","","Subsampling ratio.",3,null],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"imageinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","Returns metadata about the image.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create","lazy_static","",null,null],[14,"lazy_static","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libsystemd_sys"] = {"doc":"Contains definitions for low-level bindings.","items":[[6,"size_t","libsystemd_sys","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",0,null],[12,"ssi_errno","","",0,null],[12,"ssi_code","","",0,null],[12,"ssi_pid","","",0,null],[12,"ssi_uid","","",0,null],[12,"ssi_fd","","",0,null],[12,"ssi_tid","","",0,null],[12,"ssi_band","","",0,null],[12,"ssi_overrun","","",0,null],[12,"ssi_trapno","","",0,null],[12,"ssi_status","","",0,null],[12,"ssi_int","","",0,null],[12,"ssi_ptr","","",0,null],[12,"ssi_utime","","",0,null],[12,"ssi_stime","","",0,null],[12,"ssi_addr","","",0,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",1,null],[12,"si_errno","","",1,null],[12,"si_code","","",1,null],[12,"_pad","","",1,null],[6,"clockid_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_char","","",null,null],[6,"c_int","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[6,"c_uint","","",null,null],[3,"iovec","","",null,null],[12,"iov_base","","",2,null],[12,"iov_len","","",2,null],[3,"const_iovec","","",null,null],[12,"iov_base","","",3,null],[12,"iov_len","","",3,null],[5,"array_to_iovecs","","",null,null],[0,"id128","","",null,null],[3,"sd_id128_t","libsystemd_sys::id128","",null,null],[12,"bytes","","",4,null],[5,"sd_id128_to_string","","",null,null],[5,"sd_id128_from_string","","",null,null],[5,"sd_id128_randomize","","",null,null],[5,"sd_id128_get_machine","","",null,null],[5,"sd_id128_get_boot","","",null,null],[17,"SD_ID128_STRING_MAX","","",null,null],[0,"event","libsystemd_sys","",null,null],[4,"sd_event","libsystemd_sys::event","",null,null],[4,"sd_event_source","","",null,null],[5,"sd_event_default","","",null,null],[5,"sd_event_new","","",null,null],[5,"sd_event_ref","","",null,null],[5,"sd_event_unref","","",null,null],[5,"sd_event_add_io","","",null,null],[5,"sd_event_add_time","","",null,null],[5,"sd_event_add_signal","","",null,null],[5,"sd_event_add_child","","",null,null],[5,"sd_event_add_defer","","",null,null],[5,"sd_event_add_post","","",null,null],[5,"sd_event_add_exit","","",null,null],[5,"sd_event_prepare","","",null,null],[5,"sd_event_wait","","",null,null],[5,"sd_event_dispatch","","",null,null],[5,"sd_event_run","","",null,null],[5,"sd_event_loop","","",null,null],[5,"sd_event_exit","","",null,null],[5,"sd_event_now","","",null,null],[5,"sd_event_get_fd","","",null,null],[5,"sd_event_get_state","","",null,null],[5,"sd_event_get_tid","","",null,null],[5,"sd_event_get_exit_code","","",null,null],[5,"sd_event_set_watchdog","","",null,null],[5,"sd_event_get_watchdog","","",null,null],[5,"sd_event_source_ref","","",null,null],[5,"sd_event_source_unref","","",null,null],[5,"sd_event_source_get_event","","",null,null],[5,"sd_event_source_get_userdata","","",null,null],[5,"sd_event_source_set_userdata","","",null,null],[5,"sd_event_source_set_description","","",null,null],[5,"sd_event_source_get_description","","",null,null],[5,"sd_event_source_set_prepare","","",null,null],[5,"sd_event_source_get_pending","","",null,null],[5,"sd_event_source_get_priority","","",null,null],[5,"sd_event_source_set_priority","","",null,null],[5,"sd_event_source_get_enabled","","",null,null],[5,"sd_event_source_set_enabled","","",null,null],[5,"sd_event_source_get_io_fd","","",null,null],[5,"sd_event_source_set_io_fd","","",null,null],[5,"sd_event_source_get_io_events","","",null,null],[5,"sd_event_source_set_io_events","","",null,null],[5,"sd_event_source_get_io_revents","","",null,null],[5,"sd_event_source_get_time","","",null,null],[5,"sd_event_source_set_time","","",null,null],[5,"sd_event_source_get_time_accuracy","","",null,null],[5,"sd_event_source_set_time_accuracy","","",null,null],[5,"sd_event_source_get_time_clock","","",null,null],[5,"sd_event_source_get_signal","","",null,null],[5,"sd_event_source_get_child_pid","","",null,null],[6,"sd_event_handler_t","","",null,null],[6,"sd_event_io_handler_t","","",null,null],[6,"sd_event_time_handler_t","","",null,null],[6,"sd_event_signal_handler_t","","",null,null],[6,"sd_event_child_handler_t","","",null,null],[17,"SD_EVENT_OFF","","",null,null],[17,"SD_EVENT_ON","","",null,null],[17,"SD_EVENT_ONESHOT","","",null,null],[17,"SD_EVENT_INITIAL","","",null,null],[17,"SD_EVENT_ARMED","","",null,null],[17,"SD_EVENT_PENDING","","",null,null],[17,"SD_EVENT_RUNNING","","",null,null],[17,"SD_EVENT_EXITING","","",null,null],[17,"SD_EVENT_FINISHED","","",null,null],[17,"SD_EVENT_PRIORITY_IMPORTANT","","",null,null],[17,"SD_EVENT_PRIORITY_NORMAL","","",null,null],[17,"SD_EVENT_PRIORITY_IDLE","","",null,null],[0,"daemon","libsystemd_sys","",null,null],[5,"sd_listen_fds","libsystemd_sys::daemon","",null,null],[5,"sd_is_fifo","","",null,null],[5,"sd_is_special","","",null,null],[5,"sd_is_socket","","",null,null],[5,"sd_is_socket_inet","","",null,null],[5,"sd_is_socket_unix","","",null,null],[5,"sd_is_mq","","",null,null],[5,"sd_notify","","",null,null],[5,"sd_pid_notify","","",null,null],[5,"sd_booted","","",null,null],[5,"sd_watchdog_enabled","","",null,null],[0,"journal","libsystemd_sys","",null,null],[4,"sd_journal","libsystemd_sys::journal","",null,null],[5,"sd_journal_sendv","","",null,null],[5,"sd_journal_open","","",null,null],[5,"sd_journal_close","","",null,null],[5,"sd_journal_previous","","",null,null],[5,"sd_journal_next","","",null,null],[5,"sd_journal_previous_skip","","",null,null],[5,"sd_journal_next_skip","","",null,null],[5,"sd_journal_get_realtime_usec","","",null,null],[5,"sd_journal_get_monotonic_usec","","",null,null],[5,"sd_journal_set_data_threshold","","",null,null],[5,"sd_journal_get_data_threshold","","",null,null],[5,"sd_journal_get_data","","",null,null],[5,"sd_journal_enumerate_data","","",null,null],[5,"sd_journal_restart_data","","",null,null],[5,"sd_journal_add_match","","",null,null],[5,"sd_journal_add_disjunction","","",null,null],[5,"sd_journal_add_conjunction","","",null,null],[5,"sd_journal_flush_matches","","",null,null],[5,"sd_journal_seek_head","","",null,null],[5,"sd_journal_seek_tail","","",null,null],[5,"sd_journal_seek_monotonic_usec","","",null,null],[5,"sd_journal_seek_realtime_usec","","",null,null],[5,"sd_journal_seek_cursor","","",null,null],[5,"sd_journal_get_cursor","","",null,null],[5,"sd_journal_test_cursor","","",null,null],[5,"sd_journal_get_cutoff_realtime_usec","","",null,null],[5,"sd_journal_get_cutoff_monotonic_usec","","",null,null],[5,"sd_journal_get_usage","","",null,null],[5,"sd_journal_query_unique","","",null,null],[5,"sd_journal_enumerate_unique","","",null,null],[5,"sd_journal_restart_unique","","",null,null],[5,"sd_journal_get_fd","","",null,null],[5,"sd_journal_get_events","","",null,null],[5,"sd_journal_get_timeout","","",null,null],[5,"sd_journal_process","","",null,null],[5,"sd_journal_wait","","",null,null],[5,"sd_journal_reliable_fd","","",null,null],[5,"sd_journal_get_catalog","","",null,null],[5,"sd_journal_get_catalog_for_message_id","","",null,null],[17,"SD_JOURNAL_LOCAL_ONLY","","",null,null],[17,"SD_JOURNAL_RUNTIME_ONLY","","",null,null],[17,"SD_JOURNAL_SYSTEM","","",null,null],[17,"SD_JOURNAL_CURRENT_USER","","",null,null],[0,"login","libsystemd_sys","",null,null],[4,"sd_login_monitor","libsystemd_sys::login","",null,null],[5,"sd_pid_get_session","","",null,null],[5,"sd_pid_get_owner_uid","","",null,null],[5,"sd_pid_get_unit","","",null,null],[5,"sd_pid_get_user_unit","","",null,null],[5,"sd_pid_get_slice","","",null,null],[5,"sd_pid_get_user_slice","","",null,null],[5,"sd_pid_get_machine_name","","",null,null],[5,"sd_pid_get_cgroup","","",null,null],[5,"sd_peer_get_session","","",null,null],[5,"sd_peer_get_owner_uid","","",null,null],[5,"sd_peer_get_unit","","",null,null],[5,"sd_peer_get_user_unit","","",null,null],[5,"sd_peer_get_slice","","",null,null],[5,"sd_peer_get_user_slice","","",null,null],[5,"sd_peer_get_machine_name","","",null,null],[5,"sd_peer_get_cgroup","","",null,null],[5,"sd_uid_get_state","","",null,null],[5,"sd_uid_get_display","","",null,null],[5,"sd_uid_is_on_seat","","",null,null],[5,"sd_uid_get_sessions","","",null,null],[5,"sd_uid_get_seats","","",null,null],[5,"sd_session_is_active","","",null,null],[5,"sd_session_is_remote","","",null,null],[5,"sd_session_get_state","","",null,null],[5,"sd_session_get_uid","","",null,null],[5,"sd_session_get_seat","","",null,null],[5,"sd_session_get_service","","",null,null],[5,"sd_session_get_type","","",null,null],[5,"sd_session_get_class","","",null,null],[5,"sd_session_get_desktop","","",null,null],[5,"sd_session_get_display","","",null,null],[5,"sd_session_get_remote_host","","",null,null],[5,"sd_session_get_remote_user","","",null,null],[5,"sd_session_get_tty","","",null,null],[5,"sd_session_get_vt","","",null,null],[5,"sd_seat_get_active","","",null,null],[5,"sd_seat_get_sessions","","",null,null],[5,"sd_seat_can_multi_session","","",null,null],[5,"sd_seat_can_tty","","",null,null],[5,"sd_seat_can_graphical","","",null,null],[5,"sd_machine_get_class","","",null,null],[5,"sd_machine_get_ifindices","","",null,null],[5,"sd_get_seats","","",null,null],[5,"sd_get_sessions","","",null,null],[5,"sd_get_uids","","",null,null],[5,"sd_get_machine_names","","",null,null],[5,"sd_login_monitor_new","","",null,null],[5,"sd_login_monitor_unref","","",null,null],[5,"sd_login_monitor_flush","","",null,null],[5,"sd_login_monitor_get_fd","","",null,null],[5,"sd_login_monitor_get_events","","",null,null],[5,"sd_login_monitor_get_timeout","","",null,null],[11,"fmt","libsystemd_sys","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}]],"paths":[[3,"signalfd_siginfo"],[3,"siginfo_t"],[3,"iovec"],[3,"const_iovec"],[3,"sd_id128_t"],[4,"c_void"]]};
searchIndex["linked_hash_map"] = {"doc":"A HashMap wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hash_state","","Creates an empty linked hash map with the given initial hash state.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hash_state","","Creates an empty linked hash map with the given initial capacity and hash state.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map of all key-value pairs.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"LinkedHashMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine. If not possible on the particular architecture returns same as get() which is the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",11,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["odds"] = {"doc":"Odds and ends — collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"fix","","Fixpoint combinator for rust closures, generalized over the return type.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,null],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"call","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"char","","Extra functions for `char`",null,null],[3,"EncodeUtf8Error","odds::char","Placeholder",null,null],[5,"encode_utf8","","Encode a char into buf using UTF-8.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf8error"}}],[0,"string","odds","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[3,"CharChunks","","An iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",null,null],[3,"CharWindows","","An iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",null,null],[3,"CharStr","","A single-char string.",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=\"std\"`",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",2,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",2,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",2,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StrSlice","","Extension trait for `str` for string slicing without panicking",null,null],[10,"get_slice","","Return a slice of the string, if it is in bounds /and on character boundaries/, otherwise return `None`",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[8,"StrChunksWindows","","Extension traits for the `char_chunks` and `char_windows` methods",null,null],[10,"char_chunks","","Return an iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charchunks"}}],[10,"char_windows","","Return an iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charwindows"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"charchunks"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"charwindows"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new string from `c`.",11,{"inputs":[{"name":"char"}],"output":{"name":"charstr"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"vec","odds","Extensions to `Vec`",null,null],[5,"vec","odds::vec","Create a new vec from the iterable",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[8,"VecExt","","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",12,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"VecFindRemove","","",null,null],[16,"Item","","",13,null],[10,"find_remove","","Linear search for the first element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind_remove","","Linear search for the last element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[0,"slice","odds","Extra functions for slices",null,null],[3,"MendSlices","odds::slice","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"RevSlice","","A reversed view of a slice.",null,null],[5,"shared_prefix","","Return the end index of the longest shared (equal) prefix of `a` and `b`.",null,null],[5,"rotate_left","","Rotate `steps` towards lower indices.",null,null],[5,"split_aligned_for","","Split the input slice into three chunks, so that the middle chunk is a slice of a larger \"block size\" (for example T could be u64) that is correctly aligned for `T`.",null,null],[0,"unalign","","",null,null],[3,"UnalignedIter","odds::slice::unalign","An iterator of `T` (by value) where each value read using an unaligned load.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Create an `UnalignedIter` from `ptr` and `end`, which must be spaced an whole number of `T` offsets apart.",14,null],[11,"from_slice","","Create an `UnalignedIter` out of the slice of data, which iterates first in blocks of `T` (unaligned loads), and then leaves a tail of the remaining bytes.",14,null],[11,"tail","","Return a byte iterator of the remaining tail of the iterator; this can be called at any time, but in particular when the iterator has returned None.",14,{"inputs":[{"name":"self"}],"output":{"name":"slicecopyiter"}}],[11,"has_tail","","Return `true` if the tail is not empty.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek_next","","Return the next iterator element, without stepping the iterator.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"iter","odds::slice","",null,null],[3,"SliceCopyIter","odds::slice::iter","Slice (contiguous data) iterator.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",15,null],[11,"into_raw","","Return the start, end pointer of the iterator",15,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",15,null],[11,"default","","Create an empty `SliceCopyIter`.",15,{"inputs":[],"output":{"name":"self"}}],[8,"SliceFind","odds::slice","Element-finding methods for slices",null,null],[16,"Item","","",16,null],[10,"find","","Linear search for the first occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind","","Linear search for the last occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[8,"SliceFindSplit","","Element-finding methods for slices",null,null],[16,"Item","","",17,null],[10,"find_split","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split","","Linear search for the last occurrence  `elt` in the slice.",17,null],[10,"find_split_mut","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split_mut","","Linear search for the last occurrence  `elt` in the slice.",17,null],[8,"SliceIterExt","","Extra iterator adaptors for iterators of slice elements.",null,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",18,{"inputs":[{"name":"self"}],"output":{"name":"mendslices"}}],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Pod","","\"plain old data\": Types that we can stick arbitrary bit patterns into, and thus use them as blocks in `split_aligned_for` or in `UnalignedIter`.",null,null],[11,"find","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"rfind","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the length of the slice.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inner_ref","","",19,null],[11,"inner_mut","","",19,null],[11,"into_boxed_slice","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"iter","","Return a by-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"iter_mut","","Return a by-mutable-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"split_at","","",19,null],[11,"split_at_mut","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"revslice"}],"output":{"name":"bool"}}],[11,"eq","","",19,null],[11,"hash","","",19,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[0,"stride","odds","Slice iterator with custom step size",null,null],[3,"Stride","odds::stride","(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[11,"from_ptr_len","","Create a Stride iterator from a raw pointer.",21,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",22,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",21,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",21,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",22,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",22,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[0,"prelude","odds","prelude of often used traits and functions",null,null],[8,"IndexRange","","**IndexRange** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Fix"],[3,"EncodeUtf8Error"],[8,"StrExt"],[8,"StrSlice"],[8,"StringExt"],[8,"StrChunksWindows"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"CharChunks"],[3,"CharWindows"],[3,"CharStr"],[8,"VecExt"],[8,"VecFindRemove"],[3,"UnalignedIter"],[3,"SliceCopyIter"],[8,"SliceFind"],[8,"SliceFindSplit"],[8,"SliceIterExt"],[3,"RevSlice"],[3,"MendSlices"],[3,"Stride"],[3,"StrideMut"],[8,"IndexRange"]]};
searchIndex["opengles_graphics"] = {"doc":"An OpenGL ES back-end for Rust-Graphics","items":[[4,"OpenGL","opengles_graphics","",null,null],[13,"V2_0","","",0,null],[13,"V2_1","","",0,null],[13,"V3_0","","",0,null],[13,"V3_1","","",0,null],[13,"V3_2","","",0,null],[13,"V3_3","","",0,null],[13,"V4_0","","",0,null],[13,"V4_1","","",0,null],[13,"V4_2","","",0,null],[13,"V4_3","","",0,null],[13,"V4_4","","",0,null],[13,"V4_5","","",0,null],[3,"GlGraphics","","Contains OpenGL data.",null,null],[3,"Texture","","Wraps OpenGL texture data. The texture gets deleted when running out of scope.",null,null],[0,"shader_utils","","Helper functions for dealing with shaders.",null,null],[3,"DynamicAttribute","opengles_graphics::shader_utils","Describes a shader attribute.",null,null],[5,"compile_shader","","Compiles a shader.",null,{"inputs":[{"name":"glenum"},{"name":"str"}],"output":{"name":"result"}}],[5,"attribute_location","","Finds attribute location from a program.",null,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[5,"uniform_location","","Finds uniform location from a program.",null,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"bind_vao","","Binds to a vertex array object.",1,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"xyz","","Create XYZ vertex attribute.",1,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[11,"xy","","Create XY vertex attribute.",1,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[11,"rgb","","Create RGB color attribute.",1,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[11,"rgba","","Create RGBA color attribute.",1,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[11,"uv","","Create texture coordinate attribute.",1,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"result"}}],[11,"set","","Sets attribute data.",1,null],[0,"glyph_cache","opengles_graphics","Glyph caching",null,null],[6,"FontSize","opengles_graphics::glyph_cache","The type used for font size.",null,null],[3,"GlyphCache","","A struct used for caching rendered font.",null,null],[12,"font","","The font.",2,null],[6,"Character","","The type alias for font characters.",null,null],[11,"from_font","","Constructs a GlyphCache from a Font.",2,{"inputs":[{"name":"font"}],"output":{"name":"self"}}],[11,"new","","Constructor for a GlyphCache.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_bytes","","Creates a GlyphCache for a font stored in memory.",2,null],[11,"preload_chars","","Load all characters in the `chars` iterator for `size`",2,{"inputs":[{"name":"self"},{"name":"fontsize"},{"name":"i"}],"output":null}],[11,"preload_printable_ascii","","Load all the printable ASCII characters for `size`. Includes space.",2,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":null}],[11,"opt_character","","Return `ch` for `size` if it's already cached. Don't load. See the `preload_*` functions.",2,{"inputs":[{"name":"self"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"option"}}],[11,"character","","",2,{"inputs":[{"name":"self"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"character"}}],[0,"error","opengles_graphics","Errors",null,null],[4,"Error","opengles_graphics::error","An enum to represent various possible run-time errors that may occur.",null,null],[13,"IoError","","An error happened with I/O.",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"gl","opengles_graphics","",null,null],[3,"FnPtr","opengles_graphics::gl","",null,null],[5,"CullFace","","",null,null],[5,"GetTexParameteriv","","",null,null],[5,"ProgramUniformMatrix2x4fv","","Fallbacks: ProgramUniformMatrix2x4fvEXT",null,null],[5,"Disable","","",null,null],[5,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",null,null],[5,"GetProgramPipelineInfoLog","","",null,null],[5,"PolygonOffset","","",null,null],[5,"Finish","","",null,null],[5,"GetInteger64i_v","","",null,null],[5,"Uniform3fv","","Fallbacks: Uniform3fvARB",null,null],[5,"Scissor","","",null,null],[5,"TexParameterfv","","",null,null],[5,"ProgramUniform4uiv","","Fallbacks: ProgramUniform4uivEXT",null,null],[5,"GetBufferParameteri64v","","",null,null],[5,"GetTexLevelParameterfv","","",null,null],[5,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",null,null],[5,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",null,null],[5,"Viewport","","",null,null],[5,"BlendFunc","","",null,null],[5,"Uniform3i","","Fallbacks: Uniform3iARB",null,null],[5,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB, CompressedTexImage3DOES",null,null],[5,"BindImageTexture","","",null,null],[5,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",null,null],[5,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glenum"}}],[5,"MemoryBarrier","","Fallbacks: MemoryBarrierEXT",null,null],[5,"ClearStencil","","",null,null],[5,"Uniform2f","","Fallbacks: Uniform2fARB",null,null],[5,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",null,null],[5,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",null,null],[5,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",null,null],[5,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",null,null],[5,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",null,null],[5,"VertexAttribBinding","","",null,null],[5,"BufferData","","Fallbacks: BufferDataARB",null,null],[5,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",null,null],[5,"GetShaderSource","","Fallbacks: GetShaderSourceARB",null,null],[5,"ProgramUniform3ui","","Fallbacks: ProgramUniform3uiEXT",null,null],[5,"ValidateProgram","","Fallbacks: ValidateProgramARB",null,null],[5,"GetProgramiv","","",null,null],[5,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",null,null],[5,"MemoryBarrierByRegion","","",null,null],[5,"TexParameteriv","","",null,null],[5,"ProgramUniform3uiv","","Fallbacks: ProgramUniform3uivEXT",null,null],[5,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",null,null],[5,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",null,null],[5,"CompileShader","","Fallbacks: CompileShaderARB",null,null],[5,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",null,null],[5,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",null,null],[5,"GetActiveUniformBlockiv","","",null,null],[5,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",null,null],[5,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",null,null],[5,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",null,null],[5,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",null,null],[5,"ProgramUniform2fv","","Fallbacks: ProgramUniform2fvEXT",null,null],[5,"ReadPixels","","",null,null],[5,"IsProgram","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"LineWidth","","",null,null],[5,"ReleaseShaderCompiler","","",null,null],[5,"Uniform2ui","","Fallbacks: Uniform2uiEXT",null,null],[5,"ProgramUniform4fv","","Fallbacks: ProgramUniform4fvEXT",null,null],[5,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",null,null],[5,"Uniform4iv","","Fallbacks: Uniform4ivARB",null,null],[5,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",null,null],[5,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",null,null],[5,"GenSamplers","","",null,null],[5,"VertexAttribIFormat","","",null,null],[5,"DrawElements","","",null,null],[5,"ProgramUniform3i","","Fallbacks: ProgramUniform3iEXT",null,null],[5,"CreateProgram","","Fallbacks: CreateProgramObjectARB",null,{"inputs":[],"output":{"name":"gluint"}}],[5,"DeleteProgram","","",null,null],[5,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",null,null],[5,"ProgramUniform1fv","","Fallbacks: ProgramUniform1fvEXT",null,null],[5,"GetActiveUniformsiv","","",null,null],[5,"ProgramUniform4ui","","Fallbacks: ProgramUniform4uiEXT",null,null],[5,"TexParameterf","","",null,null],[5,"ProgramUniform2i","","Fallbacks: ProgramUniform2iEXT",null,null],[5,"FramebufferParameteri","","",null,null],[5,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",null,null],[5,"GetTexParameterfv","","",null,null],[5,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",null,null],[5,"ProgramUniform1i","","Fallbacks: ProgramUniform1iEXT",null,null],[5,"GetTexLevelParameteriv","","",null,null],[5,"TexStorage2DMultisample","","",null,null],[5,"ClearColor","","",null,null],[5,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",null,null],[5,"DrawArrays","","Fallbacks: DrawArraysEXT",null,null],[5,"GetProgramResourceName","","",null,null],[5,"SamplerParameteriv","","",null,null],[5,"TexStorage2D","","Fallbacks: TexStorage2DEXT",null,null],[5,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",null,null],[5,"GetUniformBlockIndex","","",null,null],[5,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",null,null],[5,"ProgramUniformMatrix3x2fv","","Fallbacks: ProgramUniformMatrix3x2fvEXT",null,null],[5,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",null,null],[5,"PixelStorei","","",null,null],[5,"ProgramUniformMatrix3x4fv","","Fallbacks: ProgramUniformMatrix3x4fvEXT",null,null],[5,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",null,null],[5,"BeginQuery","","Fallbacks: BeginQueryARB",null,null],[5,"GenProgramPipelines","","",null,null],[5,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",null,null],[5,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",null,null],[5,"ProgramUniform3f","","Fallbacks: ProgramUniform3fEXT",null,null],[5,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",null,null],[5,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",null,null],[5,"GetProgramResourceiv","","",null,null],[5,"ActiveTexture","","Fallbacks: ActiveTextureARB",null,null],[5,"GetAttachedShaders","","",null,null],[5,"GetIntegerv","","",null,null],[5,"ProgramUniform1iv","","Fallbacks: ProgramUniform1ivEXT",null,null],[5,"Uniform1ui","","Fallbacks: Uniform1uiEXT",null,null],[5,"Uniform4f","","Fallbacks: Uniform4fARB",null,null],[5,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",null,null],[5,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",null,null],[5,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",null,null],[5,"GenBuffers","","Fallbacks: GenBuffersARB",null,null],[5,"Uniform3iv","","Fallbacks: Uniform3ivARB",null,null],[5,"BindRenderbuffer","","",null,null],[5,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",null,null],[5,"CreateShaderProgramv","","",null,null],[5,"GetSamplerParameterfv","","",null,null],[5,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",null,null],[5,"StencilOp","","",null,null],[5,"InvalidateSubFramebuffer","","",null,null],[5,"UniformBlockBinding","","",null,null],[5,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",null,null],[5,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",null,{"inputs":[{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":{"name":"glenum"}}],[5,"FenceSync","","Fallbacks: FenceSyncAPPLE",null,{"inputs":[{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[5,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",null,null],[5,"SampleCoverage","","Fallbacks: SampleCoverageARB",null,null],[5,"DeleteSamplers","","",null,null],[5,"SampleMaski","","",null,null],[5,"GetError","","",null,{"inputs":[],"output":{"name":"glenum"}}],[5,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",null,null],[5,"ShaderBinary","","",null,null],[5,"Uniform1i","","Fallbacks: Uniform1iARB",null,null],[5,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",null,null],[5,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",null,null],[5,"EndQuery","","Fallbacks: EndQueryARB",null,null],[5,"BindVertexBuffer","","",null,null],[5,"Uniform3f","","Fallbacks: Uniform3fARB",null,null],[5,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"SamplerParameterf","","",null,null],[5,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",null,null],[5,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",null,null],[5,"VertexAttribFormat","","",null,null],[5,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",null,null],[5,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",null,null],[5,"ProgramUniform1f","","Fallbacks: ProgramUniform1fEXT",null,null],[5,"BindTransformFeedback","","",null,null],[5,"ProgramUniformMatrix4fv","","Fallbacks: ProgramUniformMatrix4fvEXT",null,null],[5,"ProgramUniform1uiv","","Fallbacks: ProgramUniform1uivEXT",null,null],[5,"CreateShader","","Fallbacks: CreateShaderObjectARB",null,{"inputs":[{"name":"glenum"}],"output":{"name":"gluint"}}],[5,"Uniform1fv","","Fallbacks: Uniform1fvARB",null,null],[5,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",null,null],[5,"ProgramUniform2uiv","","Fallbacks: ProgramUniform2uivEXT",null,null],[5,"GetShaderPrecisionFormat","","",null,null],[5,"SamplerParameteri","","",null,null],[5,"StencilMaskSeparate","","",null,null],[5,"ReadBuffer","","",null,null],[5,"BlendEquation","","Fallbacks: BlendEquationEXT",null,null],[5,"BindBuffer","","Fallbacks: BindBufferARB",null,null],[5,"IsSync","","Fallbacks: IsSyncAPPLE",null,{"inputs":[{"name":"glsync"}],"output":{"name":"glboolean"}}],[5,"ProgramUniform4i","","Fallbacks: ProgramUniform4iEXT",null,null],[5,"GetFloatv","","",null,null],[5,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",null,null],[5,"BindSampler","","",null,null],[5,"Uniform3ui","","Fallbacks: Uniform3uiEXT",null,null],[5,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",null,null],[5,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",null,null],[5,"TexStorage3D","","Fallbacks: TexStorage3DEXT",null,null],[5,"AttachShader","","Fallbacks: AttachObjectARB",null,null],[5,"TexImage3D","","Fallbacks: TexImage3DEXT, TexImage3DOES",null,null],[5,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",null,null],[5,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"GetBooleanv","","",null,null],[5,"StencilFunc","","",null,null],[5,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",null,null],[5,"BlendColor","","Fallbacks: BlendColorEXT",null,null],[5,"Hint","","",null,null],[5,"ClearDepthf","","Fallbacks: ClearDepthfOES",null,null],[5,"IsProgramPipeline","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"StencilMask","","",null,null],[5,"Flush","","",null,null],[5,"DispatchComputeIndirect","","",null,null],[5,"GetProgramPipelineiv","","",null,null],[5,"ClearBufferfi","","",null,null],[5,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",null,null],[5,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",null,null],[5,"DrawArraysIndirect","","",null,null],[5,"GetProgramInterfaceiv","","",null,null],[5,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",null,null],[5,"IsTexture","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"ProgramUniform4iv","","Fallbacks: ProgramUniform4ivEXT",null,null],[5,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",null,null],[5,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",null,null],[5,"GetActiveUniformBlockName","","",null,null],[5,"Uniform1f","","Fallbacks: Uniform1fARB",null,null],[5,"ProgramUniformMatrix2fv","","Fallbacks: ProgramUniformMatrix2fvEXT",null,null],[5,"DeleteQueries","","Fallbacks: DeleteQueriesARB",null,null],[5,"UseProgramStages","","",null,null],[5,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",null,null],[5,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",null,null],[5,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",null,null],[5,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",null,null],[5,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",null,null],[5,"GenQueries","","Fallbacks: GenQueriesARB",null,null],[5,"GetShaderiv","","",null,null],[5,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT, CopyTexSubImage3DOES",null,null],[5,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",null,null],[5,"GetSynciv","","Fallbacks: GetSyncivAPPLE",null,null],[5,"GetSamplerParameteriv","","",null,null],[5,"GetQueryiv","","Fallbacks: GetQueryivARB",null,null],[5,"Uniform2iv","","Fallbacks: Uniform2ivARB",null,null],[5,"GetInternalformativ","","",null,null],[5,"ClearBufferiv","","",null,null],[5,"VertexBindingDivisor","","",null,null],[5,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",null,null],[5,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",null,null],[5,"DepthMask","","",null,null],[5,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",null,null],[5,"BindProgramPipeline","","",null,null],[5,"LinkProgram","","Fallbacks: LinkProgramARB",null,null],[5,"ProgramBinary","","Fallbacks: ProgramBinaryOES",null,null],[5,"IsShader","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"Uniform1iv","","Fallbacks: Uniform1ivARB",null,null],[5,"ProgramUniformMatrix3fv","","Fallbacks: ProgramUniformMatrix3fvEXT",null,null],[5,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",null,null],[5,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB, CompressedTexSubImage3DOES",null,null],[5,"ProgramUniform4f","","Fallbacks: ProgramUniform4fEXT",null,null],[5,"Uniform4ui","","Fallbacks: Uniform4uiEXT",null,null],[5,"GetUniformfv","","Fallbacks: GetUniformfvARB",null,null],[5,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",null,null],[5,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",null,null],[5,"Uniform4fv","","Fallbacks: Uniform4fvARB",null,null],[5,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",null,null],[5,"TexImage2D","","",null,null],[5,"ShaderSource","","Fallbacks: ShaderSourceARB",null,null],[5,"GetFramebufferParameteriv","","",null,null],[5,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",null,null],[5,"DepthFunc","","",null,null],[5,"GetUniformiv","","Fallbacks: GetUniformivARB",null,null],[5,"IsSampler","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",null,null],[5,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",null,null],[5,"ClearBufferuiv","","",null,null],[5,"ProgramUniformMatrix4x3fv","","Fallbacks: ProgramUniformMatrix4x3fvEXT",null,null],[5,"DeleteShader","","",null,null],[5,"ProgramUniform2ui","","Fallbacks: ProgramUniform2uiEXT",null,null],[5,"DepthRangef","","Fallbacks: DepthRangefOES",null,null],[5,"ProgramUniformMatrix2x3fv","","Fallbacks: ProgramUniformMatrix2x3fvEXT",null,null],[5,"IsQuery","","Fallbacks: IsQueryARB",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"GetShaderInfoLog","","",null,null],[5,"StencilFuncSeparate","","",null,null],[5,"DeleteProgramPipelines","","",null,null],[5,"Enable","","",null,null],[5,"ValidateProgramPipeline","","",null,null],[5,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",null,null],[5,"GetProgramResourceLocation","","",null,null],[5,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",null,null],[5,"Clear","","",null,null],[5,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",null,null],[5,"BindVertexArray","","Fallbacks: BindVertexArrayOES",null,null],[5,"ColorMask","","",null,null],[5,"DrawElementsIndirect","","",null,null],[5,"FrontFace","","",null,null],[5,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",null,null],[5,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",null,null],[5,"SamplerParameterfv","","",null,null],[5,"GetUniformIndices","","",null,null],[5,"Uniform2i","","Fallbacks: Uniform2iARB",null,null],[5,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",null,null],[5,"TexParameteri","","",null,null],[5,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",null,null],[5,"ProgramUniform3fv","","Fallbacks: ProgramUniform3fvEXT",null,null],[5,"DispatchCompute","","",null,null],[5,"BindTexture","","Fallbacks: BindTextureEXT",null,null],[5,"WaitSync","","Fallbacks: WaitSyncAPPLE",null,null],[5,"ProgramUniform2f","","Fallbacks: ProgramUniform2fEXT",null,null],[5,"DetachShader","","Fallbacks: DetachObjectARB",null,null],[5,"GetStringi","","",null,null],[5,"DeleteTextures","","",null,null],[5,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT, TexSubImage3DOES",null,null],[5,"ClearBufferfv","","",null,null],[5,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",null,null],[5,"IsBuffer","","Fallbacks: IsBufferARB",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",null,null],[5,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",null,null],[5,"IsEnabled","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",null,null],[5,"Uniform4i","","Fallbacks: Uniform4iARB",null,null],[5,"ProgramUniform3iv","","Fallbacks: ProgramUniform3ivEXT",null,null],[5,"GetProgramInfoLog","","",null,null],[5,"Uniform2fv","","Fallbacks: Uniform2fvARB",null,null],[5,"ProgramUniformMatrix4x2fv","","Fallbacks: ProgramUniformMatrix4x2fvEXT",null,null],[5,"ActiveShaderProgram","","",null,null],[5,"GetString","","",null,null],[5,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",null,null],[5,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",null,null],[5,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",null,null],[5,"GetProgramResourceIndex","","",null,null],[5,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",null,null],[5,"GenTextures","","",null,null],[5,"ProgramUniform2iv","","Fallbacks: ProgramUniform2ivEXT",null,null],[5,"ProgramUniform1ui","","Fallbacks: ProgramUniform1uiEXT",null,null],[5,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",null,null],[5,"UseProgram","","Fallbacks: UseProgramObjectARB",null,null],[5,"InvalidateFramebuffer","","",null,null],[5,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",null,null],[5,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",null,null],[5,"BindFramebuffer","","",null,null],[5,"BufferSubData","","Fallbacks: BufferSubDataARB",null,null],[5,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`. ~~~ignore gl::load_with(|s| glfw.get_proc_address(s)); ~~~",null,{"inputs":[{"name":"f"}],"output":null}],[0,"types","","",null,null],[4,"__GLsync","opengles_graphics::gl::types","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[6,"GLenum","","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[0,"CullFace","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CullFace","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetTexParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2x4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix2x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Disable","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Disable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramPipelineInfoLog","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramPipelineInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PolygonOffset","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::PolygonOffset","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Finish","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Finish","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInteger64i_v","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetInteger64i_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Scissor","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Scissor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferParameteri64v","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetBufferParameteri64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexLevelParameterfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetTexLevelParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetRenderbufferParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetRenderbufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribI4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Viewport","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Viewport","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFunc","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BlendFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage3D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CompressedTexImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindImageTexture","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindImageTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteSync","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CheckFramebufferStatus","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CheckFramebufferStatus","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MemoryBarrier","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::MemoryBarrier","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearStencil","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearStencil","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PauseTransformFeedback","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::PauseTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquationSeparate","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BlendEquationSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilOpSeparate","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::StencilOpSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribBinding","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferData","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenTransformFeedbacks","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenTransformFeedbacks","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderSource","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetShaderSource","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ValidateProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ValidateProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MemoryBarrierByRegion","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::MemoryBarrierByRegion","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix3x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompileShader","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CompileShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexImage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CopyTexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawRangeElements","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawRangeElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformBlockiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetActiveUniformBlockiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteBuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenFramebuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribPointer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadPixels","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ReadPixels","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LineWidth","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::LineWidth","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReleaseShaderCompiler","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ReleaseShaderCompiler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndTransformFeedback","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::EndTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginTransformFeedback","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BeginTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteFramebuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenSamplers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribIFormat","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribIFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElements","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CreateProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetIntegeri_v","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetIntegeri_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformsiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetActiveUniformsiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterf","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferParameteri","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FramebufferParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FlushMappedBufferRange","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FlushMappedBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetTexParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniform","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetActiveUniform","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexLevelParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetTexLevelParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage2DMultisample","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexStorage2DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearColor","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArrays","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceName","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramResourceName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::SamplerParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexStorage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformuiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetUniformuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformBlockIndex","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetUniformBlockIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3x2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix3x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenRenderbuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PixelStorei","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::PixelStorei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3x4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix3x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawBuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginQuery","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BeginQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenProgramPipelines","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenProgramPipelines","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribI4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInteger64v","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetInteger64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTransformFeedbackVarying","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetTransformFeedbackVarying","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramResourceiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ActiveTexture","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ActiveTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetAttachedShaders","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetAttachedShaders","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetIntegerv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetIntegerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferRenderbuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FramebufferRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFragDataLocation","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetFragDataLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenBuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindRenderbuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramParameteri","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateShaderProgramv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CreateShaderProgramv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetSamplerParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CopyTexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilOp","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::StencilOp","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateSubFramebuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::InvalidateSubFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformBlockBinding","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformBlockBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix4x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClientWaitSync","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClientWaitSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FenceSync","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FenceSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CompressedTexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SampleCoverage","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::SampleCoverage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteSamplers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SampleMaski","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::SampleMaski","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetError","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetError","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EnableVertexAttribArray","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::EnableVertexAttribArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ShaderBinary","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ShaderBinary","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribIPointer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribIPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndQuery","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::EndQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindVertexBuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindVertexBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsVertexArray","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsVertexArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterf","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::SamplerParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteTransformFeedbacks","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteTransformFeedbacks","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FramebufferTexture2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribFormat","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetVertexAttribiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramBinary","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramBinary","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTransformFeedback","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateShader","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CreateShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBufferRange","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderPrecisionFormat","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetShaderPrecisionFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameteri","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::SamplerParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilMaskSeparate","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::StencilMaskSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadBuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ReadBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquation","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BlendEquation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsSync","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFloatv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetFloatv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetVertexAttribfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindSampler","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindSampler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindAttribLocation","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindAttribLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"RenderbufferStorage","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::RenderbufferStorage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage3D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexStorage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"AttachShader","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::AttachShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage3D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFramebufferAttachmentParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetFramebufferAttachmentParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsRenderbuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBooleanv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetBooleanv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilFunc","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::StencilFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteRenderbuffers","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendColor","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BlendColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Hint","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Hint","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearDepthf","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearDepthf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsProgramPipeline","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsProgramPipeline","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilMask","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::StencilMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Flush","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Flush","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DispatchComputeIndirect","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DispatchComputeIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramPipelineiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramPipelineiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferfi","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearBufferfi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArraysIndirect","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawArraysIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramInterfaceiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramInterfaceiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ResumeTransformFeedback","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ResumeTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsTexture","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribDivisor","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribDivisor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetMultisamplefv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetMultisamplefv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformBlockName","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetActiveUniformBlockName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteQueries","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UseProgramStages","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UseProgramStages","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix2x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlitFramebuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BlitFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsFramebuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTextureLayer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FramebufferTextureLayer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBufferBase","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindBufferBase","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenQueries","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetShaderiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage3D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CopyTexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformLocation","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetUniformLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSynciv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetSynciv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetSamplerParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetQueryiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInternalformativ","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetInternalformativ","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearBufferiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexBindingDivisor","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexBindingDivisor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetAttribLocation","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetAttribLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBooleani_v","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetBooleani_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthMask","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DepthMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CompressedTexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindProgramPipeline","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindProgramPipeline","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LinkProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::LinkProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramBinary","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramBinary","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsShader","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribIiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetVertexAttribIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage3D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CompressedTexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetUniformfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix3x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix4x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"RenderbufferStorageMultisample","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::RenderbufferStorageMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage2D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ShaderSource","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ShaderSource","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFramebufferParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetFramebufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArraysInstanced","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawArraysInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthFunc","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DepthFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetUniformiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsSampler","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsSampler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenerateMipmap","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenerateMipmap","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttrib2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferuiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearBufferuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4x3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix4x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteShader","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthRangef","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DepthRangef","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2x3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix2x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsQuery","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderInfoLog","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetShaderInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilFuncSeparate","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::StencilFuncSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteProgramPipelines","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteProgramPipelines","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Enable","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Enable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ValidateProgramPipeline","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ValidateProgramPipeline","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferParameteriv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetBufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceLocation","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramResourceLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectuiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetQueryObjectuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Clear","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Clear","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UnmapBuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UnmapBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapBufferRange","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::MapBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindVertexArray","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindVertexArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorMask","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ColorMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsIndirect","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawElementsIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FrontFace","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::FrontFace","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFuncSeparate","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BlendFuncSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteVertexArrays","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::SamplerParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformIndices","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetUniformIndices","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4uiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribI4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameteri","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DispatchCompute","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DispatchCompute","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTexture","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"WaitSync","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::WaitSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2f","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DetachShader","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DetachShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetStringi","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetStringi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteTextures","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DeleteTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage3D","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferfv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ClearBufferfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x3fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UniformMatrix2x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsBuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveAttrib","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetActiveAttrib","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TransformFeedbackVaryings","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::TransformFeedbackVaryings","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsEnabled","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsEnabled","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribIuiv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetVertexAttribIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4i","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramInfoLog","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::Uniform2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4x2fv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniformMatrix4x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ActiveShaderProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ActiveShaderProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetString","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetString","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::VertexAttribI4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyBufferSubData","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::CopyBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenVertexArrays","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceIndex","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetProgramResourceIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DisableVertexAttribArray","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DisableVertexAttribArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenTextures","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GenTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2iv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1ui","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::ProgramUniform1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsTransformFeedback","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::IsTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstanced","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::DrawElementsInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UseProgram","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::UseProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateFramebuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::InvalidateFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribPointerv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetVertexAttribPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferPointerv","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::GetBufferPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFramebuffer","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BindFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferSubData","opengles_graphics::gl","",null,null],[5,"is_loaded","opengles_graphics::gl::BufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[17,"NEVER","opengles_graphics::gl","",null,null],[17,"INT_VEC2","","",null,null],[17,"FUNC_SUBTRACT","","",null,null],[17,"TRIANGLES","","",null,null],[17,"BLOCK_INDEX","","",null,null],[17,"TEXTURE_RED_SIZE","","",null,null],[17,"RENDERBUFFER_SAMPLES","","",null,null],[17,"TEXTURE2","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",null,null],[17,"UNSIGNED_INT_24_8","","",null,null],[17,"RGBA8_SNORM","","",null,null],[17,"STENCIL_PASS_DEPTH_FAIL","","",null,null],[17,"COLOR_ATTACHMENT14","","",null,null],[17,"SCISSOR_TEST","","",null,null],[17,"SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE11","","",null,null],[17,"INVALID_INDEX","","",null,null],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",null,null],[17,"PROGRAM_BINARY_FORMATS","","",null,null],[17,"FLOAT_MAT4x3","","",null,null],[17,"TEXTURE9","","",null,null],[17,"FRONT_AND_BACK","","",null,null],[17,"MAX_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"BLEND_EQUATION_RGB","","",null,null],[17,"RGBA8","","",null,null],[17,"POLYGON_OFFSET_UNITS","","",null,null],[17,"GREEN","","",null,null],[17,"DEPTH_RANGE","","",null,null],[17,"ONE","","",null,null],[17,"RG","","",null,null],[17,"LINK_STATUS","","",null,null],[17,"COLOR_ATTACHMENT18","","",null,null],[17,"TEXTURE_BINDING_3D","","",null,null],[17,"TEXTURE_MIN_FILTER","","",null,null],[17,"TEXTURE24","","",null,null],[17,"COLOR_BUFFER_BIT","","",null,null],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",null,null],[17,"TEXTURE10","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",null,null],[17,"ARRAY_BUFFER","","",null,null],[17,"BUFFER_MAP_POINTER","","",null,null],[17,"TEXTURE_RED_TYPE","","",null,null],[17,"MAP_WRITE_BIT","","",null,null],[17,"READ_WRITE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",null,null],[17,"RASTERIZER_DISCARD","","",null,null],[17,"COLOR_ATTACHMENT3","","",null,null],[17,"STREAM_READ","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",null,null],[17,"FRONT","","",null,null],[17,"TIMEOUT_EXPIRED","","",null,null],[17,"LINE_STRIP","","",null,null],[17,"FIXED","","",null,null],[17,"RGB32I","","",null,null],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",null,null],[17,"DRAW_BUFFER10","","",null,null],[17,"TIMEOUT_IGNORED","","",null,null],[17,"IMAGE_BINDING_LAYER","","",null,null],[17,"RGB32F","","",null,null],[17,"BLEND_SRC_RGB","","",null,null],[17,"TEXTURE15","","",null,null],[17,"UNIFORM_BARRIER_BIT","","",null,null],[17,"DEPTH_COMPONENT24","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",null,null],[17,"TEXTURE_SAMPLES","","",null,null],[17,"UNSIGNED_INT_2_10_10_10_REV","","",null,null],[17,"STATIC_DRAW","","",null,null],[17,"BOOL_VEC3","","",null,null],[17,"RGBA16UI","","",null,null],[17,"TEXTURE27","","",null,null],[17,"IMAGE_BINDING_LEVEL","","",null,null],[17,"HIGH_FLOAT","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTERS","","",null,null],[17,"ELEMENT_ARRAY_BARRIER_BIT","","",null,null],[17,"MAX_IMAGE_UNITS","","",null,null],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"KEEP","","",null,null],[17,"COLOR_ATTACHMENT26","","",null,null],[17,"TOP_LEVEL_ARRAY_STRIDE","","",null,null],[17,"COLOR_ATTACHMENT16","","",null,null],[17,"SYNC_FENCE","","",null,null],[17,"COPY_READ_BUFFER_BINDING","","",null,null],[17,"UNSIGNED_INT_VEC4","","",null,null],[17,"MAX_SHADER_STORAGE_BUFFER_BINDINGS","","",null,null],[17,"RG32I","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER","","",null,null],[17,"TEXTURE_WRAP_T","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BARRIER_BIT","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",null,null],[17,"FRAMEBUFFER_DEFAULT","","",null,null],[17,"MAX_UNIFORM_LOCATIONS","","",null,null],[17,"SEPARATE_ATTRIBS","","",null,null],[17,"DELETE_STATUS","","",null,null],[17,"R16I","","",null,null],[17,"TEXTURE16","","",null,null],[17,"UNPACK_IMAGE_HEIGHT","","",null,null],[17,"INVERT","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"MINOR_VERSION","","",null,null],[17,"MAX_ELEMENTS_INDICES","","",null,null],[17,"INTERLEAVED_ATTRIBS","","",null,null],[17,"MAX_FRAMEBUFFER_HEIGHT","","",null,null],[17,"TEXTURE31","","",null,null],[17,"OUT_OF_MEMORY","","",null,null],[17,"LINEAR_MIPMAP_LINEAR","","",null,null],[17,"RENDERBUFFER_WIDTH","","",null,null],[17,"ALPHA","","",null,null],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",null,null],[17,"UNSIGNALED","","",null,null],[17,"TEXTURE_IMMUTABLE_FORMAT","","",null,null],[17,"RGB10_A2UI","","",null,null],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",null,null],[17,"RGB16UI","","",null,null],[17,"ANY_SAMPLES_PASSED","","",null,null],[17,"FRAMEBUFFER","","",null,null],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",null,null],[17,"INVALID_VALUE","","",null,null],[17,"BUFFER_UPDATE_BARRIER_BIT","","",null,null],[17,"ATOMIC_COUNTER_BARRIER_BIT","","",null,null],[17,"VERTEX_BINDING_STRIDE","","",null,null],[17,"PROGRAM_SEPARABLE","","",null,null],[17,"TEXTURE_CUBE_MAP","","",null,null],[17,"PIXEL_PACK_BUFFER","","",null,null],[17,"DEPTH_TEST","","",null,null],[17,"TOP_LEVEL_ARRAY_SIZE","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",null,null],[17,"RENDERBUFFER_RED_SIZE","","",null,null],[17,"R32F","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",null,null],[17,"COLOR_ATTACHMENT4","","",null,null],[17,"COMPILE_STATUS","","",null,null],[17,"REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"TRIANGLE_STRIP","","",null,null],[17,"INT_SAMPLER_CUBE","","",null,null],[17,"DRAW_BUFFER11","","",null,null],[17,"SAMPLE_MASK_VALUE","","",null,null],[17,"MAX_SAMPLES","","",null,null],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",null,null],[17,"BLEND_DST_ALPHA","","",null,null],[17,"INCR_WRAP","","",null,null],[17,"COLOR_ATTACHMENT27","","",null,null],[17,"TEXTURE1","","",null,null],[17,"EQUAL","","",null,null],[17,"VERTEX_SHADER_BIT","","",null,null],[17,"MAX_ELEMENTS_VERTICES","","",null,null],[17,"BLUE","","",null,null],[17,"RGBA32I","","",null,null],[17,"GREEN_BITS","","",null,null],[17,"MAX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_FRAMEBUFFER_SAMPLES","","",null,null],[17,"BOOL","","",null,null],[17,"STATIC_READ","","",null,null],[17,"ALL_SHADER_BITS","","",null,null],[17,"ALPHA_BITS","","",null,null],[17,"RGB5_A1","","",null,null],[17,"TEXTURE20","","",null,null],[17,"POLYGON_OFFSET_FACTOR","","",null,null],[17,"R8","","",null,null],[17,"TEXTURE26","","",null,null],[17,"R16UI","","",null,null],[17,"NAME_LENGTH","","",null,null],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",null,null],[17,"TEXTURE_FETCH_BARRIER_BIT","","",null,null],[17,"INT_2_10_10_10_REV","","",null,null],[17,"TEXTURE_BINDING_2D_ARRAY","","",null,null],[17,"NUM_EXTENSIONS","","",null,null],[17,"ONE_MINUS_SRC_ALPHA","","",null,null],[17,"STATIC_COPY","","",null,null],[17,"RGB9_E5","","",null,null],[17,"OFFSET","","",null,null],[17,"FRAMEBUFFER_DEFAULT_WIDTH","","",null,null],[17,"RED_BITS","","",null,null],[17,"SIGNALED","","",null,null],[17,"TEXTURE13","","",null,null],[17,"MAX_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VARYING_VECTORS","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"DST_COLOR","","",null,null],[17,"DST_ALPHA","","",null,null],[17,"TEXTURE3","","",null,null],[17,"UNIFORM_BUFFER_START","","",null,null],[17,"PROGRAM_PIPELINE_BINDING","","",null,null],[17,"SAMPLER_2D_ARRAY_SHADOW","","",null,null],[17,"INVALID_ENUM","","",null,null],[17,"SHADER_SOURCE_LENGTH","","",null,null],[17,"DECR","","",null,null],[17,"FLOAT_MAT2","","",null,null],[17,"POLYGON_OFFSET_FILL","","",null,null],[17,"RGB_INTEGER","","",null,null],[17,"VERTEX_ARRAY_BINDING","","",null,null],[17,"ONE_MINUS_CONSTANT_ALPHA","","",null,null],[17,"TRANSFORM_FEEDBACK_PAUSED","","",null,null],[17,"TEXTURE_HEIGHT","","",null,null],[17,"R32I","","",null,null],[17,"NUM_PROGRAM_BINARY_FORMATS","","",null,null],[17,"TEXTURE_2D","","",null,null],[17,"ELEMENT_ARRAY_BUFFER","","",null,null],[17,"MAX_TEXTURE_SIZE","","",null,null],[17,"MAX_COMPUTE_IMAGE_UNIFORMS","","",null,null],[17,"FLOAT_MAT2x4","","",null,null],[17,"INT_IMAGE_2D","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_INVOCATIONS","","",null,null],[17,"MAX_SAMPLE_MASK_WORDS","","",null,null],[17,"ONE_MINUS_DST_COLOR","","",null,null],[17,"REPEAT","","",null,null],[17,"FLOAT_MAT4x2","","",null,null],[17,"COMPUTE_SHADER","","",null,null],[17,"MAX_NUM_ACTIVE_VARIABLES","","",null,null],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"STENCIL_BUFFER_BIT","","",null,null],[17,"COLOR_ATTACHMENT1","","",null,null],[17,"INT_IMAGE_3D","","",null,null],[17,"IMAGE_3D","","",null,null],[17,"MAX_SHADER_STORAGE_BLOCK_SIZE","","",null,null],[17,"ACTIVE_RESOURCES","","",null,null],[17,"TEXTURE_MAX_LOD","","",null,null],[17,"TEXTURE_WRAP_S","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",null,null],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",null,null],[17,"SHADER_STORAGE_BUFFER_SIZE","","",null,null],[17,"VIEWPORT","","",null,null],[17,"UNSIGNED_INT","","",null,null],[17,"LUMINANCE","","",null,null],[17,"SRGB8_ALPHA8","","",null,null],[17,"STENCIL_BACK_VALUE_MASK","","",null,null],[17,"UNIFORM_BLOCK_DATA_SIZE","","",null,null],[17,"SRC_ALPHA_SATURATE","","",null,null],[17,"TEXTURE_COMPARE_MODE","","",null,null],[17,"TEXTURE_SWIZZLE_R","","",null,null],[17,"COPY_READ_BUFFER","","",null,null],[17,"SAMPLER_BINDING","","",null,null],[17,"RGBA32UI","","",null,null],[17,"MAX_VARYING_COMPONENTS","","",null,null],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",null,null],[17,"RGBA8I","","",null,null],[17,"DEPTH_STENCIL","","",null,null],[17,"UNSIGNED_INT_SAMPLER_3D","","",null,null],[17,"COLOR_ATTACHMENT31","","",null,null],[17,"WRITE_ONLY","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"REPLACE","","",null,null],[17,"MAX_FRAMEBUFFER_WIDTH","","",null,null],[17,"SAMPLES","","",null,null],[17,"MAX_VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",null,null],[17,"TYPE","","",null,null],[17,"COLOR_ATTACHMENT5","","",null,null],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",null,null],[17,"RENDERBUFFER_BLUE_SIZE","","",null,null],[17,"SAMPLER_CUBE","","",null,null],[17,"DRAW_BUFFER1","","",null,null],[17,"CURRENT_VERTEX_ATTRIB","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTERS","","",null,null],[17,"STENCIL_REF","","",null,null],[17,"RENDERBUFFER_DEPTH_SIZE","","",null,null],[17,"RGB32UI","","",null,null],[17,"FRAGMENT_SHADER_BIT","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",null,null],[17,"BLEND_COLOR","","",null,null],[17,"STREAM_COPY","","",null,null],[17,"PIXEL_UNPACK_BUFFER","","",null,null],[17,"ACTIVE_ATTRIBUTES","","",null,null],[17,"R8_SNORM","","",null,null],[17,"LEQUAL","","",null,null],[17,"MAP_FLUSH_EXPLICIT_BIT","","",null,null],[17,"INFO_LOG_LENGTH","","",null,null],[17,"SAMPLE_POSITION","","",null,null],[17,"TEXTURE_GREEN_TYPE","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_CLASS","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_BINDING","","",null,null],[17,"PROGRAM_BINARY_LENGTH","","",null,null],[17,"COLOR_ATTACHMENT29","","",null,null],[17,"SYNC_CONDITION","","",null,null],[17,"STREAM_DRAW","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",null,null],[17,"MAX_NAME_LENGTH","","",null,null],[17,"UNSIGNED_INT_IMAGE_3D","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"MAX_COMPUTE_SHARED_MEMORY_SIZE","","",null,null],[17,"RGBA4","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",null,null],[17,"LOW_FLOAT","","",null,null],[17,"COLOR_ATTACHMENT10","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",null,null],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",null,null],[17,"COLOR_ATTACHMENT22","","",null,null],[17,"MAP_READ_BIT","","",null,null],[17,"ACTIVE_VARIABLES","","",null,null],[17,"STENCIL_TEST","","",null,null],[17,"CULL_FACE","","",null,null],[17,"MAP_INVALIDATE_RANGE_BIT","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"R16F","","",null,null],[17,"SAMPLE_COVERAGE","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"INT","","",null,null],[17,"MAX_UNIFORM_BLOCK_SIZE","","",null,null],[17,"TEXTURE6","","",null,null],[17,"MAX_3D_TEXTURE_SIZE","","",null,null],[17,"DRAW_BUFFER0","","",null,null],[17,"COPY_WRITE_BUFFER_BINDING","","",null,null],[17,"DEPTH_CLEAR_VALUE","","",null,null],[17,"INT_IMAGE_CUBE","","",null,null],[17,"STENCIL_VALUE_MASK","","",null,null],[17,"COMPRESSED_RGB8_ETC2","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"ACTIVE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"UNIFORM_TYPE","","",null,null],[17,"DRAW_INDIRECT_BUFFER_BINDING","","",null,null],[17,"CULL_FACE_MODE","","",null,null],[17,"WAIT_FAILED","","",null,null],[17,"R11F_G11F_B10F","","",null,null],[17,"FRAMEBUFFER_BARRIER_BIT","","",null,null],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"ALIASED_LINE_WIDTH_RANGE","","",null,null],[17,"DYNAMIC_COPY","","",null,null],[17,"DONT_CARE","","",null,null],[17,"SCISSOR_BOX","","",null,null],[17,"COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"NUM_SAMPLE_COUNTS","","",null,null],[17,"IMAGE_BINDING_LAYERED","","",null,null],[17,"COLOR_ATTACHMENT20","","",null,null],[17,"RENDERBUFFER_ALPHA_SIZE","","",null,null],[17,"BUFFER_MAP_LENGTH","","",null,null],[17,"RENDERBUFFER_STENCIL_SIZE","","",null,null],[17,"PACK_SKIP_PIXELS","","",null,null],[17,"ALL_BARRIER_BITS","","",null,null],[17,"R8I","","",null,null],[17,"READ_BUFFER","","",null,null],[17,"RENDERBUFFER_HEIGHT","","",null,null],[17,"CCW","","",null,null],[17,"STENCIL_BACK_FUNC","","",null,null],[17,"SAMPLER_2D","","",null,null],[17,"TEXTURE_DEPTH_SIZE","","",null,null],[17,"TEXTURE_SWIZZLE_B","","",null,null],[17,"DEPTH_STENCIL_TEXTURE_MODE","","",null,null],[17,"VERTEX_BINDING_OFFSET","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING","","",null,null],[17,"LINE_WIDTH","","",null,null],[17,"TEXTURE_IMMUTABLE_LEVELS","","",null,null],[17,"MAX_FRAGMENT_IMAGE_UNIFORMS","","",null,null],[17,"RGB16I","","",null,null],[17,"NOTEQUAL","","",null,null],[17,"SHADER_BINARY_FORMATS","","",null,null],[17,"NUM_ACTIVE_VARIABLES","","",null,null],[17,"TEXTURE_SWIZZLE_G","","",null,null],[17,"TEXTURE","","",null,null],[17,"COMPRESSED_SIGNED_R11_EAC","","",null,null],[17,"VERSION","","",null,null],[17,"VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"CONDITION_SATISFIED","","",null,null],[17,"COMPRESSED_SIGNED_RG11_EAC","","",null,null],[17,"STENCIL_FUNC","","",null,null],[17,"RGB8_SNORM","","",null,null],[17,"DRAW_FRAMEBUFFER","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",null,null],[17,"DEPTH32F_STENCIL8","","",null,null],[17,"RG16F","","",null,null],[17,"MAX_DRAW_BUFFERS","","",null,null],[17,"RG_INTEGER","","",null,null],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE_STENCIL_SIZE","","",null,null],[17,"DYNAMIC_DRAW","","",null,null],[17,"FRAMEBUFFER_DEFAULT_SAMPLES","","",null,null],[17,"TEXTURE_MAX_LEVEL","","",null,null],[17,"DRAW_BUFFER5","","",null,null],[17,"QUERY_RESULT_AVAILABLE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",null,null],[17,"COMPARE_REF_TO_TEXTURE","","",null,null],[17,"RG16UI","","",null,null],[17,"MAX_COMBINED_SHADER_STORAGE_BLOCKS","","",null,null],[17,"DRAW_BUFFER9","","",null,null],[17,"SAMPLER_3D","","",null,null],[17,"BUFFER_DATA_SIZE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER","","",null,null],[17,"INT_SAMPLER_2D","","",null,null],[17,"COLOR_ATTACHMENT17","","",null,null],[17,"CLAMP_TO_EDGE","","",null,null],[17,"MAX_VERTEX_IMAGE_UNIFORMS","","",null,null],[17,"MEDIUM_INT","","",null,null],[17,"COLOR","","",null,null],[17,"STENCIL_ATTACHMENT","","",null,null],[17,"TEXTURE_DEPTH_TYPE","","",null,null],[17,"RGB8UI","","",null,null],[17,"SHADER_STORAGE_BUFFER","","",null,null],[17,"COLOR_ATTACHMENT23","","",null,null],[17,"TRANSFORM_FEEDBACK_BARRIER_BIT","","",null,null],[17,"ALIASED_POINT_SIZE_RANGE","","",null,null],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"BLEND_EQUATION_ALPHA","","",null,null],[17,"COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"FUNC_REVERSE_SUBTRACT","","",null,null],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",null,null],[17,"TEXTURE28","","",null,null],[17,"TEXTURE29","","",null,null],[17,"COLOR_ATTACHMENT11","","",null,null],[17,"TEXTURE18","","",null,null],[17,"RED","","",null,null],[17,"DRAW_BUFFER6","","",null,null],[17,"SHADER_STORAGE_BUFFER_START","","",null,null],[17,"GENERATE_MIPMAP_HINT","","",null,null],[17,"RENDERBUFFER","","",null,null],[17,"FRAMEBUFFER_COMPLETE","","",null,null],[17,"TEXTURE_SWIZZLE_A","","",null,null],[17,"MAX_VERTEX_ATTRIB_BINDINGS","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP","","",null,null],[17,"READ_FRAMEBUFFER","","",null,null],[17,"POINTS","","",null,null],[17,"MAX_COMBINED_SHADER_OUTPUT_RESOURCES","","",null,null],[17,"DEPTH_STENCIL_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_UNSUPPORTED","","",null,null],[17,"MAX_FRAGMENT_SHADER_STORAGE_BLOCKS","","",null,null],[17,"DEPTH_ATTACHMENT","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"SAMPLER_2D_SHADOW","","",null,null],[17,"INVALID_OPERATION","","",null,null],[17,"FUNC_ADD","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_TYPE","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"BLEND_DST_RGB","","",null,null],[17,"COLOR_ATTACHMENT7","","",null,null],[17,"FLOAT_MAT3","","",null,null],[17,"NEAREST_MIPMAP_LINEAR","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",null,null],[17,"DEPTH_COMPONENT","","",null,null],[17,"ONE_MINUS_SRC_COLOR","","",null,null],[17,"MAX_COLOR_ATTACHMENTS","","",null,null],[17,"IS_ROW_MAJOR","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_SIZE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",null,null],[17,"ONE_MINUS_DST_ALPHA","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",null,null],[17,"DEPTH_WRITEMASK","","",null,null],[17,"VERTEX_BINDING_DIVISOR","","",null,null],[17,"DRAW_BUFFER13","","",null,null],[17,"VERTEX_SHADER","","",null,null],[17,"SIGNED_NORMALIZED","","",null,null],[17,"RGB8I","","",null,null],[17,"RGB10_A2","","",null,null],[17,"RG8_SNORM","","",null,null],[17,"SAMPLE_COVERAGE_INVERT","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"PIXEL_PACK_BUFFER_BINDING","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"STENCIL_BACK_WRITEMASK","","",null,null],[17,"UNPACK_ALIGNMENT","","",null,null],[17,"DEPTH_COMPONENT32F","","",null,null],[17,"GEQUAL","","",null,null],[17,"CW","","",null,null],[17,"LOCATION","","",null,null],[17,"COMMAND_BARRIER_BIT","","",null,null],[17,"IMAGE_BINDING_NAME","","",null,null],[17,"BUFFER_USAGE","","",null,null],[17,"TEXTURE4","","",null,null],[17,"DRAW_BUFFER2","","",null,null],[17,"UNIFORM_BUFFER","","",null,null],[17,"TEXTURE_WIDTH","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER_BINDING","","",null,null],[17,"SHADER_STORAGE_BUFFER_BINDING","","",null,null],[17,"NICEST","","",null,null],[17,"BOOL_VEC2","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",null,null],[17,"SYNC_FLUSH_COMMANDS_BIT","","",null,null],[17,"VERTEX_ATTRIB_BINDING","","",null,null],[17,"TRANSFORM_FEEDBACK","","",null,null],[17,"REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"RGB","","",null,null],[17,"MAX_SERVER_WAIT_TIMEOUT","","",null,null],[17,"DITHER","","",null,null],[17,"R8UI","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTERS","","",null,null],[17,"DRAW_BUFFER8","","",null,null],[17,"LINES","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",null,null],[17,"READ_ONLY","","",null,null],[17,"TEXTURE_ALPHA_TYPE","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"CONSTANT_COLOR","","",null,null],[17,"ATTACHED_SHADERS","","",null,null],[17,"BACK","","",null,null],[17,"DEPTH_FUNC","","",null,null],[17,"TEXTURE_2D_ARRAY","","",null,null],[17,"COLOR_ATTACHMENT25","","",null,null],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"TEXTURE21","","",null,null],[17,"HIGH_INT","","",null,null],[17,"SHADING_LANGUAGE_VERSION","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",null,null],[17,"DRAW_BUFFER4","","",null,null],[17,"RG32UI","","",null,null],[17,"FLOAT_MAT2x3","","",null,null],[17,"ACTIVE_UNIFORM_BLOCKS","","",null,null],[17,"SHADER_COMPILER","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"COLOR_ATTACHMENT0","","",null,null],[17,"MAX_ELEMENT_INDEX","","",null,null],[17,"MAJOR_VERSION","","",null,null],[17,"FLOAT_VEC2","","",null,null],[17,"RG32F","","",null,null],[17,"PACK_ALIGNMENT","","",null,null],[17,"BLEND_SRC_ALPHA","","",null,null],[17,"BOOL_VEC4","","",null,null],[17,"COLOR_ATTACHMENT28","","",null,null],[17,"SYNC_FLAGS","","",null,null],[17,"FLOAT_VEC4","","",null,null],[17,"VENDOR","","",null,null],[17,"ARRAY_SIZE","","",null,null],[17,"RGBA32F","","",null,null],[17,"PIXEL_BUFFER_BARRIER_BIT","","",null,null],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"FLOAT_MAT3x2","","",null,null],[17,"RGBA","","",null,null],[17,"RG8","","",null,null],[17,"TEXTURE17","","",null,null],[17,"DEPTH","","",null,null],[17,"UNSIGNED_SHORT","","",null,null],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",null,null],[17,"LINE_LOOP","","",null,null],[17,"STENCIL_FAIL","","",null,null],[17,"TEXTURE0","","",null,null],[17,"NUM_SHADER_BINARY_FORMATS","","",null,null],[17,"FRAMEBUFFER_DEFAULT_HEIGHT","","",null,null],[17,"UNPACK_SKIP_IMAGES","","",null,null],[17,"BLEND_EQUATION","","",null,null],[17,"COLOR_ATTACHMENT13","","",null,null],[17,"HALF_FLOAT","","",null,null],[17,"UNIFORM_BLOCK_INDEX","","",null,null],[17,"BLUE_BITS","","",null,null],[17,"RGBA_INTEGER","","",null,null],[17,"MIN_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"CURRENT_QUERY","","",null,null],[17,"MAP_UNSYNCHRONIZED_BIT","","",null,null],[17,"SAMPLE_BUFFERS","","",null,null],[17,"ZERO","","",null,null],[17,"DRAW_BUFFER3","","",null,null],[17,"COMPRESSED_RG11_EAC","","",null,null],[17,"MAX_COMBINED_IMAGE_UNIFORMS","","",null,null],[17,"RED_INTEGER","","",null,null],[17,"SRC_COLOR","","",null,null],[17,"MAX_RENDERBUFFER_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",null,null],[17,"STENCIL","","",null,null],[17,"UNSIGNED_INT_5_9_9_9_REV","","",null,null],[17,"ACTIVE_PROGRAM","","",null,null],[17,"DRAW_BUFFER7","","",null,null],[17,"PACK_ROW_LENGTH","","",null,null],[17,"DYNAMIC_READ","","",null,null],[17,"STENCIL_INDEX8","","",null,null],[17,"CONSTANT_ALPHA","","",null,null],[17,"FASTEST","","",null,null],[17,"FLOAT","","",null,null],[17,"LINEAR_MIPMAP_NEAREST","","",null,null],[17,"TRIANGLE_FAN","","",null,null],[17,"BYTE","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","",null,null],[17,"UNSIGNED_NORMALIZED","","",null,null],[17,"FRAGMENT_SHADER","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",null,null],[17,"LESS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",null,null],[17,"ARRAY_BUFFER_BINDING","","",null,null],[17,"INT_SAMPLER_3D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D","","",null,null],[17,"COLOR_ATTACHMENT6","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS","","",null,null],[17,"TEXTURE19","","",null,null],[17,"DRAW_BUFFER14","","",null,null],[17,"UNIFORM_MATRIX_STRIDE","","",null,null],[17,"FRAMEBUFFER_UNDEFINED","","",null,null],[17,"TEXTURE5","","",null,null],[17,"ACTIVE_TEXTURE","","",null,null],[17,"READ_FRAMEBUFFER_BINDING","","",null,null],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",null,null],[17,"TEXTURE_BASE_LEVEL","","",null,null],[17,"UNIFORM_OFFSET","","",null,null],[17,"COLOR_WRITEMASK","","",null,null],[17,"LINEAR","","",null,null],[17,"TRANSFORM_FEEDBACK_BINDING","","",null,null],[17,"SHADER_TYPE","","",null,null],[17,"UNIFORM_BLOCK","","",null,null],[17,"SRGB","","",null,null],[17,"BUFFER_SIZE","","",null,null],[17,"MAX_VERTEX_ATTRIBS","","",null,null],[17,"R32UI","","",null,null],[17,"MIRRORED_REPEAT","","",null,null],[17,"TEXTURE_BLUE_SIZE","","",null,null],[17,"FLOAT_MAT3x4","","",null,null],[17,"SHADER_STORAGE_BLOCK","","",null,null],[17,"CURRENT_PROGRAM","","",null,null],[17,"SAMPLER_CUBE_SHADOW","","",null,null],[17,"MATRIX_STRIDE","","",null,null],[17,"STENCIL_PASS_DEPTH_PASS","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_ARRAY","","",null,null],[17,"SHADER_STORAGE_BARRIER_BIT","","",null,null],[17,"FRONT_FACE","","",null,null],[17,"BUFFER_ACCESS_FLAGS","","",null,null],[17,"COLOR_ATTACHMENT2","","",null,null],[17,"UNIFORM_BLOCK_BINDING","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D","","",null,null],[17,"NEAREST_MIPMAP_NEAREST","","",null,null],[17,"FALSE","","",null,null],[17,"STENCIL_WRITEMASK","","",null,null],[17,"BUFFER_BINDING","","",null,null],[17,"FLOAT_MAT4","","",null,null],[17,"TEXTURE_BLUE_TYPE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",null,null],[17,"COPY_WRITE_BUFFER","","",null,null],[17,"INT_SAMPLER_2D_ARRAY","","",null,null],[17,"INT_VEC3","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",null,null],[17,"COLOR_ATTACHMENT12","","",null,null],[17,"COMPRESSED_SRGB8_ETC2","","",null,null],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",null,null],[17,"STENCIL_BITS","","",null,null],[17,"UNIFORM_SIZE","","",null,null],[17,"SUBPIXEL_BITS","","",null,null],[17,"TEXTURE8","","",null,null],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",null,null],[17,"RG8UI","","",null,null],[17,"TEXTURE_UPDATE_BARRIER_BIT","","",null,null],[17,"NEAREST","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",null,null],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE_COMPARE_FUNC","","",null,null],[17,"TEXTURE25","","",null,null],[17,"COLOR_ATTACHMENT30","","",null,null],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",null,null],[17,"DRAW_INDIRECT_BUFFER","","",null,null],[17,"DEPTH24_STENCIL8","","",null,null],[17,"PACK_SKIP_ROWS","","",null,null],[17,"SAMPLE_MASK","","",null,null],[17,"FRAMEBUFFER_BINDING","","",null,null],[17,"ONE_MINUS_CONSTANT_COLOR","","",null,null],[17,"INCR","","",null,null],[17,"MAX_VERTEX_ATTRIB_STRIDE","","",null,null],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",null,null],[17,"PROGRAM_OUTPUT","","",null,null],[17,"RENDERER","","",null,null],[17,"FLOAT_VEC3","","",null,null],[17,"BLEND","","",null,null],[17,"INVALID_FRAMEBUFFER_OPERATION","","",null,null],[17,"SHADER_IMAGE_ACCESS_BARRIER_BIT","","",null,null],[17,"DRAW_BUFFER15","","",null,null],[17,"RGB8","","",null,null],[17,"INT_VEC4","","",null,null],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",null,null],[17,"TRUE","","",null,null],[17,"COMPRESSED_R11_EAC","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_COUNT","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER","","",null,null],[17,"UNSIGNED_SHORT_5_6_5","","",null,null],[17,"NO_ERROR","","",null,null],[17,"BUFFER_VARIABLE","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE","","",null,null],[17,"UNPACK_SKIP_ROWS","","",null,null],[17,"NONE","","",null,null],[17,"COLOR_ATTACHMENT8","","",null,null],[17,"UNIFORM_IS_ROW_MAJOR","","",null,null],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",null,null],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",null,null],[17,"RG8I","","",null,null],[17,"MAX_COMPUTE_UNIFORM_BLOCKS","","",null,null],[17,"MAP_INVALIDATE_BUFFER_BIT","","",null,null],[17,"UNSIGNED_INT_ATOMIC_COUNTER","","",null,null],[17,"LOW_INT","","",null,null],[17,"RG16I","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",null,null],[17,"SHORT","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"COLOR_CLEAR_VALUE","","",null,null],[17,"VERTEX_BINDING_BUFFER","","",null,null],[17,"UNIFORM_ARRAY_STRIDE","","",null,null],[17,"RGBA8UI","","",null,null],[17,"STENCIL_INDEX","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_WRAP_R","","",null,null],[17,"COMPUTE_SHADER_BIT","","",null,null],[17,"BUFFER_MAPPED","","",null,null],[17,"UNIFORM_NAME_LENGTH","","",null,null],[17,"TEXTURE_MAG_FILTER","","",null,null],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"UNSIGNED_INT_VEC3","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTERS","","",null,null],[17,"IMAGE_2D","","",null,null],[17,"GREATER","","",null,null],[17,"RENDERBUFFER_BINDING","","",null,null],[17,"RGB565","","",null,null],[17,"STENCIL_BACK_REF","","",null,null],[17,"SRC_ALPHA","","",null,null],[17,"PROGRAM_INPUT","","",null,null],[17,"INT_IMAGE_2D_ARRAY","","",null,null],[17,"DECR_WRAP","","",null,null],[17,"TEXTURE_BINDING_2D","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",null,null],[17,"TEXTURE23","","",null,null],[17,"STENCIL_BACK_FAIL","","",null,null],[17,"SAMPLER_2D_ARRAY","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",null,null],[17,"TEXTURE22","","",null,null],[17,"RGBA16F","","",null,null],[17,"TEXTURE_MIN_LOD","","",null,null],[17,"UNIFORM_BUFFER_SIZE","","",null,null],[17,"ACTIVE_UNIFORMS","","",null,null],[17,"MAX","","",null,null],[17,"RGBA16I","","",null,null],[17,"IMAGE_2D_ARRAY","","",null,null],[17,"TEXTURE_DEPTH","","",null,null],[17,"QUERY_RESULT","","",null,null],[17,"MAX_TEXTURE_LOD_BIAS","","",null,null],[17,"SAMPLE_COVERAGE_VALUE","","",null,null],[17,"UNSIGNED_BYTE","","",null,null],[17,"TEXTURE7","","",null,null],[17,"COLOR_ATTACHMENT9","","",null,null],[17,"DEPTH_BUFFER_BIT","","",null,null],[17,"DEPTH_COMPONENT16","","",null,null],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"ALWAYS","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",null,null],[17,"EXTENSIONS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"SYNC_STATUS","","",null,null],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",null,null],[17,"RGB16F","","",null,null],[17,"UNPACK_ROW_LENGTH","","",null,null],[17,"LUMINANCE_ALPHA","","",null,null],[17,"ALREADY_SIGNALED","","",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",null,null],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",null,null],[17,"COLOR_ATTACHMENT21","","",null,null],[17,"IMAGE_BINDING_ACCESS","","",null,null],[17,"STENCIL_CLEAR_VALUE","","",null,null],[17,"UNIFORM","","",null,null],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",null,null],[17,"MAX_INTEGER_SAMPLES","","",null,null],[17,"TEXTURE_COMPRESSED","","",null,null],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",null,null],[17,"DEPTH_BITS","","",null,null],[17,"TEXTURE_3D","","",null,null],[17,"TEXTURE_SHARED_SIZE","","",null,null],[17,"UNPACK_SKIP_PIXELS","","",null,null],[17,"MAX_VIEWPORT_DIMS","","",null,null],[17,"MAX_COMPUTE_SHADER_STORAGE_BLOCKS","","",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","",null,null],[17,"SRGB8","","",null,null],[17,"ARRAY_STRIDE","","",null,null],[17,"TEXTURE_ALPHA_SIZE","","",null,null],[17,"OBJECT_TYPE","","",null,null],[17,"IMAGE_BINDING_FORMAT","","",null,null],[17,"MEDIUM_FLOAT","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",null,null],[17,"DRAW_BUFFER12","","",null,null],[17,"DRAW_FRAMEBUFFER_BINDING","","",null,null],[17,"TEXTURE14","","",null,null],[17,"MAX_VERTEX_SHADER_STORAGE_BLOCKS","","",null,null],[17,"UNSIGNED_INT_VEC2","","",null,null],[17,"VALIDATE_STATUS","","",null,null],[17,"RENDERBUFFER_GREEN_SIZE","","",null,null],[17,"MAX_COMPUTE_TEXTURE_IMAGE_UNITS","","",null,null],[17,"IMAGE_CUBE","","",null,null],[17,"TEXTURE12","","",null,null],[17,"COLOR_ATTACHMENT24","","",null,null],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",null,null],[17,"COLOR_ATTACHMENT15","","",null,null],[17,"BUFFER_MAP_OFFSET","","",null,null],[17,"UNIFORM_BUFFER_BINDING","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_START","","",null,null],[17,"MIN","","",null,null],[17,"COLOR_ATTACHMENT19","","",null,null],[17,"TEXTURE30","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",null,null],[17,"REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"TEXTURE_INTERNAL_FORMAT","","",null,null],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_BINDINGS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",null,null],[17,"TEXTURE_GREEN_SIZE","","",null,null],[11,"new","","Creates a `FnPtr` from a load attempt.",4,null],[11,"new","opengles_graphics","Creates a new OpenGL back-end.",5,{"inputs":[{"name":"opengl"}],"output":{"name":"self"}}],[11,"viewport","","Sets viewport with normalized coordinates and center as origin.",5,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"use_program","","Sets the current program only if the program is not in use.",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"clear_program","","Unset the current program.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"use_draw_state","","Sets the current draw state, by detecting changes.",5,{"inputs":[{"name":"self"},{"name":"drawstate"}],"output":null}],[11,"clear_draw_state","","Unsets the current draw state.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"draw","","Draws graphics.",5,{"inputs":[{"name":"self"},{"name":"viewport"},{"name":"f"}],"output":{"name":"u"}}],[11,"has_texture_alpha","","Assume all textures has alpha channel for now.",5,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"clear_color","","",5,null],[11,"clear_stencil","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"tri_list","","",5,null],[11,"tri_list_uv","","",5,null],[11,"new","","Creates a new texture.",6,{"inputs":[{"name":"gluint"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_id","","Gets the OpenGL id of the texture.",6,{"inputs":[{"name":"self"}],"output":{"name":"gluint"}}],[11,"empty","","Returns empty texture.",6,{"inputs":[],"output":{"name":"result"}}],[11,"from_memory_alpha","","Loads image from memory, the format is 8-bit greyscale.",6,null],[11,"from_path","","Loads image by relative file name to the asset root.",6,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_image","","Creates a texture from image.",6,{"inputs":[{"name":"rgbaimage"},{"name":"texturesettings"}],"output":{"name":"self"}}],[11,"update","","Updates image with a new one.",6,{"inputs":[{"name":"self"},{"name":"rgbaimage"}],"output":null}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get_size","","",6,null],[11,"create","","",6,null],[11,"update","","",6,null],[11,"get_major_minor","","Gets the minor version of OpenGL.",0,null],[11,"to_glsl","","Gets GLSL version associated with OpenGL.",0,{"inputs":[{"name":"self"}],"output":{"name":"glsl"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"opengl"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"OpenGL"],[3,"DynamicAttribute"],[3,"GlyphCache"],[4,"Error"],[3,"FnPtr"],[3,"GlGraphics"],[3,"Texture"]]};
searchIndex["petgraph"] = {"doc":"**petgraph** is a graph data structure library.","items":[[4,"EdgeDirection","petgraph","Edge direction",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge *from* the current node.",0,null],[13,"Incoming","","An `Incoming` edge is an inbound edge *to* the current node.",0,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[0,"algo","","Graph algorithms.",null,null],[5,"is_isomorphic","petgraph::algo","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_isomorphic_matching","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"dijkstra","","Dijkstra's shortest path algorithm.",null,null],[5,"is_cyclic_undirected","","Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic","","**Deprecated: Renamed to `is_cyclic_undirected`.**",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic_directed","","Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"toposort","","Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"scc","","Compute the *strongly connected components* using Kosaraju's algorithm.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"condensation","","Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"name":"graph"}}],[5,"connected_components","","Return the number of connected components of the graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[5,"min_spanning_tree","","Compute a *minimum spanning tree* of a graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[0,"graphmap","petgraph","`GraphMap<N, E>` is an undirected graph where node values are mapping keys.",null,null],[3,"GraphMap","petgraph::graphmap","`GraphMap<N, E>` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",1,null],[8,"NodeTrait","","A trait group for `GraphMap`'s node identifier.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphmap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `GraphMap`.",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",2,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",2,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes in the graph.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all nodes and edges",2,{"inputs":[{"name":"self"}],"output":null}],[11,"add_node","","Add node `n` to the graph.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"n"}}],[11,"remove_node","","Return `true` if node `n` was removed.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"contains_node","","Return `true` if the node is contained in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated data `weight`.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"},{"name":"e"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"bool"}}],[11,"nodes","","Return an iterator over the nodes of the graph.",2,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges, paired with the edge weight.",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"edges"}}],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",2,{"inputs":[{"name":"self"}],"output":{"name":"alledges"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",1,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"option"}}],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",1,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ordering"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graph","petgraph","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"NodeIndex","petgraph::graph","Node identifier.",null,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"Node","","The graph's node type.",null,null],[12,"weight","","Associated node data.",7,null],[3,"Edge","","The graph's edge type.",null,null],[12,"weight","","Associated edge data.",8,null],[3,"Graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Edges","","Iterator over the edges of a node.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"WalkEdges","","**Deprecated.**",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[6,"DefIndex","","The default integer type for node and edge indices in `Graph`. `u32` is the default to reduce the size of the graph's data and improve performance in the common case.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"max","","",9,{"inputs":[],"output":{"name":"self"}}],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"new","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"new","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",11,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",7,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",8,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"source","","Return the source node index.",8,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","Return the target node index.",8,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Graph` with directed edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",12,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes (vertices) in the graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"node_weight","","Access the weight for node `a`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge_weight","","Access the weight for edge `e`.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge weights.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction, paired with the respective edge weights.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"edges"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"externals","","Return an iterator over either the nodes without edges to them (`Incoming`) or from them (`Outgoing`).",12,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",12,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_indices","","Return an iterator over the edge indices of the graph",12,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"edgeweightsmut"}}],[11,"raw_nodes","","Access the internal node array.",12,null],[11,"raw_edges","","Access the internal edge array.",12,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",12,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",12,{"inputs":[{"name":"self"},{"name":"edgeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"walkedges"}}],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",12,null],[11,"reverse","","Reverse the direction of all edges",12,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all nodes and edges",12,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_edges","","Remove all edges",12,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Return the current node and edge capacity of the graph.",12,null],[11,"reserve_nodes","","Reserves capacity for at least `additional` more nodes to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_edges","","Reserves capacity for at least `additional` more edges to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly `additional` more nodes to be inserted in the graph. Does nothing if the capacity is already sufficient.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly `additional` more edges to be inserted in the graph. Does nothing if the capacity is already sufficient.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection as much as possible.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection as much as possible.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",12,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",12,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"map","","Create a new `Graph` by mapping node and edge weights to new values.",12,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",12,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments are done, so you may want to go over the result to remove or add edges.",12,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",14,{"inputs":[{"name":"self"}],"output":{"name":"walkneighbors"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",10,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",18,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_node","","",18,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_edge","","",18,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"walkedges"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Fetch the next edge index in the walk for graph `g`.",19,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",19,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",22,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",22,null],[13,"EdgeNoLabel","","Use no edge labels.",22,null],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",23,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",23,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"visit","petgraph","Graph visitor algorithms.",null,null],[3,"AsUndirected","petgraph::visit","Wrapper type for walking the graph as if it is undirected",null,null],[12,"0","","",24,null],[3,"Reversed","","Wrapper type for walking the graph as if all edges are reversed.",null,null],[12,"0","","",25,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",26,null],[12,"discovered","","The map of discovered nodes",26,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",27,null],[12,"discovered","","The map of discovered nodes",27,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"SubTopo","","A topological order traversal for a subgraph.",null,null],[8,"Graphlike","","Base trait for graphs that defines the node identifier.",null,null],[16,"NodeId","","",28,null],[8,"NeighborIter","","`NeighborIter` gives access to the neighbors iterator.",null,null],[16,"Iter","","",29,null],[10,"neighbors","","Return an iterator that visits all neighbors of the node **n**.",29,null],[8,"NeighborsDirected","","`NeighborsDirected` gives access to neighbors of both `Incoming` and `Outgoing` edges of a node.",null,null],[16,"NeighborsDirected","","",30,null],[10,"neighbors_directed","","Return an iterator that visits all neighbors of the node **n**.",30,null],[8,"Externals","","Externals returns an iterator of all nodes that either have either no incoming or no outgoing edges.",null,null],[16,"Externals","","",31,null],[10,"externals","","Return an iterator of all nodes with no edges in the given direction",31,null],[8,"VisitMap","","A mapping for storing the visited status for `NodeId` `N`.",null,null],[10,"visit","","Return **true** if the value is not already present.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[10,"is_visited","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[8,"Visitable","","A graph that can create a visitor map.",null,null],[16,"Map","","",33,null],[10,"visit_map","","",33,null],[8,"Revisitable","","A graph that can reset and resize its visitor map.",null,null],[10,"reset_map","","",34,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph",null,null],[16,"AdjMatrix","","",35,null],[10,"adjacency_matrix","","",35,null],[10,"is_adjacent","","",35,null],[11,"neighbors","petgraph::graph","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors","petgraph::graphmap","",2,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"neighbors","petgraph::visit","",24,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","petgraph::graph","",12,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","petgraph::visit","",25,null],[11,"externals","petgraph::graph","",12,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"externals","petgraph::visit","",25,null],[11,"visit_map","petgraph::graph","",12,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"reset_map","","",12,null],[11,"reset_map","petgraph::visit","",25,null],[11,"visit_map","petgraph::graphmap","",2,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"reset_map","","",2,null],[11,"visit_map","petgraph::visit","",24,null],[11,"visit_map","","",25,null],[11,"adjacency_matrix","petgraph::graphmap","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"is_adjacent","","",2,null],[11,"clone","petgraph::visit","",26,{"inputs":[{"name":"self"}],"output":{"name":"dfs"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new **Dfs**, using the graph's visitor map, and put **start** in the stack of nodes to visit.",26,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"empty","","Create a new **Dfs** using the graph's visitor map, and no stack.",26,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the dfs from a particular node.",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"new","","",36,null],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the DFS traversal from a particular node.",36,null],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bfs"}}],[11,"new","","Create a new **Bfs**, using the graph's visitor map, and put **start** in the stack of nodes to visit.",27,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",27,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"new","","",37,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"topo"}}],[11,"new","","Create a new `Topo`, using the graph's visitor map, and put all initial nodes in the to-visit list.",38,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",38,{"inputs":[{"name":"self"},{"name":"g"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",38,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"subtopo"}}],[11,"from_node","","Create a new `SubTopo`, using the graph's visitor map, and put single node in the to-visit list.",39,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",39,{"inputs":[{"name":"self"},{"name":"g"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",39,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[0,"unionfind","petgraph","`UnionFind<K>` is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","`UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"unionfind"}}],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"find","","Return the representative for `x`.",40,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_mut","","Return the representative for `x`.",40,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"union","","Unify the two sets containing `x` and `y`.",40,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"into_labeling","","Return a vector mapping each element to its representative.",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"adjacency_matrix","petgraph::graph","",12,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"is_adjacent","","",12,{"inputs":[{"name":"self"},{"name":"fixedbitset"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[8,"EdgeType","petgraph","A graph's edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",41,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into a triple of source, target, edge weight.",null,null],[16,"NodeId","","",42,null],[10,"into_weighted_edge","","",42,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"edgedirection"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"edgedirection"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"opposite","","Return the opposite `EdgeDirection`.",0,{"inputs":[{"name":"self"}],"output":{"name":"edgedirection"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"directed"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"undirected"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_directed","","",43,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",44,{"inputs":[],"output":{"name":"bool"}}]],"paths":[[4,"EdgeDirection"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Node"],[3,"Edge"],[8,"IndexType"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[4,"Config"],[3,"Dot"],[3,"AsUndirected"],[3,"Reversed"],[3,"Dfs"],[3,"Bfs"],[8,"Graphlike"],[8,"NeighborIter"],[8,"NeighborsDirected"],[8,"Externals"],[8,"VisitMap"],[8,"Visitable"],[8,"Revisitable"],[8,"GetAdjacencyMatrix"],[3,"DfsIter"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"]]};
searchIndex["png"] = {"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either *Meter* or *Unspecified*",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","PNG Encoder",null,null],[3,"Writer","","PNG writer",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"save_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"new","","Creates a new StreamingDecoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",11,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",11,null],[11,"set_param","","",12,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",13,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"info","","",14,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",14,null],[11,"next_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"new","","",15,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_param","","",5,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"set_param","","",6,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",16,null],[11,"write_image_data","","Writes the image data.",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitdepth"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pixeldimensions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"transformations"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1, 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB, expand grayscale images of less than 8-bit depth to 8-bit depth, and expand tRNS chunks to alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR, RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",17,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rayon"] = {"doc":"","items":[[3,"Configuration","rayon","Contains the rayon thread pool configuration.",null,null],[3,"ThreadPool","","",null,null],[4,"InitError","","Custom error type for the rayon thread pool configuration.",null,null],[13,"NumberOfThreadsZero","","Error if number of threads is set to zero.",0,null],[13,"GlobalPoolAlreadyInitialized","","Error if the gloal thread pool is initialized multiple times and the configuration is not equal for all configurations.",0,null],[5,"dump_stats","","This is a debugging API not really intended for end users. It will dump some performance statistics out using `println`.",null,{"inputs":[],"output":null}],[5,"initialize","","Initializes the global thread pool. This initialization is **optional**.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[5,"join","","The `join` function takes two closures and potentially runs them in parallel but is not guaranteed to. However, the call to `join` incurs low overhead and is much different compared to spawning two separate threads.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",1,{"inputs":[],"output":{"name":"configuration"}}],[11,"num_threads","","Get the number of threads that will be used for the thread pool. See `set_num_threads` for more information.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_num_threads","","Set the number of threads to be used in the rayon threadpool. The argument `num_threads` must not be zero. If you do not call this function, rayon will select a suitable default (currently, the default is one thread per CPU core).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"new","","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",2,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to `join` which occur there will then operate within that threadpool.",2,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"num_threads","","Returns the number of threads in the thread pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[0,"par_iter","","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[0,"find","rayon::par_iter","",null,null],[5,"find","rayon::par_iter::find","",null,{"inputs":[{"name":"par_iter"},{"name":"find_op"}],"output":{"name":"option"}}],[0,"chain","rayon::par_iter","",null,null],[3,"ChainIter","rayon::par_iter::chain","",null,null],[3,"ChainProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",3,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chainiter"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",3,null],[11,"weighted","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",4,null],[11,"into_iter","","",4,null],[0,"collect","rayon::par_iter","",null,null],[5,"collect_into","rayon::par_iter::collect","Collects the results of the exact iterator into the specified vector.",null,{"inputs":[{"name":"par_iter"},{"name":"vec"}],"output":null}],[0,"enumerate","rayon::par_iter","",null,null],[3,"Enumerate","rayon::par_iter::enumerate","",null,null],[3,"EnumerateProducer","","//////////////////////////////////////////////////////////////////////// Producer implementation",null,null],[11,"new","","",5,{"inputs":[{"name":"m"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",5,null],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",5,null],[11,"weighted","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",6,null],[11,"into_iter","","",6,null],[0,"filter","rayon::par_iter","",null,null],[3,"Filter","rayon::par_iter::filter","",null,null],[11,"new","","",7,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"drive_unindexed","","",7,null],[11,"upper_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",7,null],[0,"filter_map","rayon::par_iter","",null,null],[3,"FilterMap","rayon::par_iter::filter_map","",null,null],[11,"new","","",8,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"drive_unindexed","","",8,null],[11,"upper_bound","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",8,null],[0,"flat_map","rayon::par_iter","",null,null],[3,"FlatMap","rayon::par_iter::flat_map","",null,null],[11,"new","","",9,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"drive_unindexed","","",9,null],[0,"from_par_iter","rayon::par_iter","",null,null],[8,"FromParallelIterator","rayon::par_iter::from_par_iter","",null,null],[10,"from_par_iter","","",10,{"inputs":[{"name":"par_iter"}],"output":{"name":"self"}}],[0,"internal","rayon::par_iter","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::par_iter::internal","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",11,null],[10,"callback","","",11,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[11,"weighted","","Reports whether the producer has explicit weights.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cost","","Cost to produce `len` items, where `len` must be `N`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than `N`.",12,null],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",13,null],[16,"Reducer","","",13,null],[16,"Result","","",13,null],[11,"weighted","","Reports whether the consumer has explicit weights.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cost","","If it costs `producer_cost` to produce the items we will consume, returns cost adjusted to account for consuming them.",13,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",13,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",13,null],[11,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",14,null],[10,"consume","","Consume next item and return new sequential state.",14,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",14,null],[11,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",15,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",16,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[10,"can_split","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"split","","",17,null],[0,"len","rayon::par_iter","",null,null],[3,"ParallelLen","rayon::par_iter::len","",null,null],[12,"maximal_len","","Maximal number of elements that we will write",18,null],[12,"cost","","An estimate of the \"cost\" of this operation. This is a kind of abstract concept you can use to influence how fine-grained the threads are.",18,null],[12,"sparse","","If true, all elements will be written. If false, some may not. For example, `sparse` will be false if there is a filter. When doing a collect, sparse iterators require a compression step.",18,null],[17,"THRESHOLD","","",null,null],[17,"FUNC_ADJUSTMENT","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parallellen"}}],[11,"left_cost","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parallellen"}}],[11,"right_cost","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"parallellen"}}],[0,"for_each","rayon::par_iter","",null,null],[5,"for_each","rayon::par_iter::for_each","",null,{"inputs":[{"name":"par_iter"},{"name":"op"}],"output":null}],[0,"fold","rayon::par_iter","",null,null],[3,"Fold","rayon::par_iter::fold","",null,null],[3,"FoldConsumer","","",null,null],[3,"FoldFolder","","",null,null],[5,"fold","","",null,{"inputs":[{"name":"base"},{"name":"identity"},{"name":"fold_op"}],"output":{"name":"fold"}}],[11,"drive_unindexed","","",19,null],[11,"upper_bound","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",19,null],[11,"cost","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"split_at","","",20,null],[11,"into_folder","","",20,null],[11,"split_off","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",20,null],[11,"consume","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",21,null],[0,"reduce","rayon::par_iter","",null,null],[3,"ReduceFolder","rayon::par_iter::reduce","",null,null],[3,"SumOp","","//////////////////////////////////////////////////////////////////////// Specific operations",null,null],[3,"ProductOp","","",null,null],[3,"ReduceWithIdentityOp","","",null,null],[5,"reduce","","",null,{"inputs":[{"name":"par_iter"},{"name":"reduce_op"}],"output":{"name":"t"}}],[17,"SUM","","",null,null],[17,"PRODUCT","","",null,null],[8,"ReduceOp","","Specifies a \"reduce operator\". This is the combination of a start value and a reduce function. The reduce function takes two items and computes a reduced version. The start value `S` is a kind of \"zero\" or \"identity\" value that may be intermingled as needed; ideally, `reduce(S, X)` for any item `X` yields `X`.",null,null],[10,"start_value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"reduce","","",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"consume","","",23,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",23,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"reduce","","",24,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"reduce","","",25,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"new","","",26,{"inputs":[{"name":"identity"},{"name":"op"}],"output":{"name":"reducewithidentityop"}}],[11,"start_value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"reduce","","",26,{"inputs":[{"name":"self"},{"name":"item"},{"name":"item"}],"output":{"name":"item"}}],[0,"skip","rayon::par_iter","",null,null],[3,"Skip","rayon::par_iter::skip","",null,null],[11,"new","","",27,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",27,null],[11,"opt_len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"upper_bound","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",27,null],[11,"with_producer","","",27,null],[0,"take","rayon::par_iter","",null,null],[3,"Take","rayon::par_iter::take","",null,null],[11,"new","","",28,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",28,null],[11,"opt_len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"upper_bound","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",28,null],[11,"with_producer","","",28,null],[0,"slice","rayon::par_iter","",null,null],[3,"SliceIter","rayon::par_iter::slice","",null,null],[3,"ChunksIter","","",null,null],[3,"SliceProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceChunksProducer","","",null,null],[11,"drive_unindexed","","",29,null],[11,"opt_len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",29,null],[11,"len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",29,null],[11,"drive_unindexed","","",30,null],[11,"opt_len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",30,null],[11,"len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",30,null],[11,"cost","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",31,null],[11,"into_iter","","",31,null],[11,"cost","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",32,null],[11,"into_iter","","",32,null],[0,"slice_mut","rayon::par_iter","",null,null],[3,"SliceIterMut","rayon::par_iter::slice_mut","",null,null],[3,"ChunksMutIter","","",null,null],[3,"SliceMutProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceChunksMutProducer","","",null,null],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",33,null],[11,"drive_unindexed","","",34,null],[11,"opt_len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",34,null],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",34,null],[11,"cost","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,null],[11,"cost","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",36,null],[11,"into_iter","","",36,null],[0,"string","rayon::par_iter","",null,null],[3,"ParChars","rayon::par_iter::string","",null,null],[11,"drive_unindexed","","",37,null],[11,"can_split","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",37,null],[11,"into_iter","","",37,null],[0,"map","rayon::par_iter","",null,null],[3,"MapFn","rayon::par_iter::map","",null,null],[12,"0","","",38,null],[3,"MapCloned","","",null,null],[3,"MapInspect","","",null,null],[12,"0","","",39,null],[3,"Map","","////////////////////////////////////////////////////////////////////////",null,null],[3,"MapProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"MapIter","","",null,null],[8,"MapOp","","",null,null],[16,"Output","","",40,null],[10,"map","","",40,null],[11,"map","","",38,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"out"}}],[11,"map","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"map","","",39,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"in"}}],[11,"new","","",42,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"weighted","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",43,null],[11,"into_iter","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"weight","rayon::par_iter","",null,null],[3,"Weight","rayon::par_iter::weight","",null,null],[3,"WeightProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",45,{"inputs":[{"name":"m"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"weighted","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",46,null],[11,"into_iter","","",46,null],[0,"zip","rayon::par_iter","",null,null],[3,"ZipIter","rayon::par_iter::zip","",null,null],[3,"ZipProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"new","","",47,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipiter"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"weighted","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cost","","",48,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",48,null],[11,"into_iter","","",48,null],[0,"range","rayon::par_iter","",null,null],[3,"RangeIter","rayon::par_iter::range","",null,null],[11,"into_iter","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"cost","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",49,null],[11,"drive_unindexed","","",49,null],[11,"can_split","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",49,null],[11,"drive_unindexed","","",49,null],[11,"can_split","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","",49,null],[0,"vec","rayon::par_iter","",null,null],[3,"VecIter","rayon::par_iter::vec","",null,null],[3,"VecProducer","","////////////////////////////////////////////////////////////////////////",null,null],[3,"SliceDrain","","////////////////////////////////////////////////////////////////////////",null,null],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",50,null],[11,"cost","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",51,null],[11,"into_iter","","",51,null],[11,"drop","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[0,"option","rayon::par_iter","",null,null],[3,"OptionIter","rayon::par_iter::option","",null,null],[3,"OptionProducer","","////////////////////////////////////////////////////////////////////////",null,null],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"upper_bound","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"cost","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",54,null],[11,"into_iter","","",54,null],[0,"collections","rayon::par_iter","",null,null],[0,"noop","","",null,null],[3,"NoopConsumer","rayon::par_iter::noop","",null,null],[3,"NoopReducer","","",null,null],[11,"new","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"cost","","",55,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"split_at","","",55,null],[11,"into_folder","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"consume","","",55,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"split_off","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",55,{"inputs":[{"name":"self"}],"output":{"name":"noopreducer"}}],[11,"reduce","","",56,null],[8,"IntoParallelIterator","rayon::par_iter","",null,null],[16,"Iter","","",57,null],[16,"Item","","",57,null],[10,"into_par_iter","","",57,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",58,null],[16,"Item","","",58,null],[10,"par_iter","","",58,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",59,null],[16,"Item","","",59,null],[10,"par_iter_mut","","",59,null],[8,"ToParallelChunks","","",null,null],[16,"Iter","","",60,null],[16,"Item","","",60,null],[10,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",60,null],[8,"ToParallelChunksMut","","",null,null],[16,"Iter","","",61,null],[16,"Item","","",61,null],[10,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",61,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[16,"Chars","","",62,null],[10,"par_chars","","Returns a parallel iterator over the characters of a string.",62,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",63,null],[11,"weight","","Indicates the relative \"weight\" of producing each item in this parallel iterator. A higher weight will cause finer-grained parallel subtasks. 1.0 indicates something very cheap and uniform, like copying a value out of an array, or computing `x + 1`. If your tasks are either very expensive, or very unpredictable, you are better off with higher values. See also `weight_max`, which is a convenient shorthand to force the finest grained parallel execution posible. Tuning this value should not affect correctness but can improve (or hurt) performance.",63,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"weight_max","","Shorthand for `self.weight(f64::INFINITY)`. This forces the smallest granularity of parallel execution, which makes sense when your parallel tasks are (potentially) very expensive to execute.",63,{"inputs":[{"name":"self"}],"output":{"name":"weight"}}],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,{"inputs":[{"name":"self"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,{"inputs":[{"name":"self"},{"name":"inspect_op"}],"output":{"name":"map"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,{"inputs":[{"name":"self"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,{"inputs":[{"name":"self"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,{"inputs":[{"name":"self"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"reduce_with_identity","","Deprecated. Use `reduce()` instead.",63,null],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The **parallel fold** works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,{"inputs":[{"name":"self"},{"name":"identity"},{"name":"fold_op"}],"output":{"name":"fold"}}],[11,"sum","","Sums up the items in the iterator.",63,null],[11,"product","","Multiplies all the items in the iterator.",63,null],[11,"mul","","DEPRECATED",63,null],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,{"inputs":[{"name":"self"},{"name":"chain"}],"output":{"name":"chainiter"}}],[11,"find_any","","Searches for **some** item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the **first** one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,{"inputs":[{"name":"self"},{"name":"find_op"}],"output":{"name":"option"}}],[11,"any","","Searches for **some** item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,{"inputs":[{"name":"self"},{"name":"any_op"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,{"inputs":[{"name":"self"},{"name":"all_op"}],"output":{"name":"bool"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[8,"BoundedParallelIterator","","A trait for parallel iterators items where the precise number of items is not known, but we can at least give an upper-bound. These sorts of iterators result from filtering.",null,null],[10,"upper_bound","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"ExactParallelIterator","","A trait for parallel iterators items where the precise number of items is known. This occurs when e.g. iterating over a vector. Knowing precisely how many items will be produced is very useful.",null,null],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",65,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",66,{"inputs":[{"name":"self"},{"name":"zip_op"}],"output":{"name":"zipiter"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",66,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for **some** item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the **first** match, and once a match is found we'll attempt to stop processing any more.",66,{"inputs":[{"name":"self"},{"name":"position_op"}],"output":{"name":"option"}}],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null]],"paths":[[4,"InitError"],[3,"Configuration"],[3,"ThreadPool"],[3,"ChainIter"],[3,"ChainProducer"],[3,"Enumerate"],[3,"EnumerateProducer"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"FromParallelIterator"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"ParallelLen"],[3,"Fold"],[3,"FoldConsumer"],[3,"FoldFolder"],[8,"ReduceOp"],[3,"ReduceFolder"],[3,"SumOp"],[3,"ProductOp"],[3,"ReduceWithIdentityOp"],[3,"Skip"],[3,"Take"],[3,"SliceIter"],[3,"ChunksIter"],[3,"SliceProducer"],[3,"SliceChunksProducer"],[3,"SliceIterMut"],[3,"ChunksMutIter"],[3,"SliceMutProducer"],[3,"SliceChunksMutProducer"],[3,"ParChars"],[3,"MapFn"],[3,"MapInspect"],[8,"MapOp"],[3,"MapCloned"],[3,"Map"],[3,"MapProducer"],[3,"MapIter"],[3,"Weight"],[3,"WeightProducer"],[3,"ZipIter"],[3,"ZipProducer"],[3,"RangeIter"],[3,"VecIter"],[3,"VecProducer"],[3,"SliceDrain"],[3,"OptionIter"],[3,"OptionProducer"],[3,"NoopConsumer"],[3,"NoopReducer"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ToParallelChunks"],[8,"ToParallelChunksMut"],[8,"ParallelString"],[8,"ParallelIterator"],[8,"BoundedParallelIterator"],[8,"ExactParallelIterator"],[8,"IndexedParallelIterator"]]};
searchIndex["read_color"] = {"doc":"A simple library for reading hex colors.","items":[[5,"char_to_hex","read_color","Converts a character into a u8 value.",null,{"inputs":[{"name":"char"}],"output":{"name":"option"}}],[5,"hex","","Reads a hex value from an iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"hex_pair","","Reads a pair of hex values, joining them in value range 0-255.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgb","","Reads RGB colors from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgba","","Reads RGBA colors from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgb_maybe_a","","Reads RGB with optional alpha from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}]],"paths":[]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rusttype"] = {"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Rect","rusttype","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",0,null],[12,"max","","",0,null],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",null,null],[12,"p","","",3,null],[3,"Curve","","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",null,null],[12,"p","","",4,null],[3,"FontCollection","","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data.",null,null],[3,"Font","","A single font. This may or may not own the font data.",null,null],[3,"Codepoint","","Represents a Unicode code point.",null,null],[12,"0","","",5,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",6,null],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",null,null],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",7,null],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",7,null],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",null,null],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",8,null],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",8,null],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",8,null],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",null,null],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor *f* in the horizontal direction is achieved by setting `x` equal to *f* times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",9,null],[12,"y","","Vertical scale, in pixels.",9,null],[3,"IntoFontsIter","","",null,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",null,null],[12,"segments","","",10,null],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",null,null],[13,"ByRef","","",11,null],[13,"ByArc","","",11,null],[4,"CodepointOrGlyphId","","Represents either a Unicode code point, or a glyph identifier for a font.",null,null],[13,"Codepoint","","",12,null],[13,"GlyphId","","",12,null],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",null,null],[13,"Line","","",13,null],[13,"Curve","","",13,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"vector"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"curve"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"width","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"height","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[0,"gpu_cache","","This module provides capabilities for managing a cache of rendered glyphs in GPU memory, with the goal of minimisng the size and frequency of glyph uploads to GPU memory from the CPU.",null,null],[3,"Cache","rusttype::gpu_cache","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",null,null],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",14,null],[4,"CacheWriteErr","","Returned from `Cache::cache_queued`.",null,null],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",15,null],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before the attempt.",15,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"cachereaderr"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cachewriteerr"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",16,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":null}],[11,"clear","","Clears the cache. Does not affect the glyph queue.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_queue","","Clears the glyph queue.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"name":"result"}}],[11,"clone","rusttype","",17,{"inputs":[{"name":"self"}],"output":{"name":"fontcollection"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sharedbytes"}}],[11,"deref","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"arc"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"box"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"sharedbytes"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"codepoint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"codepointorglyphid"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"positionedglyph"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",9,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"name":"codepoint"}}],[11,"from","","",12,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"glyphid"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"char"}],"output":{"name":"codepointorglyphid"}}],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file. This array may be owned (e.g. `Vec<u8>`), or borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for some type `T`, `T` can be used as input.",17,{"inputs":[{"name":"b"}],"output":{"name":"fontcollection"}}],[11,"into_font","","In the common case that a font collection consists of only one font, this function consumes this font collection and turns it into a font. If this is not the case, or the font is not valid (read: not supported by this library), `None` is returned.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid. The produced font borrows the font data that is either borrowed or owned by this font collection.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"into_fonts","","Converts `self` into an `Iterator` yielding each `Font` that exists within the collection.",17,{"inputs":[{"name":"self"}],"output":{"name":"intofontsiter"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",18,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"vmetrics"}}],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font. If id corresponds to a glyph identifier, the identifier must be valid (smaller than `self.glyph_count()`), otherwise `None` is returned.",18,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"glyphs_for","","A convenience function.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"glyphiter"}}],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"scale"},{"name":"point"}],"output":{"name":"layoutiter"}}],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",18,{"inputs":[{"name":"self"},{"name":"scale"},{"name":"a"},{"name":"b"}],"output":{"name":"f32"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"glyphiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",19,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",19,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",19,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"contour"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","The glyph identifier for this glyph.",20,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_unscaled","","A reference to this glyph without the scaling",20,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"unscaled","","Removes the scaling from this glyph",20,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",20,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"positionedglyph"}}],[11,"scale","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",20,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",20,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"id","","The glyph identifier for this glyph.",21,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unpositioned","","A reference to this glyph without positioning",21,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"into_unpositioned","","Removes the positioning from this glyph",21,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scale","","",21,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",21,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",21,{"inputs":[{"name":"self"}],"output":{"name":"positionedglyph"}}]],"paths":[[3,"Rect"],[3,"Point"],[3,"Vector"],[3,"Line"],[3,"Curve"],[3,"Codepoint"],[3,"GlyphId"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"CodepointOrGlyphId"],[4,"Segment"],[4,"CacheReadErr"],[4,"CacheWriteErr"],[3,"Cache"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"IntoFontsIter"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"thread_count","","Returns the number of threads inside this pool.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"execute","","Execute a job on the threadpool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec<u8>` in order to serialize and deserialize in an efficient way.",null,null],[3,"Bytes","","Wraps a `&[u8]` in order to serialize in an efficient way. Does not support deserialization.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_seed","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_value_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","Deserialize a `&str` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","Deserialize an absent optional `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","Deserialize a present optional `Value`.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","Deserialize `Value` as an enum.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","Deserialize a `&[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec<u8>` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to identify which variant of an enum to deserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error while serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and `Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",5,null],[13,"Internal","","`#[serde(tag = \"type\")]`",5,null],[13,"None","","`#[serde(untagged)]`",5,null],[4,"FieldDefault","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",6,null],[13,"Default","","The default is given by `std::default::Default::default()`.",6,null],[13,"Path","","The default is given by this function.",6,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",8,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"deny_unknown_fields","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ser_bound","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",8,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",9,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"skip_deserializing","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fielddefault"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fielddefault"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",10,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"skip_serializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fielddefault"}}],[11,"serialize_with","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_codegen_internals","",11,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"EnumTag"],[4,"FieldDefault"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_yaml"] = {"doc":"","items":[[3,"Error","serde_yaml","This type represents all possible errors that can occur when serializing or deserializing YAML data.",null,null],[4,"Value","","Represents any valid YAML value.",null,null],[13,"Null","","Represents a YAML null value.",0,null],[13,"Bool","","Represents a YAML boolean.",0,null],[13,"I64","","Represents a YAML integer value.",0,null],[13,"F64","","Represents a YAML floating-point value.",0,null],[13,"String","","Represents a YAML string.",0,null],[13,"Sequence","","Represents a YAML sequence in which the elements are `serde_yaml::Value`.",0,null],[13,"Mapping","","Represents a YAML mapping in which the keys and values are both `serde_yaml::Value`.",0,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of YAML.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of YAML.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of YAML text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of YAML text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of YAML.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a YAML byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as YAML into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_yaml::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_sequence","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_sequence","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_sequence_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_mapping","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_mapping","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mapping_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deserialize","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_struct_field","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"emiterror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"scanerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[6,"Mapping","","A YAML mapping in which the keys and values are both `serde_yaml::Value`.",null,null],[6,"Sequence","","A YAML sequence in which the elements are `serde_yaml::Value`.",null,null],[6,"Result","","Alias for a `Result` with the error type `serde_yaml::Error`.",null,null]],"paths":[[4,"Value"],[3,"Error"]]};
searchIndex["shader_version"] = {"doc":"A helper library for detecting and picking compatible shaders.","items":[[3,"Shaders","shader_version","Shader picker.",null,null],[0,"opengl","","Models versions of OpenGL",null,null],[4,"OpenGL","shader_version::opengl","",null,null],[13,"V2_0","","",0,null],[13,"V2_1","","",0,null],[13,"V3_0","","",0,null],[13,"V3_1","","",0,null],[13,"V3_2","","",0,null],[13,"V3_3","","",0,null],[13,"V4_0","","",0,null],[13,"V4_1","","",0,null],[13,"V4_2","","",0,null],[13,"V4_3","","",0,null],[13,"V4_4","","",0,null],[13,"V4_5","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"opengl"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"opengl"}],"output":{"name":"ordering"}}],[11,"get_major_minor","","Gets the minor version of OpenGL.",0,null],[11,"to_glsl","","Gets GLSL version associated with OpenGL.",0,{"inputs":[{"name":"self"}],"output":{"name":"glsl"}}],[0,"glsl","shader_version","Models versions of OpenGL Shader Language (GLSL)",null,null],[4,"GLSL","shader_version::glsl","For OpenGL version 3.3 and above, the GLSL version is the same as the OpenGL version.",null,null],[13,"V1_10","","",1,null],[13,"V1_20","","",1,null],[13,"V1_30","","",1,null],[13,"V1_40","","",1,null],[13,"V1_50","","",1,null],[13,"V3_30","","",1,null],[13,"V4_00","","",1,null],[13,"V4_10","","",1,null],[13,"V4_20","","",1,null],[13,"V4_30","","",1,null],[13,"V4_40","","",1,null],[13,"V4_50","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"glsl"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"glsl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"glsl"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"glsl"}],"output":{"name":"ordering"}}],[11,"to_opengl","","Gets OpenGL version associated with GLSL.",1,{"inputs":[{"name":"self"}],"output":{"name":"opengl"}}],[11,"pick_shader","","",1,{"inputs":[{"name":"self"},{"name":"shaders"}],"output":{"name":"option"}}],[8,"PickShader","shader_version","Implemented by shader version enums.",null,null],[10,"pick_shader","","Pick shader.",2,{"inputs":[{"name":"self"},{"name":"shaders"}],"output":{"name":"option"}}],[11,"new","","Creates a new shader picker.",3,{"inputs":[],"output":{"name":"self"}}],[11,"set","","Sets source for a shader version.",3,{"inputs":[{"name":"self"},{"name":"v"},{"name":"s"}],"output":{"name":"self"}}],[11,"get","","Get the closest shader to a shader version.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"option"}}]],"paths":[[4,"OpenGL"],[4,"GLSL"],[8,"PickShader"],[3,"Shaders"]]};
searchIndex["shaders_graphics2d_gles"] = {"doc":"Shaders for 2D graphics backends.","items":[[0,"colored","shaders_graphics2d_gles","Shaders for colored rendering.",null,null],[17,"VERTEX_GLSL_120","shaders_graphics2d_gles::colored","Vertex shader for GLSL 1.20",null,null],[17,"FRAGMENT_GLSL_120","","Fragment shader for GLSL 1.20",null,null],[0,"textured","shaders_graphics2d_gles","Shaders for textured rendering.",null,null],[17,"VERTEX_GLSL_120","shaders_graphics2d_gles::textured","Vertex shader for GLSL 1.20",null,null],[17,"FRAGMENT_GLSL_120","","Fragment shader for GLSL 1.20",null,null]],"paths":[]};
searchIndex["slog"] = {"doc":"Slog -  Structured, extensible, composable logging for Rust","items":[[3,"Logger","slog","Logging handle used to execute logging statements",null,null],[3,"Record","","One logging record",null,null],[3,"Discard","","`Drain` discarding everything",null,null],[3,"Filter","","`Drain` filtering records",null,null],[3,"MapError","","`Drain` mapping error returned by another `Drain`",null,null],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",null,null],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",null,null],[3,"Fuse","","`Drain` panicking on error",null,null],[3,"IgnoreErr","","`Drain` ignoring errors",null,null],[3,"OwnedKeyValueList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its ancestors",null,null],[3,"OwnedKeyValueListIterator","","Iterator over `OwnedKeyValue`-s",null,null],[4,"Level","","Logging level associated with a logging `Record`",null,null],[13,"Critical","","Critical",0,null],[13,"Error","","Error",0,null],[13,"Warning","","Warning",0,null],[13,"Info","","Info",0,null],[13,"Debug","","Debug",0,null],[13,"Trace","","Trace",0,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",1,null],[13,"Critical","","Log critical level only",1,null],[13,"Error","","Log only error level and above",1,null],[13,"Warning","","Log only warning level and above",1,null],[13,"Info","","Log only info level and above",1,null],[13,"Debug","","Log only debug level and above",1,null],[13,"Trace","","Log everything",1,null],[4,"DuplicateError","","Logging error returned by `Duplicate` drain",null,null],[13,"First","","First `Drain` has returned error",2,null],[13,"Second","","Second `Drain` has returned error",2,null],[13,"Both","","Both `Drain`s have returned error",2,null],[5,"filter","","Filter by `cond` closure",null,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"name":"filter"}}],[5,"level_filter","","Filter by log level",null,{"inputs":[{"name":"level"},{"name":"d"}],"output":{"name":"levelfilter"}}],[5,"duplicate","","Duplicate records to two drains",null,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"duplicate"}}],[0,"ser","","Serialization",null,null],[3,"PushLazy","slog::ser","A newtype for non-return based lazy values",null,null],[12,"0","","",3,null],[3,"ValueSerializer","","A handle to `Serializer` for `PushLazy` closure",null,null],[4,"Error","","Serialization Error",null,null],[13,"Io","","`io::Error`",4,null],[13,"Other","","Other error",4,null],[6,"Result","","Serialization `Result`",null,null],[8,"Serialize","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",5,{"inputs":[{"name":"self"},{"name":"record"},{"name":"str"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"SyncSerialize","","Value that can be serialized and stored in `Logger` itself.",null,null],[8,"SyncMultiSerialize","","Multiple key-values pairs that can be serialized",null,null],[10,"head","","Key and value of the first key-value pair",6,null],[10,"tail","","Next key-value pair (and all following ones)",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Serializer","","Serializer",null,null],[10,"emit_bool","","Emit bool",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_unit","","Emit `()`",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_none","","Emit `None`",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_char","","Emit char",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit u8",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit i8",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit u16",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit i16",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit u32",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit i32",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit f32",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit u64",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit i64",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit f64",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit usize",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit isize",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_str","","Emit str",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_arguments","","Emit `fmt::Arguments`",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","Serialize a value",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"str"},{"name":"serializer"}],"output":{"name":"result"}}],[6,"BorrowedKeyValue","slog","Key value pair that can be part of a logging record",null,null],[6,"OwnedKeyValue","","Key value pair that can be owned by `Logger`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[8,"Drain","","Logging drain",null,null],[16,"Error","","Type of potential errors returned during logging",9,null],[10,"log","","Log one logging record",9,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[8,"DrainExt","","Convenience methods for building drains",null,null],[11,"map_err","","Map logging errors returned by this drain",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperror"}}],[11,"ignore_err","","Make `Self` ignore and not report any error",10,{"inputs":[{"name":"self"}],"output":{"name":"ignoreerr"}}],[11,"fuse","","Make `Self` panic when returning any errors",10,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"option"}}],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_usize","","Cast `Level` to ordering integer",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `Level` from an `usize`",0,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"as_usize","","Convert to `usize` value",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `FilterLevel` from an `usize`",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"max","","Maximum logging level (log everything)",1,{"inputs":[],"output":{"name":"self"}}],[11,"min","","Minimum logging level (log nothing)",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"root","","Build a root `Logger`",11,{"inputs":[{"name":"d"},{"name":"option"}],"output":{"name":"logger"}}],[11,"new","","Build a child logger",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"logger"}}],[11,"log","","Log one logging record",11,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"msg","","Get a log record message",12,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"level","","Get record logging level",12,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"line","","Get line number",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"column","","Get error column",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"file","","Get file path",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"target","","Get target",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module","","Get module",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"function","","Get function",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"values","","Get Record's key-value pairs",12,null],[11,"log","","",13,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Filter` wrapping given `drain`",14,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",14,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Filter` wrapping given `drain`",15,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",15,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `LevelFilter`",16,{"inputs":[{"name":"d"},{"name":"level"}],"output":{"name":"self"}}],[11,"log","","",16,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Duplicate`",17,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"log","","",17,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Fuse` wrapping given `drain`",18,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",18,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `IgnoreErr` wrapping `drain`",19,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",19,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ownedkeyvaluelist"}}],[11,"new","","New `OwnedKeyValueList` node with an existing parent",20,{"inputs":[{"name":"box"},{"name":"ownedkeyvaluelist"}],"output":{"name":"self"}}],[11,"root","","New `OwnedKeyValue` node without a parent (root)",20,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"parent","","Get the parent node element on the chain of values",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"values","","Get the head node `SyncMultiSerialize` values",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterator over all `OwnedKeyValue`-s in every `SyncMultiSerialize` of the list",20,{"inputs":[{"name":"self"}],"output":{"name":"ownedkeyvaluelistiterator"}}],[11,"id","","Get a unique stable identifier for this node",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"o","","Convenience macro for building `SyncMultiSerialize` trait object",null,null],[14,"slog_o","","An alternative, longer-name version of `o` macro",null,null],[14,"log","","Log message of a given level",null,null],[14,"slog_log","","Log message of a given level (alias)",null,null],[14,"crit","","Log critical level record",null,null],[14,"slog_crit","","Log critical level record (alias)",null,null],[14,"error","","Log error level record",null,null],[14,"slog_error","","Log error level record",null,null],[14,"warn","","Log warning level record",null,null],[14,"slog_warn","","Log warning level record (alias)",null,null],[14,"info","","Log info level record",null,null],[14,"slog_info","","Log info level record (alias)",null,null],[14,"debug","","Log debug level record",null,null],[14,"slog_debug","","Log debug level record (alias)",null,null],[14,"trace","","Log trace level record",null,null],[14,"slog_trace","","Log trace level record (alias)",null,null]],"paths":[[4,"Level"],[4,"FilterLevel"],[4,"DuplicateError"],[3,"PushLazy"],[4,"Error"],[8,"Serialize"],[8,"SyncMultiSerialize"],[8,"Serializer"],[3,"ValueSerializer"],[8,"Drain"],[8,"DrainExt"],[3,"Logger"],[3,"Record"],[3,"Discard"],[3,"Filter"],[3,"MapError"],[3,"LevelFilter"],[3,"Duplicate"],[3,"Fuse"],[3,"IgnoreErr"],[3,"OwnedKeyValueList"],[3,"OwnedKeyValueListIterator"]]};
searchIndex["slog_extra"] = {"doc":"Standard slog-rs extensions.","items":[[3,"Async","slog_extra","`Async` drain",null,null],[11,"new","","Create `Async` drain",0,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Async"]]};
searchIndex["slog_html"] = {"doc":"Html formatter for `slog-rs`","items":[[3,"Style","slog_html","Formatting style",null,null],[12,"color","","Optionally use custom color (hexadecimal color code)",0,null],[12,"bold","","Use bold font",0,null],[12,"italic","","Use italic font",0,null],[12,"custom","","Use custom CSS style",0,null],[3,"ColorPalette","","Hexadecimal color codes",null,null],[12,"critical","","Color for critical messages",1,null],[12,"error","","Color for error messages",1,null],[12,"warning","","Color for warning messages",1,null],[12,"info","","Color for info messages",1,null],[12,"debug","","Color for debug messages",1,null],[12,"trace","","Color for trace messages",1,null],[3,"Format","","Html formatter",null,null],[3,"FormatBuilder","","Streamer builder",null,null],[4,"FormatMode","","Formatting mode",null,null],[13,"Compact","","Compact logging format",2,null],[13,"Full","","Full logging format",2,null],[5,"timestamp_local","","Default local timestamp function used by `Format`",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"timestamp_utc","","Default UTC timestamp function used by `Format`",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"new","","Create new `FormatBuilder` to create `Format`",null,{"inputs":[],"output":{"name":"formatbuilder"}}],[5,"default","","Default html `Format`",null,{"inputs":[],"output":{"name":"format"}}],[11,"level_to_color","","Returns the corresponding color for an slog level",1,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"str"}}],[11,"default","","```text critical: \"ff0000\" error: \"ff5500\" warning: \"ffaa00\" info: \"55aa00\" debug: \"55557f\" trace: \"aaaa7f\" ```",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[6,"TimestampFn","","Timestamp function type",null,null],[11,"new","","Create a new Html formatter",3,{"inputs":[{"name":"formatmode"},{"name":"d"},{"name":"box"}],"output":{"name":"self"}}],[11,"format","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"full","","Output using full mode (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"compact","","Output using compact mode",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"color_palette","","Use custom color palette",4,{"inputs":[{"name":"self"},{"name":"colorpalette"}],"output":{"name":"self"}}],[11,"level_style","","Use custom style for the log level",4,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"timestamp_style","","Use custom style for the timestamp",4,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"message_style","","Use custom style for the message",4,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"key_style","","Use custom style for keys",4,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"value_style","","Use custom style for values",4,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"separator_style","","Use custom style for separators",4,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Build Html formatter",4,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"Style"],[3,"ColorPalette"],[4,"FormatMode"],[3,"Format"],[3,"FormatBuilder"]]};
searchIndex["slog_journald"] = {"doc":"Journald drain fro slog-rs","items":[[3,"JournaldDrain","slog_journald","Drain records and send to journald as structured data.",null,null],[4,"Error","","Error type for logging to journald.",null,null],[13,"Journald","","Error representing a non-zero return from `sd_journal_sendv`.",0,null],[13,"Serialization","","Error from serializing",0,null],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}]],"paths":[[4,"Error"],[3,"JournaldDrain"]]};
searchIndex["slog_scope"] = {"doc":"Logging scopes for slog-rs","items":[[5,"set_global_logger","slog_scope","Set global `Logger` that is returned by calls like `logger()` outside of any logging scope.",null,{"inputs":[{"name":"logger"}],"output":null}],[5,"logger","","Access the `Logger` for the current logging scope",null,{"inputs":[],"output":{"name":"logger"}}],[5,"scope","","Execute code in a logging scope",null,{"inputs":[{"name":"logger"},{"name":"sf"}],"output":{"name":"r"}}],[14,"crit","","Log a critical level message using current scope logger",null,null],[14,"error","","Log a error level message using current scope logger",null,null],[14,"warn","","Log a warning level message using current scope logger",null,null],[14,"info","","Log a info level message using current scope logger",null,null],[14,"debug","","Log a debug level message using current scope logger",null,null],[14,"trace","","Log a trace level message using current scope logger",null,null]],"paths":[]};
searchIndex["slog_stdlog"] = {"doc":"Standard Rust log crate adapter to slog-rs","items":[[3,"StdLog","slog_stdlog","Drain logging `Record`s into `log` crate",null,null],[5,"set_logger","","Set a `slog::Logger` as a global `log` create handler",null,{"inputs":[{"name":"logger"}],"output":{"name":"result"}}],[5,"set_logger_level","","Set a `slog::Logger` as a global `log` create handler",null,{"inputs":[{"name":"logger"},{"name":"loglevelfilter"}],"output":{"name":"result"}}],[5,"init","","Minimal initialization with default drain",null,{"inputs":[],"output":{"name":"result"}}],[5,"with_current_logger","","Access the currently active logger",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"logger","","Access the `Logger` for the current logging scope",null,{"inputs":[],"output":{"name":"logger"}}],[5,"scope","","Execute code in a logging scope",null,{"inputs":[{"name":"logger"},{"name":"sf"}],"output":{"name":"r"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}]],"paths":[[3,"StdLog"]]};
searchIndex["slog_stream"] = {"doc":"`io::Write` streamer for slog-rs","items":[[3,"Streamer","slog_stream","Drain formating records and writing them to a byte-stream (`io::Write`)",null,null],[5,"stream","","Stream logging records to IO",null,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"streamer"}}],[5,"async_stream","","Stream logging records to IO asynchronously",null,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"async"}}],[8,"Format","","Formats `Record`-s into IO",null,null],[10,"format","","Format one logging record and write into `io`",0,{"inputs":[{"name":"self"},{"name":"write"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[8,"Decorator","","Formatted stream decorator",null,null],[16,"RecordDecorator","","Per-record decorator",1,null],[10,"decorate","","Get a `RecordDecorator` for a given `record`",1,null],[8,"RecordDecorator","","Per-record decorator",null,null],[11,"fmt_msg","","Format a field",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_key","","Format a key",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_separator","","Format a separator",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_value","","Format a value",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_timestamp","","Format a timestamp",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_level","","Format a level",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"new","","Create new `Streamer` writing to `io` using `format`",3,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}]],"paths":[[8,"Format"],[8,"Decorator"],[8,"RecordDecorator"],[3,"Streamer"]]};
searchIndex["slog_term"] = {"doc":"Unix terminal formatter and drain for slog-rs","items":[[3,"Format","slog_term","Full formatting with optional color support",null,null],[3,"ColorDecorator","","Record decorator (color) for terminal output",null,null],[3,"ColorRecordDecorator","","Particular record decorator (color) for terminal output",null,null],[3,"StreamerBuilder","","Streamer builder",null,null],[4,"FormatMode","","Formatting mode",null,null],[13,"Compact","","Compact logging format",0,null],[13,"Full","","Full logging format",0,null],[5,"timestamp_local","","Default local timestamp function used by `Format`",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"timestamp_utc","","Default UTC timestamp function used by `Format`",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"streamer","","Build `slog_stream::Streamer`/`slog_stream::AsyncStreamer` that will output logging records to stderr/stderr.",null,{"inputs":[],"output":{"name":"streamerbuilder"}}],[6,"TimestampFn","","Timestamp function type",null,null],[11,"new","","New Format format that prints using color",1,{"inputs":[{"name":"formatmode"},{"name":"d"},{"name":"box"}],"output":{"name":"self"}}],[11,"new_colored","","New decorator that does color records",2,{"inputs":[],"output":{"name":"self"}}],[11,"new_plain","","New decorator that does not color records",2,{"inputs":[],"output":{"name":"self"}}],[11,"decorate","","",2,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"colorrecorddecorator"}}],[11,"fmt_level","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_msg","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_key","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"format","","",1,{"inputs":[{"name":"self"},{"name":"write"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","New `StreamerBuilder`",4,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Force colored output",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"plain","","Force plain output",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"auto_color","","Auto detect color (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"stderr","","Output to stderr",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"stdout","","Output to stdout (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"full","","Output using full mode",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"compact","","Output using compact mode (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"async","","Use asynchronous streamer",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sync","","Use synchronous streamer (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Build the streamer",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}]],"paths":[[4,"FormatMode"],[3,"Format"],[3,"ColorDecorator"],[3,"ColorRecordDecorator"],[3,"StreamerBuilder"]]};
searchIndex["snowflake"] = {"doc":"A crate for quickly generating unique IDs with guaranteed properties.","items":[[3,"ProcessUniqueId","snowflake","Process unique IDs are guaranteed to be unique within the current process, for the lifetime of the current process.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"processuniqueid"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"processuniqueid"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new unique ID.",0,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"ProcessUniqueId"]]};
searchIndex["stb_truetype"] = {"doc":"","items":[[3,"FontInfo","stb_truetype","",null,null],[3,"Vertex","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"cx","","",0,null],[12,"cy","","",0,null],[3,"Rect","","",null,null],[12,"x0","","",1,null],[12,"y0","","",1,null],[12,"x1","","",1,null],[12,"y1","","",1,null],[3,"HMetrics","","",null,null],[12,"advance_width","","",2,null],[12,"left_side_bearing","","",2,null],[3,"VMetrics","","",null,null],[12,"ascent","","",3,null],[12,"descent","","",3,null],[12,"line_gap","","",3,null],[4,"VertexType","","",null,null],[13,"MoveTo","","",4,null],[13,"LineTo","","",4,null],[13,"CurveTo","","",4,null],[5,"is_font","","",null,null],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential index number starting from 0. Call this function to get the font offset for a given index; it returns None if the index is out of range. A regular .ttf file will only define one font and it always be at offset 0, so it will return Some(0) for index 0, and None for all other indices. You can just skip this step if you know it's that kind of font.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fontinfo"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"vertex_type","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertextype"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vertextype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Given an offset into the file that defines a font, this function builds the necessary cached info for the rest of the system.",5,{"inputs":[{"name":"data"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_num_glyphs","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"find_glyph_index","","If you're going to perform multiple operations on the same character and you want a speed-up, call this function with the character you're going to process, then use glyph-based functions instead of the codepoint-based functions.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the glyph indices for the codepoints.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_kern_advance","","an additional amount to add to the 'advance' value between cp1 and cp2",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character `advance_width` is the offset from the current horizontal position to the next horizontal position these are expressed in unscaled coordinates",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent is the coordinate below the baseline the font extends (i.e. it is typically negative) `line_gap` is the spacing between one row's descent and the next row's ascent... so you should advance the vertical position by `ascent - descent + line_gap` these are expressed in unscaled coordinates, so you must multiply by the scale factor for a given size",5,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"get_bounding_box","","the bounding box around all possible characters",5,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose \"height\" is 'pixels' tall. Height is measured as the distance from the highest ascender to the lowest descender; in other words, it's equivalent to calling GetFontVMetrics and computing:       scale = pixels / (ascent - descent) so if you prefer to measure height by the ascent only, use a similar calculation.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to `pixels` tall. This is probably what traditional APIs compute, but I'm not positive.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel shift for the character",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the bitmap width is x1-x0, height is y1-y0, and location to place the bitmap top left is (left_side_bearing*scale, y0). (Note that the bitmap uses y-increases-down, but the shape uses y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[3,"FontInfo"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","",null,null],[12,"ident","","",1,null],[12,"vis","","",1,null],[12,"attrs","","",1,null],[12,"ty","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"data","","",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",11,null],[12,"tts","","The delimited sequence of token trees",11,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",12,null],[12,"tts","","",12,null],[3,"DeriveInput","","",null,null],[12,"ident","","",13,null],[12,"vis","","",13,null],[12,"attrs","","",13,null],[12,"generics","","",13,null],[12,"body","","",13,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",14,null],[12,"types","","The type parameters for this path segment, if present.",14,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",14,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",15,null],[12,"ty","","",15,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",16,null],[12,"abi","","",16,null],[12,"lifetimes","","",16,null],[12,"inputs","","",16,null],[12,"output","","",16,null],[12,"variadic","","",16,null],[3,"MutTy","","",null,null],[12,"ty","","",17,null],[12,"mutability","","",17,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",18,null],[12,"output","","`C`",18,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",19,null],[12,"segments","","The segments in the path: the things separated by `::`.",19,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",20,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",20,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",21,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",21,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",22,null],[12,"position","","",22,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",23,null],[12,"ty","","",23,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",24,null],[13,"Inner","","",24,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",25,null],[13,"List","","List meta item.",25,null],[13,"NameValue","","Name value meta item.",25,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",26,null],[13,"Literal","","A literal.",26,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",27,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",27,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",27,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",27,null],[13,"Cast","","A cast (`foo as f64`)",27,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",27,null],[13,"Index","","An indexing operation (`foo[2]`)",27,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",27,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",27,null],[4,"VariantData","","",null,null],[13,"Struct","","",28,null],[13,"Tuple","","",28,null],[13,"Unit","","",28,null],[4,"Visibility","","",null,null],[13,"Public","","",29,null],[13,"Crate","","",29,null],[13,"Restricted","","",29,null],[13,"Inherited","","",29,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",30,null],[13,"Maybe","","",30,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",31,null],[13,"Region","","",31,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",32,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",32,null],[13,"EqPredicate","","An equality predicate (unsupported)",32,null],[4,"FloatTy","","",null,null],[13,"F32","","",33,null],[13,"F64","","",33,null],[13,"Unsuffixed","","",33,null],[4,"IntTy","","",null,null],[13,"Isize","","",34,null],[13,"I8","","",34,null],[13,"I16","","",34,null],[13,"I32","","",34,null],[13,"I64","","",34,null],[13,"Usize","","",34,null],[13,"U8","","",34,null],[13,"U16","","",34,null],[13,"U32","","",34,null],[13,"U64","","",34,null],[13,"Unsuffixed","","",34,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",35,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",35,null],[13,"Byte","","A byte char (`b'f'`)",35,null],[13,"Char","","A character literal (`'a'`)",35,null],[13,"Int","","An integer literal (`1`)",35,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",35,null],[13,"Bool","","A boolean literal",35,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",36,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",36,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",37,null],[13,"Minus","","",37,null],[13,"Star","","",37,null],[13,"Slash","","",37,null],[13,"Percent","","",37,null],[13,"Caret","","",37,null],[13,"And","","",37,null],[13,"Or","","",37,null],[13,"Shl","","",37,null],[13,"Shr","","",37,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",38,null],[13,"Bracket","","A square bracket: `[` or `]`",38,null],[13,"Brace","","A curly brace: `{` or `}`",38,null],[4,"Token","","",null,null],[13,"Eq","","",39,null],[13,"Lt","","",39,null],[13,"Le","","",39,null],[13,"EqEq","","",39,null],[13,"Ne","","",39,null],[13,"Ge","","",39,null],[13,"Gt","","",39,null],[13,"AndAnd","","",39,null],[13,"OrOr","","",39,null],[13,"Not","","",39,null],[13,"Tilde","","",39,null],[13,"BinOp","","",39,null],[13,"BinOpEq","","",39,null],[13,"At","","",39,null],[13,"Dot","","",39,null],[13,"DotDot","","",39,null],[13,"DotDotDot","","",39,null],[13,"Comma","","",39,null],[13,"Semi","","",39,null],[13,"Colon","","",39,null],[13,"ModSep","","",39,null],[13,"RArrow","","",39,null],[13,"LArrow","","",39,null],[13,"FatArrow","","",39,null],[13,"Pound","","",39,null],[13,"Dollar","","",39,null],[13,"Question","","",39,null],[13,"Literal","","",39,null],[13,"Ident","","",39,null],[13,"Underscore","","",39,null],[13,"Lifetime","","",39,null],[13,"DocComment","","",39,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",40,null],[13,"Delimited","","A delimited sequence of token trees",40,null],[4,"Body","","",null,null],[13,"Enum","","",41,null],[13,"Struct","","",41,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",42,null],[13,"Sub","","The `-` operator (subtraction)",42,null],[13,"Mul","","The `*` operator (multiplication)",42,null],[13,"Div","","The `/` operator (division)",42,null],[13,"Rem","","The `%` operator (modulus)",42,null],[13,"And","","The `&&` operator (logical and)",42,null],[13,"Or","","The `||` operator (logical or)",42,null],[13,"BitXor","","The `^` operator (bitwise xor)",42,null],[13,"BitAnd","","The `&` operator (bitwise and)",42,null],[13,"BitOr","","The `|` operator (bitwise or)",42,null],[13,"Shl","","The `<<` operator (shift left)",42,null],[13,"Shr","","The `>>` operator (shift right)",42,null],[13,"Eq","","The `==` operator (equality)",42,null],[13,"Lt","","The `<` operator (less than)",42,null],[13,"Le","","The `<=` operator (less than or equal to)",42,null],[13,"Ne","","The `!=` operator (not equal to)",42,null],[13,"Ge","","The `>=` operator (greater than or equal to)",42,null],[13,"Gt","","The `>` operator (greater than)",42,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",43,null],[13,"Not","","The `!` operator for logical inversion",43,null],[13,"Neg","","The `-` operator for negation",43,null],[4,"Abi","","",null,null],[13,"Named","","",44,null],[13,"Rust","","",44,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",45,null],[13,"Ty","","Everything else",45,null],[4,"Mutability","","",null,null],[13,"Mutable","","",46,null],[13,"Immutable","","",46,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",47,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",47,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",48,null],[13,"Array","","A fixed length array (`[T; n]`)",48,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",48,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",48,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",48,null],[13,"Never","","The never type (`!`)",48,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",48,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",48,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",48,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",48,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",48,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",48,null],[13,"Mac","","A macro in the type position.",48,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",49,null],[13,"Normal","","",49,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",50,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",50,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",50,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",50,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",50,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",50,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",50,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",50,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",50,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",50,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",50,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",50,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_predicates","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","",50,null],[11,"invoke","","",50,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",50,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",50,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",51,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"to_ident","syn","",52,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",53,null],[10,"invoke","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"invoke","","",54,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"a"}}],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",55,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",56,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syn","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"new","syn::aster::lifetime","",57,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",57,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",57,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",57,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",58,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","syn","",19,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","",52,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","syn::aster::path","",59,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",59,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",59,null],[11,"global","","",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ids","","",59,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",59,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",59,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentbuilder"}}],[11,"ids","","",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",60,null],[11,"invoke","","",60,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",61,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",61,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",61,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",61,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",61,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",61,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",61,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",61,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",61,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"no_return","","",61,null],[11,"return_","","",61,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build_return","","",61,null],[11,"build","","",61,null],[11,"invoke","","",61,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",62,null],[11,"invoke","","",63,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf` and `Path`.",64,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",64,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",64,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",64,null],[11,"invoke","","",64,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",65,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"id","","",65,null],[11,"segment","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",65,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",66,null],[11,"segment","","",66,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",66,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",67,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",67,null],[11,"id","","",67,null],[11,"build_path","","",67,null],[11,"build_qpath","","",67,null],[11,"path","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",67,{"inputs":[{"name":"self"}],"output":{"name":"qpathbuilder"}}],[11,"isize","","",67,null],[11,"i8","","",67,null],[11,"i16","","",67,null],[11,"i32","","",67,null],[11,"i64","","",67,null],[11,"usize","","",67,null],[11,"u8","","",67,null],[11,"u16","","",67,null],[11,"u32","","",67,null],[11,"u64","","",67,null],[11,"f32","","",67,null],[11,"f64","","",67,null],[11,"bool","","",67,null],[11,"unit","","",67,null],[11,"tuple","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",67,null],[11,"slice","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"ref_","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tyrefbuilder"}}],[11,"never","","",67,null],[11,"infer","","",67,null],[11,"option","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"result","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"phantom_data","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"box_","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"iterator","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"impl_trait","","",67,{"inputs":[{"name":"self"}],"output":{"name":"tyimpltraittybuilder"}}],[11,"invoke","","",68,null],[11,"invoke","","",69,null],[11,"invoke","","",70,null],[11,"mut_","","",71,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lifetime","","",71,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",71,null],[11,"ty","","",71,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",71,null],[11,"invoke","","",72,null],[11,"invoke","","",73,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",74,null],[11,"invoke","","",75,null],[11,"invoke","","",76,null],[11,"invoke","","",77,null],[11,"with_bounds","","",78,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",78,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",78,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",78,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",78,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",78,null],[11,"invoke","","",78,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",79,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",79,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",79,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","",79,null],[11,"invoke","","",79,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",80,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",80,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",80,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",80,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",80,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"default","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",80,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",80,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",80,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",80,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",80,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",80,null],[11,"invoke","","",80,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",80,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",80,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",81,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",81,null],[11,"trait_","","",81,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",81,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"iterator","","",81,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",81,null],[11,"invoke","","",82,null],[11,"with_callback","","",83,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",83,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",83,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",83,null],[11,"invoke","","",83,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",84,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",84,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",84,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"invoke","","",84,null],[11,"invoke","","",85,null],[11,"with_for_lifetime","","",86,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",86,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",86,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",86,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",86,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",86,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",86,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",86,null],[11,"with_for_lifetime","","",87,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",87,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",87,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",87,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",87,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",87,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",87,null],[11,"invoke","","",87,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",87,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",88,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",88,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fields","","",28,null],[11,"fields_mut","","",28,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",90,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",52,null],[11,"new","","",52,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"from","","",35,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",35,null],[11,"from","","",35,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"from","","",35,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"op","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"from","","",19,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"none","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",14,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",92,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",92,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",92,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",92,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",92,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",92,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",92,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",92,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",92,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",92,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",92,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",92,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",92,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",92,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",92,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",92,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",92,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",92,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",92,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",92,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[8,"Visitor"]]};
searchIndex["texture"] = {"doc":"A generic library for textures.","items":[[3,"TextureSettings","texture","Texture creation parameters.",null,null],[4,"Format","","Texture format.",null,null],[13,"Rgba8","","`(red, green, blue, alpha)` with values 0-255.",0,null],[4,"Filter","","Sampling filter",null,null],[13,"Linear","","A Weighted Linear Blend",1,null],[13,"Nearest","","Nearest Texel",1,null],[0,"ops","","Image operations for textures.",null,null],[5,"flip_vertical","texture::ops","Flips the image vertically.",null,null],[5,"alpha_to_rgba8","","Converts from alpha to rgba8.",null,null],[8,"ImageSize","texture","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",2,null],[11,"get_width","","Gets the image width.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"CreateTexture","","Implemented by textures for creation.",null,null],[16,"Error","","The error when creating texture.",3,null],[10,"create","","Create texture from memory.",3,null],[8,"UpdateTexture","","Implemented by textures for updating.",null,null],[16,"Error","","The error when updating texture.",4,null],[10,"update","","Update the texture.",4,null],[11,"new","","Create default settings.",5,{"inputs":[],"output":{"name":"texturesettings"}}],[11,"get_convert_gamma","","Gets whether to convert gamma, treated as sRGB color space.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_convert_gamma","","Sets convert gamma.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"convert_gamma","","Sets convert gamma.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_compress","","Gets wheter compress on the GPU.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_compress","","Sets compress.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"compress","","Sets compress.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_generate_mipmap","","Gets generate mipmap.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_generate_mipmap","","Sets generate mipmap.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"generate_mipmap","","Sets generate mipmap.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_min","","Gets minify filter.",5,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"set_min","","Sets minify filter.",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"min","","Sets minify filter.",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_mag","","Gets magnify filter",5,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"set_mag","","Sets magnify filter",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"mag","","Sets magnify filter",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_mipmap","","Gets minify mipmap filter",5,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"set_mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true.",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_filter","","Returns the min and mag filter",5,null],[11,"set_filter","","Sets the min and mag filter",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":null}],[11,"filter","","Sets the min and mag filter",5,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Format"],[4,"Filter"],[8,"ImageSize"],[8,"CreateTexture"],[8,"UpdateTexture"],[3,"TextureSettings"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["traitobject"] = {"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null],[8,"Trait","","A trait implemented for all trait objects.",null,null]],"paths":[]};
searchIndex["typemap"] = {"doc":"A type-based key value store where one value type is allowed for each key.","items":[[3,"TypeMap","typemap","A map keyed by types.",null,null],[3,"OccupiedEntry","","A view onto an occupied entry in a TypeMap.",null,null],[3,"VacantEntry","","A view onto an unoccupied entry in a TypeMap.",null,null],[4,"Entry","","A view onto an entry in a TypeMap.",null,null],[13,"Occupied","","A view onto an occupied entry in a TypeMap.",0,null],[13,"Vacant","","A view onto an unoccupied entry in a TypeMap.",0,null],[6,"SendMap","","A version of `TypeMap` containing only `Send` types.",null,null],[6,"SyncMap","","A version of `TypeMap` containing only `Sync` types.",null,null],[6,"ShareMap","","A version of `TypeMap` containing only `Send + Sync` types.",null,null],[6,"CloneMap","","A version of `TypeMap` containing only `Clone` types.",null,null],[6,"ShareCloneMap","","A version of `TypeMap` containing only `Clone + Send + Sync` types.",null,null],[6,"DebugMap","","A version of `TypeMap` containing only `Debug` types.",null,null],[6,"ShareDebugMap","","A version of `TypeMap` containing only `Debug + Send + Sync` types.",null,null],[8,"CloneAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"DebugAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",1,null],[11,"default","","",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[11,"new","","Create a new, empty TypeMap.",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",2,null],[11,"get","","Find a value in the map and get a reference to it.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Remove a value from the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",2,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"data","","Read the underlying HashMap",2,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",2,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Remove all entries from the map.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"get","","Get a reference to the entry's value.",3,null],[11,"get_mut","","Get a mutable reference to the entry's value.",3,null],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",3,null],[11,"insert","","Set the entry's value and return the previous value.",3,null],[11,"remove","","Move the entry's value out of the map, consuming the entry.",3,null],[11,"insert","","Set the entry's value and return a mutable reference to it.",4,null]],"paths":[[4,"Entry"],[8,"Key"],[3,"TypeMap"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["uinput_sys"] = {"doc":"","items":[[3,"input_event","uinput_sys","",null,null],[12,"time","","",0,null],[12,"kind","","",0,null],[12,"code","","",0,null],[12,"value","","",0,null],[3,"input_id","","",null,null],[12,"bustype","","",1,null],[12,"vendor","","",1,null],[12,"product","","",1,null],[12,"version","","",1,null],[3,"uinput_user_dev","","",null,null],[12,"name","","",2,null],[12,"id","","",2,null],[12,"ff_effects_max","","",2,null],[12,"absmax","","",2,null],[12,"absmin","","",2,null],[12,"absfuzz","","",2,null],[12,"absflat","","",2,null],[5,"ui_dev_create","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_dev_destroy","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_evbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_keybit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_absbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_relbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_mscbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_ledbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_sndbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_ffbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_phys","","",null,null],[5,"ui_set_swbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_set_propbit","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"ui_get_version","","",null,null],[17,"INPUT_PROP_POINTER","","",null,null],[17,"INPUT_PROP_DIRECT","","",null,null],[17,"INPUT_PROP_BUTTONPAD","","",null,null],[17,"INPUT_PROP_SEMI_MT","","",null,null],[17,"INPUT_PROP_TOPBUTTONPAD","","",null,null],[17,"INPUT_PROP_POINTING_STICK","","",null,null],[17,"INPUT_PROP_ACCELEROMETER","","",null,null],[17,"INPUT_PROP_MAX","","",null,null],[17,"INPUT_PROP_CNT","","",null,null],[17,"EV_SYN","","",null,null],[17,"EV_KEY","","",null,null],[17,"EV_REL","","",null,null],[17,"EV_ABS","","",null,null],[17,"EV_MSC","","",null,null],[17,"EV_SW","","",null,null],[17,"EV_LED","","",null,null],[17,"EV_SND","","",null,null],[17,"EV_REP","","",null,null],[17,"EV_FF","","",null,null],[17,"EV_PWR","","",null,null],[17,"EV_FF_STATUS","","",null,null],[17,"EV_MAX","","",null,null],[17,"EV_CNT","","",null,null],[17,"SYN_REPORT","","",null,null],[17,"SYN_CONFIG","","",null,null],[17,"SYN_MT_REPORT","","",null,null],[17,"SYN_DROPPED","","",null,null],[17,"SYN_MAX","","",null,null],[17,"SYN_CNT","","",null,null],[17,"KEY_RESERVED","","",null,null],[17,"KEY_ESC","","",null,null],[17,"KEY_1","","",null,null],[17,"KEY_2","","",null,null],[17,"KEY_3","","",null,null],[17,"KEY_4","","",null,null],[17,"KEY_5","","",null,null],[17,"KEY_6","","",null,null],[17,"KEY_7","","",null,null],[17,"KEY_8","","",null,null],[17,"KEY_9","","",null,null],[17,"KEY_10","","",null,null],[17,"KEY_MINUS","","",null,null],[17,"KEY_EQUAL","","",null,null],[17,"KEY_BACKSPACE","","",null,null],[17,"KEY_TAB","","",null,null],[17,"KEY_Q","","",null,null],[17,"KEY_W","","",null,null],[17,"KEY_E","","",null,null],[17,"KEY_R","","",null,null],[17,"KEY_T","","",null,null],[17,"KEY_Y","","",null,null],[17,"KEY_U","","",null,null],[17,"KEY_I","","",null,null],[17,"KEY_O","","",null,null],[17,"KEY_P","","",null,null],[17,"KEY_LEFTBRACE","","",null,null],[17,"KEY_RIGHTBRACE","","",null,null],[17,"KEY_ENTER","","",null,null],[17,"KEY_LEFTCTRL","","",null,null],[17,"KEY_A","","",null,null],[17,"KEY_S","","",null,null],[17,"KEY_D","","",null,null],[17,"KEY_F","","",null,null],[17,"KEY_G","","",null,null],[17,"KEY_H","","",null,null],[17,"KEY_J","","",null,null],[17,"KEY_K","","",null,null],[17,"KEY_L","","",null,null],[17,"KEY_SEMICOLON","","",null,null],[17,"KEY_APOSTROPHE","","",null,null],[17,"KEY_GRAVE","","",null,null],[17,"KEY_LEFTSHIFT","","",null,null],[17,"KEY_BACKSLASH","","",null,null],[17,"KEY_Z","","",null,null],[17,"KEY_X","","",null,null],[17,"KEY_C","","",null,null],[17,"KEY_V","","",null,null],[17,"KEY_B","","",null,null],[17,"KEY_N","","",null,null],[17,"KEY_M","","",null,null],[17,"KEY_COMMA","","",null,null],[17,"KEY_DOT","","",null,null],[17,"KEY_SLASH","","",null,null],[17,"KEY_RIGHTSHIFT","","",null,null],[17,"KEY_KPASTERISK","","",null,null],[17,"KEY_LEFTALT","","",null,null],[17,"KEY_SPACE","","",null,null],[17,"KEY_CAPSLOCK","","",null,null],[17,"KEY_F1","","",null,null],[17,"KEY_F2","","",null,null],[17,"KEY_F3","","",null,null],[17,"KEY_F4","","",null,null],[17,"KEY_F5","","",null,null],[17,"KEY_F6","","",null,null],[17,"KEY_F7","","",null,null],[17,"KEY_F8","","",null,null],[17,"KEY_F9","","",null,null],[17,"KEY_F10","","",null,null],[17,"KEY_NUMLOCK","","",null,null],[17,"KEY_SCROLLLOCK","","",null,null],[17,"KEY_KP7","","",null,null],[17,"KEY_KP8","","",null,null],[17,"KEY_KP9","","",null,null],[17,"KEY_KPMINUS","","",null,null],[17,"KEY_KP4","","",null,null],[17,"KEY_KP5","","",null,null],[17,"KEY_KP6","","",null,null],[17,"KEY_KPPLUS","","",null,null],[17,"KEY_KP1","","",null,null],[17,"KEY_KP2","","",null,null],[17,"KEY_KP3","","",null,null],[17,"KEY_KP0","","",null,null],[17,"KEY_KPDOT","","",null,null],[17,"KEY_ZENKAKUHANKAKU","","",null,null],[17,"KEY_102ND","","",null,null],[17,"KEY_F11","","",null,null],[17,"KEY_F12","","",null,null],[17,"KEY_RO","","",null,null],[17,"KEY_KATAKANA","","",null,null],[17,"KEY_HIRAGANA","","",null,null],[17,"KEY_HENKAN","","",null,null],[17,"KEY_KATAKANAHIRAGANA","","",null,null],[17,"KEY_MUHENKAN","","",null,null],[17,"KEY_KPJPCOMMA","","",null,null],[17,"KEY_KPENTER","","",null,null],[17,"KEY_RIGHTCTRL","","",null,null],[17,"KEY_KPSLASH","","",null,null],[17,"KEY_SYSRQ","","",null,null],[17,"KEY_RIGHTALT","","",null,null],[17,"KEY_LINEFEED","","",null,null],[17,"KEY_HOME","","",null,null],[17,"KEY_UP","","",null,null],[17,"KEY_PAGEUP","","",null,null],[17,"KEY_LEFT","","",null,null],[17,"KEY_RIGHT","","",null,null],[17,"KEY_END","","",null,null],[17,"KEY_DOWN","","",null,null],[17,"KEY_PAGEDOWN","","",null,null],[17,"KEY_INSERT","","",null,null],[17,"KEY_DELETE","","",null,null],[17,"KEY_MACRO","","",null,null],[17,"KEY_MUTE","","",null,null],[17,"KEY_VOLUMEDOWN","","",null,null],[17,"KEY_VOLUMEUP","","",null,null],[17,"KEY_POWER","","",null,null],[17,"KEY_KPEQUAL","","",null,null],[17,"KEY_KPPLUSMINUS","","",null,null],[17,"KEY_PAUSE","","",null,null],[17,"KEY_SCALE","","",null,null],[17,"KEY_KPCOMMA","","",null,null],[17,"KEY_HANGEUL","","",null,null],[17,"KEY_HANGUEL","","",null,null],[17,"KEY_HANJA","","",null,null],[17,"KEY_YEN","","",null,null],[17,"KEY_LEFTMETA","","",null,null],[17,"KEY_RIGHTMETA","","",null,null],[17,"KEY_COMPOSE","","",null,null],[17,"KEY_STOP","","",null,null],[17,"KEY_AGAIN","","",null,null],[17,"KEY_PROPS","","",null,null],[17,"KEY_UNDO","","",null,null],[17,"KEY_FRONT","","",null,null],[17,"KEY_COPY","","",null,null],[17,"KEY_OPEN","","",null,null],[17,"KEY_PASTE","","",null,null],[17,"KEY_FIND","","",null,null],[17,"KEY_CUT","","",null,null],[17,"KEY_HELP","","",null,null],[17,"KEY_MENU","","",null,null],[17,"KEY_CALC","","",null,null],[17,"KEY_SETUP","","",null,null],[17,"KEY_SLEEP","","",null,null],[17,"KEY_WAKEUP","","",null,null],[17,"KEY_FILE","","",null,null],[17,"KEY_SENDFILE","","",null,null],[17,"KEY_DELETEFILE","","",null,null],[17,"KEY_XFER","","",null,null],[17,"KEY_PROG1","","",null,null],[17,"KEY_PROG2","","",null,null],[17,"KEY_WWW","","",null,null],[17,"KEY_MSDOS","","",null,null],[17,"KEY_COFFEE","","",null,null],[17,"KEY_SCREENLOCK","","",null,null],[17,"KEY_ROTATE_DISPLAY","","",null,null],[17,"KEY_DIRECTION","","",null,null],[17,"KEY_CYCLEWINDOWS","","",null,null],[17,"KEY_MAIL","","",null,null],[17,"KEY_BOOKMARKS","","",null,null],[17,"KEY_COMPUTER","","",null,null],[17,"KEY_BACK","","",null,null],[17,"KEY_FORWARD","","",null,null],[17,"KEY_CLOSECD","","",null,null],[17,"KEY_EJECTCD","","",null,null],[17,"KEY_EJECTCLOSECD","","",null,null],[17,"KEY_NEXTSONG","","",null,null],[17,"KEY_PLAYPAUSE","","",null,null],[17,"KEY_PREVIOUSSONG","","",null,null],[17,"KEY_STOPCD","","",null,null],[17,"KEY_RECORD","","",null,null],[17,"KEY_REWIND","","",null,null],[17,"KEY_PHONE","","",null,null],[17,"KEY_ISO","","",null,null],[17,"KEY_CONFIG","","",null,null],[17,"KEY_HOMEPAGE","","",null,null],[17,"KEY_REFRESH","","",null,null],[17,"KEY_EXIT","","",null,null],[17,"KEY_MOVE","","",null,null],[17,"KEY_EDIT","","",null,null],[17,"KEY_SCROLLUP","","",null,null],[17,"KEY_SCROLLDOWN","","",null,null],[17,"KEY_KPLEFTPAREN","","",null,null],[17,"KEY_KPRIGHTPAREN","","",null,null],[17,"KEY_NEW","","",null,null],[17,"KEY_REDO","","",null,null],[17,"KEY_F13","","",null,null],[17,"KEY_F14","","",null,null],[17,"KEY_F15","","",null,null],[17,"KEY_F16","","",null,null],[17,"KEY_F17","","",null,null],[17,"KEY_F18","","",null,null],[17,"KEY_F19","","",null,null],[17,"KEY_F20","","",null,null],[17,"KEY_F21","","",null,null],[17,"KEY_F22","","",null,null],[17,"KEY_F23","","",null,null],[17,"KEY_F24","","",null,null],[17,"KEY_PLAYCD","","",null,null],[17,"KEY_PAUSECD","","",null,null],[17,"KEY_PROG3","","",null,null],[17,"KEY_PROG4","","",null,null],[17,"KEY_DASHBOARD","","",null,null],[17,"KEY_SUSPEND","","",null,null],[17,"KEY_CLOSE","","",null,null],[17,"KEY_PLAY","","",null,null],[17,"KEY_FASTFORWARD","","",null,null],[17,"KEY_BASSBOOST","","",null,null],[17,"KEY_PRINT","","",null,null],[17,"KEY_HP","","",null,null],[17,"KEY_CAMERA","","",null,null],[17,"KEY_SOUND","","",null,null],[17,"KEY_QUESTION","","",null,null],[17,"KEY_EMAIL","","",null,null],[17,"KEY_CHAT","","",null,null],[17,"KEY_SEARCH","","",null,null],[17,"KEY_CONNECT","","",null,null],[17,"KEY_FINANCE","","",null,null],[17,"KEY_SPORT","","",null,null],[17,"KEY_SHOP","","",null,null],[17,"KEY_ALTERASE","","",null,null],[17,"KEY_CANCEL","","",null,null],[17,"KEY_BRIGHTNESSDOWN","","",null,null],[17,"KEY_BRIGHTNESSUP","","",null,null],[17,"KEY_MEDIA","","",null,null],[17,"KEY_SWITCHVIDEOMODE","","",null,null],[17,"KEY_KBDILLUMTOGGLE","","",null,null],[17,"KEY_KBDILLUMDOWN","","",null,null],[17,"KEY_KBDILLUMUP","","",null,null],[17,"KEY_SEND","","",null,null],[17,"KEY_REPLY","","",null,null],[17,"KEY_FORWARDMAIL","","",null,null],[17,"KEY_SAVE","","",null,null],[17,"KEY_DOCUMENTS","","",null,null],[17,"KEY_BATTERY","","",null,null],[17,"KEY_BLUETOOTH","","",null,null],[17,"KEY_WLAN","","",null,null],[17,"KEY_UWB","","",null,null],[17,"KEY_UNKNOWN","","",null,null],[17,"KEY_VIDEO_NEXT","","",null,null],[17,"KEY_VIDEO_PREV","","",null,null],[17,"KEY_BRIGHTNESS_CYCLE","","",null,null],[17,"KEY_BRIGHTNESS_AUTO","","",null,null],[17,"KEY_BRIGHTNESS_ZERO","","",null,null],[17,"KEY_DISPLAY_OFF","","",null,null],[17,"KEY_WWAN","","",null,null],[17,"KEY_WIMAX","","",null,null],[17,"KEY_RFKILL","","",null,null],[17,"KEY_MICMUTE","","",null,null],[17,"BTN_MISC","","",null,null],[17,"BTN_0","","",null,null],[17,"BTN_1","","",null,null],[17,"BTN_2","","",null,null],[17,"BTN_3","","",null,null],[17,"BTN_4","","",null,null],[17,"BTN_5","","",null,null],[17,"BTN_6","","",null,null],[17,"BTN_7","","",null,null],[17,"BTN_8","","",null,null],[17,"BTN_9","","",null,null],[17,"BTN_MOUSE","","",null,null],[17,"BTN_LEFT","","",null,null],[17,"BTN_RIGHT","","",null,null],[17,"BTN_MIDDLE","","",null,null],[17,"BTN_SIDE","","",null,null],[17,"BTN_EXTRA","","",null,null],[17,"BTN_FORWARD","","",null,null],[17,"BTN_BACK","","",null,null],[17,"BTN_TASK","","",null,null],[17,"BTN_JOYSTICK","","",null,null],[17,"BTN_TRIGGER","","",null,null],[17,"BTN_THUMB","","",null,null],[17,"BTN_THUMB2","","",null,null],[17,"BTN_TOP","","",null,null],[17,"BTN_TOP2","","",null,null],[17,"BTN_PINKIE","","",null,null],[17,"BTN_BASE","","",null,null],[17,"BTN_BASE2","","",null,null],[17,"BTN_BASE3","","",null,null],[17,"BTN_BASE4","","",null,null],[17,"BTN_BASE5","","",null,null],[17,"BTN_BASE6","","",null,null],[17,"BTN_DEAD","","",null,null],[17,"BTN_GAMEPAD","","",null,null],[17,"BTN_SOUTH","","",null,null],[17,"BTN_A","","",null,null],[17,"BTN_EAST","","",null,null],[17,"BTN_B","","",null,null],[17,"BTN_C","","",null,null],[17,"BTN_NORTH","","",null,null],[17,"BTN_X","","",null,null],[17,"BTN_WEST","","",null,null],[17,"BTN_Y","","",null,null],[17,"BTN_Z","","",null,null],[17,"BTN_TL","","",null,null],[17,"BTN_TR","","",null,null],[17,"BTN_TL2","","",null,null],[17,"BTN_TR2","","",null,null],[17,"BTN_SELECT","","",null,null],[17,"BTN_START","","",null,null],[17,"BTN_MODE","","",null,null],[17,"BTN_THUMBL","","",null,null],[17,"BTN_THUMBR","","",null,null],[17,"BTN_DIGI","","",null,null],[17,"BTN_TOOL_PEN","","",null,null],[17,"BTN_TOOL_RUBBER","","",null,null],[17,"BTN_TOOL_BRUSH","","",null,null],[17,"BTN_TOOL_PENCIL","","",null,null],[17,"BTN_TOOL_AIRBRUSH","","",null,null],[17,"BTN_TOOL_FINGER","","",null,null],[17,"BTN_TOOL_MOUSE","","",null,null],[17,"BTN_TOOL_LENS","","",null,null],[17,"BTN_TOOL_QUINTTAP","","",null,null],[17,"BTN_TOUCH","","",null,null],[17,"BTN_STYLUS","","",null,null],[17,"BTN_STYLUS2","","",null,null],[17,"BTN_TOOL_DOUBLETAP","","",null,null],[17,"BTN_TOOL_TRIPLETAP","","",null,null],[17,"BTN_TOOL_QUADTAP","","",null,null],[17,"BTN_WHEEL","","",null,null],[17,"BTN_GEAR_DOWN","","",null,null],[17,"BTN_GEAR_UP","","",null,null],[17,"KEY_OK","","",null,null],[17,"KEY_SELECT","","",null,null],[17,"KEY_GOTO","","",null,null],[17,"KEY_CLEAR","","",null,null],[17,"KEY_POWER2","","",null,null],[17,"KEY_OPTION","","",null,null],[17,"KEY_INFO","","",null,null],[17,"KEY_TIME","","",null,null],[17,"KEY_VENDOR","","",null,null],[17,"KEY_ARCHIVE","","",null,null],[17,"KEY_PROGRAM","","",null,null],[17,"KEY_CHANNEL","","",null,null],[17,"KEY_FAVORITES","","",null,null],[17,"KEY_EPG","","",null,null],[17,"KEY_PVR","","",null,null],[17,"KEY_MHP","","",null,null],[17,"KEY_LANGUAGE","","",null,null],[17,"KEY_TITLE","","",null,null],[17,"KEY_SUBTITLE","","",null,null],[17,"KEY_ANGLE","","",null,null],[17,"KEY_ZOOM","","",null,null],[17,"KEY_MODE","","",null,null],[17,"KEY_KEYBOARD","","",null,null],[17,"KEY_SCREEN","","",null,null],[17,"KEY_PC","","",null,null],[17,"KEY_TV","","",null,null],[17,"KEY_TV2","","",null,null],[17,"KEY_VCR","","",null,null],[17,"KEY_VCR2","","",null,null],[17,"KEY_SAT","","",null,null],[17,"KEY_SAT2","","",null,null],[17,"KEY_CD","","",null,null],[17,"KEY_TAPE","","",null,null],[17,"KEY_RADIO","","",null,null],[17,"KEY_TUNER","","",null,null],[17,"KEY_PLAYER","","",null,null],[17,"KEY_TEXT","","",null,null],[17,"KEY_DVD","","",null,null],[17,"KEY_AUX","","",null,null],[17,"KEY_MP3","","",null,null],[17,"KEY_AUDIO","","",null,null],[17,"KEY_VIDEO","","",null,null],[17,"KEY_DIRECTORY","","",null,null],[17,"KEY_LIST","","",null,null],[17,"KEY_MEMO","","",null,null],[17,"KEY_CALENDAR","","",null,null],[17,"KEY_RED","","",null,null],[17,"KEY_GREEN","","",null,null],[17,"KEY_YELLOW","","",null,null],[17,"KEY_BLUE","","",null,null],[17,"KEY_CHANNELUP","","",null,null],[17,"KEY_CHANNELDOWN","","",null,null],[17,"KEY_FIRST","","",null,null],[17,"KEY_LAST","","",null,null],[17,"KEY_AB","","",null,null],[17,"KEY_NEXT","","",null,null],[17,"KEY_RESTART","","",null,null],[17,"KEY_SLOW","","",null,null],[17,"KEY_SHUFFLE","","",null,null],[17,"KEY_BREAK","","",null,null],[17,"KEY_PREVIOUS","","",null,null],[17,"KEY_DIGITS","","",null,null],[17,"KEY_TEEN","","",null,null],[17,"KEY_TWEN","","",null,null],[17,"KEY_VIDEOPHONE","","",null,null],[17,"KEY_GAMES","","",null,null],[17,"KEY_ZOOMIN","","",null,null],[17,"KEY_ZOOMOUT","","",null,null],[17,"KEY_ZOOMRESET","","",null,null],[17,"KEY_WORDPROCESSOR","","",null,null],[17,"KEY_EDITOR","","",null,null],[17,"KEY_SPREADSHEET","","",null,null],[17,"KEY_GRAPHICSEDITOR","","",null,null],[17,"KEY_PRESENTATION","","",null,null],[17,"KEY_DATABASE","","",null,null],[17,"KEY_NEWS","","",null,null],[17,"KEY_VOICEMAIL","","",null,null],[17,"KEY_ADDRESSBOOK","","",null,null],[17,"KEY_MESSENGER","","",null,null],[17,"KEY_DISPLAYTOGGLE","","",null,null],[17,"KEY_BRIGHTNESS_TOGGLE","","",null,null],[17,"KEY_SPELLCHECK","","",null,null],[17,"KEY_LOGOFF","","",null,null],[17,"KEY_DOLLAR","","",null,null],[17,"KEY_EURO","","",null,null],[17,"KEY_FRAMEBACK","","",null,null],[17,"KEY_FRAMEFORWARD","","",null,null],[17,"KEY_CONTEXT_MENU","","",null,null],[17,"KEY_MEDIA_REPEAT","","",null,null],[17,"KEY_10CHANNELSUP","","",null,null],[17,"KEY_10CHANNELSDOWN","","",null,null],[17,"KEY_IMAGES","","",null,null],[17,"KEY_DEL_EOL","","",null,null],[17,"KEY_DEL_EOS","","",null,null],[17,"KEY_INS_LINE","","",null,null],[17,"KEY_DEL_LINE","","",null,null],[17,"KEY_FN","","",null,null],[17,"KEY_FN_ESC","","",null,null],[17,"KEY_FN_F1","","",null,null],[17,"KEY_FN_F2","","",null,null],[17,"KEY_FN_F3","","",null,null],[17,"KEY_FN_F4","","",null,null],[17,"KEY_FN_F5","","",null,null],[17,"KEY_FN_F6","","",null,null],[17,"KEY_FN_F7","","",null,null],[17,"KEY_FN_F8","","",null,null],[17,"KEY_FN_F9","","",null,null],[17,"KEY_FN_F10","","",null,null],[17,"KEY_FN_F11","","",null,null],[17,"KEY_FN_F12","","",null,null],[17,"KEY_FN_1","","",null,null],[17,"KEY_FN_2","","",null,null],[17,"KEY_FN_D","","",null,null],[17,"KEY_FN_E","","",null,null],[17,"KEY_FN_F","","",null,null],[17,"KEY_FN_S","","",null,null],[17,"KEY_FN_B","","",null,null],[17,"KEY_BRL_DOT1","","",null,null],[17,"KEY_BRL_DOT2","","",null,null],[17,"KEY_BRL_DOT3","","",null,null],[17,"KEY_BRL_DOT4","","",null,null],[17,"KEY_BRL_DOT5","","",null,null],[17,"KEY_BRL_DOT6","","",null,null],[17,"KEY_BRL_DOT7","","",null,null],[17,"KEY_BRL_DOT8","","",null,null],[17,"KEY_BRL_DOT9","","",null,null],[17,"KEY_BRL_DOT10","","",null,null],[17,"KEY_NUMERIC_0","","",null,null],[17,"KEY_NUMERIC_1","","",null,null],[17,"KEY_NUMERIC_2","","",null,null],[17,"KEY_NUMERIC_3","","",null,null],[17,"KEY_NUMERIC_4","","",null,null],[17,"KEY_NUMERIC_5","","",null,null],[17,"KEY_NUMERIC_6","","",null,null],[17,"KEY_NUMERIC_7","","",null,null],[17,"KEY_NUMERIC_8","","",null,null],[17,"KEY_NUMERIC_9","","",null,null],[17,"KEY_NUMERIC_STAR","","",null,null],[17,"KEY_NUMERIC_POUND","","",null,null],[17,"KEY_NUMERIC_A","","",null,null],[17,"KEY_NUMERIC_B","","",null,null],[17,"KEY_NUMERIC_C","","",null,null],[17,"KEY_NUMERIC_D","","",null,null],[17,"KEY_CAMERA_FOCUS","","",null,null],[17,"KEY_WPS_BUTTON","","",null,null],[17,"KEY_TOUCHPAD_TOGGLE","","",null,null],[17,"KEY_TOUCHPAD_ON","","",null,null],[17,"KEY_TOUCHPAD_OFF","","",null,null],[17,"KEY_CAMERA_ZOOMIN","","",null,null],[17,"KEY_CAMERA_ZOOMOUT","","",null,null],[17,"KEY_CAMERA_UP","","",null,null],[17,"KEY_CAMERA_DOWN","","",null,null],[17,"KEY_CAMERA_LEFT","","",null,null],[17,"KEY_CAMERA_RIGHT","","",null,null],[17,"KEY_ATTENDANT_ON","","",null,null],[17,"KEY_ATTENDANT_OFF","","",null,null],[17,"KEY_ATTENDANT_TOGGLE","","",null,null],[17,"KEY_LIGHTS_TOGGLE","","",null,null],[17,"BTN_DPAD_UP","","",null,null],[17,"BTN_DPAD_DOWN","","",null,null],[17,"BTN_DPAD_LEFT","","",null,null],[17,"BTN_DPAD_RIGHT","","",null,null],[17,"KEY_ALS_TOGGLE","","",null,null],[17,"KEY_BUTTONCONFIG","","",null,null],[17,"KEY_TASKMANAGER","","",null,null],[17,"KEY_JOURNAL","","",null,null],[17,"KEY_CONTROLPANEL","","",null,null],[17,"KEY_APPSELECT","","",null,null],[17,"KEY_SCREENSAVER","","",null,null],[17,"KEY_VOICECOMMAND","","",null,null],[17,"KEY_BRIGHTNESS_MIN","","",null,null],[17,"KEY_BRIGHTNESS_MAX","","",null,null],[17,"KEY_KBDINPUTASSIST_PREV","","",null,null],[17,"KEY_KBDINPUTASSIST_NEXT","","",null,null],[17,"KEY_KBDINPUTASSIST_PREVGROUP","","",null,null],[17,"KEY_KBDINPUTASSIST_NEXTGROUP","","",null,null],[17,"KEY_KBDINPUTASSIST_ACCEPT","","",null,null],[17,"KEY_KBDINPUTASSIST_CANCEL","","",null,null],[17,"BTN_TRIGGER_HAPPY","","",null,null],[17,"BTN_TRIGGER_HAPPY1","","",null,null],[17,"BTN_TRIGGER_HAPPY2","","",null,null],[17,"BTN_TRIGGER_HAPPY3","","",null,null],[17,"BTN_TRIGGER_HAPPY4","","",null,null],[17,"BTN_TRIGGER_HAPPY5","","",null,null],[17,"BTN_TRIGGER_HAPPY6","","",null,null],[17,"BTN_TRIGGER_HAPPY7","","",null,null],[17,"BTN_TRIGGER_HAPPY8","","",null,null],[17,"BTN_TRIGGER_HAPPY9","","",null,null],[17,"BTN_TRIGGER_HAPPY10","","",null,null],[17,"BTN_TRIGGER_HAPPY11","","",null,null],[17,"BTN_TRIGGER_HAPPY12","","",null,null],[17,"BTN_TRIGGER_HAPPY13","","",null,null],[17,"BTN_TRIGGER_HAPPY14","","",null,null],[17,"BTN_TRIGGER_HAPPY15","","",null,null],[17,"BTN_TRIGGER_HAPPY16","","",null,null],[17,"BTN_TRIGGER_HAPPY17","","",null,null],[17,"BTN_TRIGGER_HAPPY18","","",null,null],[17,"BTN_TRIGGER_HAPPY19","","",null,null],[17,"BTN_TRIGGER_HAPPY20","","",null,null],[17,"BTN_TRIGGER_HAPPY21","","",null,null],[17,"BTN_TRIGGER_HAPPY22","","",null,null],[17,"BTN_TRIGGER_HAPPY23","","",null,null],[17,"BTN_TRIGGER_HAPPY24","","",null,null],[17,"BTN_TRIGGER_HAPPY25","","",null,null],[17,"BTN_TRIGGER_HAPPY26","","",null,null],[17,"BTN_TRIGGER_HAPPY27","","",null,null],[17,"BTN_TRIGGER_HAPPY28","","",null,null],[17,"BTN_TRIGGER_HAPPY29","","",null,null],[17,"BTN_TRIGGER_HAPPY30","","",null,null],[17,"BTN_TRIGGER_HAPPY31","","",null,null],[17,"BTN_TRIGGER_HAPPY32","","",null,null],[17,"BTN_TRIGGER_HAPPY33","","",null,null],[17,"BTN_TRIGGER_HAPPY34","","",null,null],[17,"BTN_TRIGGER_HAPPY35","","",null,null],[17,"BTN_TRIGGER_HAPPY36","","",null,null],[17,"BTN_TRIGGER_HAPPY37","","",null,null],[17,"BTN_TRIGGER_HAPPY38","","",null,null],[17,"BTN_TRIGGER_HAPPY39","","",null,null],[17,"BTN_TRIGGER_HAPPY40","","",null,null],[17,"KEY_MIN_INTERESTING","","",null,null],[17,"KEY_MAX","","",null,null],[17,"KEY_CNT","","",null,null],[17,"REL_X","","",null,null],[17,"REL_Y","","",null,null],[17,"REL_Z","","",null,null],[17,"REL_RX","","",null,null],[17,"REL_RY","","",null,null],[17,"REL_RZ","","",null,null],[17,"REL_HWHEEL","","",null,null],[17,"REL_DIAL","","",null,null],[17,"REL_WHEEL","","",null,null],[17,"REL_MISC","","",null,null],[17,"REL_MAX","","",null,null],[17,"REL_CNT","","",null,null],[17,"ABS_X","","",null,null],[17,"ABS_Y","","",null,null],[17,"ABS_Z","","",null,null],[17,"ABS_RX","","",null,null],[17,"ABS_RY","","",null,null],[17,"ABS_RZ","","",null,null],[17,"ABS_THROTTLE","","",null,null],[17,"ABS_RUDDER","","",null,null],[17,"ABS_WHEEL","","",null,null],[17,"ABS_GAS","","",null,null],[17,"ABS_BRAKE","","",null,null],[17,"ABS_HAT0X","","",null,null],[17,"ABS_HAT0Y","","",null,null],[17,"ABS_HAT1X","","",null,null],[17,"ABS_HAT1Y","","",null,null],[17,"ABS_HAT2X","","",null,null],[17,"ABS_HAT2Y","","",null,null],[17,"ABS_HAT3X","","",null,null],[17,"ABS_HAT3Y","","",null,null],[17,"ABS_PRESSURE","","",null,null],[17,"ABS_DISTANCE","","",null,null],[17,"ABS_TILT_X","","",null,null],[17,"ABS_TILT_Y","","",null,null],[17,"ABS_TOOL_WIDTH","","",null,null],[17,"ABS_VOLUME","","",null,null],[17,"ABS_MISC","","",null,null],[17,"ABS_MT_SLOT","","",null,null],[17,"ABS_MT_TOUCH_MAJOR","","",null,null],[17,"ABS_MT_TOUCH_MINOR","","",null,null],[17,"ABS_MT_WIDTH_MAJOR","","",null,null],[17,"ABS_MT_WIDTH_MINOR","","",null,null],[17,"ABS_MT_ORIENTATION","","",null,null],[17,"ABS_MT_POSITION_X","","",null,null],[17,"ABS_MT_POSITION_Y","","",null,null],[17,"ABS_MT_TOOL_TYPE","","",null,null],[17,"ABS_MT_BLOB_ID","","",null,null],[17,"ABS_MT_TRACKING_ID","","",null,null],[17,"ABS_MT_PRESSURE","","",null,null],[17,"ABS_MT_DISTANCE","","",null,null],[17,"ABS_MT_TOOL_X","","",null,null],[17,"ABS_MT_TOOL_Y","","",null,null],[17,"ABS_MAX","","",null,null],[17,"ABS_CNT","","",null,null],[17,"SW_LID","","",null,null],[17,"SW_TABLET_MODE","","",null,null],[17,"SW_HEADPHONE_INSERT","","",null,null],[17,"SW_RFKILL_ALL","","",null,null],[17,"SW_RADIO","","",null,null],[17,"SW_MICROPHONE_INSERT","","",null,null],[17,"SW_DOCK","","",null,null],[17,"SW_LINEOUT_INSERT","","",null,null],[17,"SW_JACK_PHYSICAL_INSERT","","",null,null],[17,"SW_VIDEOOUT_INSERT","","",null,null],[17,"SW_CAMERA_LENS_COVER","","",null,null],[17,"SW_KEYPAD_SLIDE","","",null,null],[17,"SW_FRONT_PROXIMITY","","",null,null],[17,"SW_ROTATE_LOCK","","",null,null],[17,"SW_LINEIN_INSERT","","",null,null],[17,"SW_MUTE_DEVICE","","",null,null],[17,"SW_MAX","","",null,null],[17,"SW_CNT","","",null,null],[17,"MSC_SERIAL","","",null,null],[17,"MSC_PULSELED","","",null,null],[17,"MSC_GESTURE","","",null,null],[17,"MSC_RAW","","",null,null],[17,"MSC_SCAN","","",null,null],[17,"MSC_TIMESTAMP","","",null,null],[17,"MSC_MAX","","",null,null],[17,"MSC_CNT","","",null,null],[17,"LED_NUML","","",null,null],[17,"LED_CAPSL","","",null,null],[17,"LED_SCROLLL","","",null,null],[17,"LED_COMPOSE","","",null,null],[17,"LED_KANA","","",null,null],[17,"LED_SLEEP","","",null,null],[17,"LED_SUSPEND","","",null,null],[17,"LED_MUTE","","",null,null],[17,"LED_MISC","","",null,null],[17,"LED_MAIL","","",null,null],[17,"LED_CHARGING","","",null,null],[17,"LED_MAX","","",null,null],[17,"LED_CNT","","",null,null],[17,"REP_DELAY","","",null,null],[17,"REP_PERIOD","","",null,null],[17,"REP_MAX","","",null,null],[17,"REP_CNT","","",null,null],[17,"SND_CLICK","","",null,null],[17,"SND_BELL","","",null,null],[17,"SND_TONE","","",null,null],[17,"SND_MAX","","",null,null],[17,"SND_CNT","","",null,null],[17,"UINPUT_MAX_NAME_SIZE","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}]],"paths":[[3,"input_event"],[3,"input_id"],[3,"uinput_user_dev"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["unsafe_any"] = {"doc":"Traits for unsafe downcasting from trait objects to & or &mut references of concrete types. These should only be used if you are absolutely certain of the type of the data in said trait object - there be dragons etc.","items":[[8,"UnsafeAny","unsafe_any","A trait providing unchecked downcasting to its contents when stored in a trait object.",null,null],[8,"UnsafeAnyExt","","An extension trait for unchecked downcasting of trait objects.",null,null],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}]],"paths":[[8,"UnsafeAnyExt"],[8,"UnsafeAny"]]};
searchIndex["vecmath"] = {"doc":"A simple and generic library for vector math.","items":[[5,"col_mat3x2_mul_col","vecmath","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat3x2_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"col_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"col_mat4x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"col_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"row_mat2x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"row_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"row_mat3x4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"row_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"mat2x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix2x3"}}],[5,"mat3x2_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x2"}}],[5,"mat3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3"}}],[5,"mat3x4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x4"}}],[5,"mat4x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4x3"}}],[5,"mat4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4"}}],[5,"vec2_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_add","","Adds two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_add","","Adds two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_add","","Adds two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec2_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector2"},{"name":"t"}],"output":{"name":"vector2"}}],[5,"vec3_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector3"},{"name":"t"}],"output":{"name":"vector3"}}],[5,"vec4_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector4"},{"name":"t"}],"output":{"name":"vector4"}}],[5,"vec2_neg","","Negates the vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_neg","","Negates the vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_neg","","Negates the vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec3_dot_vec2","","Computes transformed vector component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_vec3","","Computes transformed vector component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec3_dot_pos2","","Computes transformed position component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_pos3","","Computes transformed position component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"row_mat2x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat2x3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"row_mat3x2_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x2_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat4x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4x3_row","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"mat2x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix3x2"}}],[5,"mat3x2_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix2x3"}}],[5,"mat3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix4x3"}}],[5,"mat4x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix3x4"}}],[5,"mat4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"col_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_pos2","","Transforms a 2D position through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_pos2","","Transforms a 2D position through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat2x3_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_vec2","","Transforms a 2D vector through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_vec2","","Transforms a 2D vector through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"mat2x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_det","","Computes the determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv_det","","Computes inverse determinant of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_inv_det","","Computes inverse determinant of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_inv_det","","Computes inverse determinant of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_inv_det","","Computes inverse determinant of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_inv_det","","Computes inverse determinant of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_inv_det","","Computes the inverse determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv","","Computes the inverse of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_inv","","Computes the inverse of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_inv","","Computes the inverse of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_inv","","Computes the inverse of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_inv","","Computes the inverse of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_inv","","Computes the inverse of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[0,"traits","","Various useful traits",null,null],[6,"Vector2","","A 2D vector.",null,null],[6,"Vector3","","A 3D vector.",null,null],[6,"Vector4","","A 4D vector.",null,null],[6,"Matrix2x3","","A 2x3 matrix.",null,null],[6,"Matrix3x2","","A 3x2 matrix.",null,null],[6,"Matrix3","","A 3x3 matrix.",null,null],[6,"Matrix3x4","","A 3x4 matrix.",null,null],[6,"Matrix4x3","","A 4x3 matrix.",null,null],[6,"Matrix4","","A 4x4 matrix.",null,null]],"paths":[]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. ```[x, y, width height]``` where ```(x, y)``` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["wlc"] = {"doc":"This crate provides idomatic and safe bindings to wlc","items":[[3,"Output","wlc","An Output managed by Wlc",null,null],[3,"WeakOutput","","Weak reference to an output",null,null],[3,"Point","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"Size","","",null,null],[12,"w","","",1,null],[12,"h","","",1,null],[3,"Geometry","","",null,null],[12,"origin","","",2,null],[12,"size","","",2,null],[3,"Modifiers","","Combined keyboard Modifiers and LEDs",null,null],[12,"leds","","",3,null],[12,"mods","","",3,null],[3,"Positioner","","A Positioner of a `View` managed by Wlc",null,null],[3,"View","","A View managed by Wlc",null,null],[3,"WeakView","","Weak reference to a view",null,null],[3,"Wlc","","Initialized compositor",null,null],[4,"BackendType","","Backend used by wlc",null,null],[13,"Null","","",4,null],[13,"DRM","","",4,null],[13,"X11","","",4,null],[4,"KeyState","","States of a key",null,null],[13,"Released","","",5,null],[13,"Pressed","","",5,null],[4,"ButtonState","","States of a button",null,null],[13,"Released","","",6,null],[13,"Pressed","","",6,null],[4,"TouchType","","Touch events",null,null],[13,"Down","","",7,null],[13,"Up","","",7,null],[13,"Motion","","",7,null],[13,"Frame","","",7,null],[13,"Cancel","","",7,null],[4,"Key","","",null,null],[13,"Reserved","","",8,null],[13,"Esc","","",8,null],[13,"_1","","",8,null],[13,"_2","","",8,null],[13,"_3","","",8,null],[13,"_4","","",8,null],[13,"_5","","",8,null],[13,"_6","","",8,null],[13,"_7","","",8,null],[13,"_8","","",8,null],[13,"_9","","",8,null],[13,"_0","","",8,null],[13,"Minus","","",8,null],[13,"Equal","","",8,null],[13,"BackSpace","","",8,null],[13,"Tab","","",8,null],[13,"Q","","",8,null],[13,"W","","",8,null],[13,"E","","",8,null],[13,"R","","",8,null],[13,"T","","",8,null],[13,"Y","","",8,null],[13,"U","","",8,null],[13,"I","","",8,null],[13,"O","","",8,null],[13,"P","","",8,null],[13,"LeftBrace","","",8,null],[13,"RightBrace","","",8,null],[13,"Enter","","",8,null],[13,"LeftControl","","",8,null],[13,"A","","",8,null],[13,"S","","",8,null],[13,"D","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"J","","",8,null],[13,"K","","",8,null],[13,"L","","",8,null],[13,"SemiColon","","",8,null],[13,"Apostrophe","","",8,null],[13,"Grave","","",8,null],[13,"LeftShift","","",8,null],[13,"BackSlash","","",8,null],[13,"Z","","",8,null],[13,"X","","",8,null],[13,"C","","",8,null],[13,"V","","",8,null],[13,"B","","",8,null],[13,"N","","",8,null],[13,"M","","",8,null],[13,"Comma","","",8,null],[13,"Dot","","",8,null],[13,"Slash","","",8,null],[13,"RightShift","","",8,null],[13,"LeftAlt","","",8,null],[13,"Space","","",8,null],[13,"CapsLock","","",8,null],[13,"F1","","",8,null],[13,"F2","","",8,null],[13,"F3","","",8,null],[13,"F4","","",8,null],[13,"F5","","",8,null],[13,"F6","","",8,null],[13,"F7","","",8,null],[13,"F8","","",8,null],[13,"F9","","",8,null],[13,"F10","","",8,null],[13,"NumLock","","",8,null],[13,"ScrollLock","","",8,null],[13,"F11","","",8,null],[13,"F12","","",8,null],[13,"RightControl","","",8,null],[13,"SysRq","","",8,null],[13,"RightAlt","","",8,null],[13,"LineFeed","","",8,null],[13,"Home","","",8,null],[13,"Up","","",8,null],[13,"PageUp","","",8,null],[13,"Left","","",8,null],[13,"Right","","",8,null],[13,"End","","",8,null],[13,"Down","","",8,null],[13,"PageDown","","",8,null],[13,"Insert","","",8,null],[13,"Delete","","",8,null],[13,"LeftMeta","","",8,null],[13,"RightMeta","","",8,null],[13,"ScrollUp","","",8,null],[13,"ScrollDown","","",8,null],[13,"F13","","",8,null],[13,"F14","","",8,null],[13,"F15","","",8,null],[13,"F16","","",8,null],[13,"F17","","",8,null],[13,"F18","","",8,null],[13,"F19","","",8,null],[13,"F20","","",8,null],[13,"F21","","",8,null],[13,"F22","","",8,null],[13,"F23","","",8,null],[13,"F24","","",8,null],[13,"KP7","","",8,null],[13,"KP8","","",8,null],[13,"KP9","","",8,null],[13,"KPMinus","","",8,null],[13,"KP4","","",8,null],[13,"KP5","","",8,null],[13,"KP6","","",8,null],[13,"KPPlus","","",8,null],[13,"KP1","","",8,null],[13,"KP2","","",8,null],[13,"KP3","","",8,null],[13,"KP0","","",8,null],[13,"KPDot","","",8,null],[13,"Zenkakuhankaku","","",8,null],[13,"_102ND","","",8,null],[13,"RO","","",8,null],[13,"Katakana","","",8,null],[13,"Hiragana","","",8,null],[13,"Henkan","","",8,null],[13,"KatakanaHiragana","","",8,null],[13,"Muhenkan","","",8,null],[13,"KPJPComma","","",8,null],[13,"KPEnter","","",8,null],[13,"KPSlash","","",8,null],[13,"Macro","","",8,null],[13,"Mute","","",8,null],[13,"VolumeDown","","",8,null],[13,"VolumeUp","","",8,null],[13,"Power","","",8,null],[13,"KPEqual","","",8,null],[13,"KPPlusMinus","","",8,null],[13,"Pause","","",8,null],[13,"Scale","","",8,null],[13,"KPComma","","",8,null],[13,"Hangeul","","",8,null],[13,"Hanja","","",8,null],[13,"Yen","","",8,null],[13,"Compose","","",8,null],[13,"Stop","","",8,null],[13,"Again","","",8,null],[13,"Props","","",8,null],[13,"Undo","","",8,null],[13,"Front","","",8,null],[13,"Copy","","",8,null],[13,"Open","","",8,null],[13,"Paste","","",8,null],[13,"Find","","",8,null],[13,"Cut","","",8,null],[13,"Help","","",8,null],[13,"Menu","","",8,null],[13,"Calc","","",8,null],[13,"Setup","","",8,null],[13,"Sleep","","",8,null],[13,"Wakeup","","",8,null],[13,"File","","",8,null],[13,"Sendfile","","",8,null],[13,"DeleteFile","","",8,null],[13,"Xfer","","",8,null],[13,"Prog1","","",8,null],[13,"Prog2","","",8,null],[13,"WWW","","",8,null],[13,"MSDos","","",8,null],[13,"ScreenLock","","",8,null],[13,"RotateDisplay","","",8,null],[13,"CycleWindows","","",8,null],[13,"Mail","","",8,null],[13,"Bookmarks","","",8,null],[13,"Computer","","",8,null],[13,"Back","","",8,null],[13,"Forward","","",8,null],[13,"CloseCD","","",8,null],[13,"EjectCD","","",8,null],[13,"EjectCloseCD","","",8,null],[13,"NextSong","","",8,null],[13,"PlayPause","","",8,null],[13,"PreviousSong","","",8,null],[13,"StopCD","","",8,null],[13,"Record","","",8,null],[13,"Rewind","","",8,null],[13,"Phone","","",8,null],[13,"Iso","","",8,null],[13,"Config","","",8,null],[13,"HomePage","","",8,null],[13,"Refresh","","",8,null],[13,"Exit","","",8,null],[13,"Move","","",8,null],[13,"Edit","","",8,null],[13,"KPLeftParen","","",8,null],[13,"KPRightParen","","",8,null],[13,"New","","",8,null],[13,"Redo","","",8,null],[13,"PlayCD","","",8,null],[13,"PauseCD","","",8,null],[13,"Prog3","","",8,null],[13,"Prog4","","",8,null],[13,"Dashboard","","",8,null],[13,"Suspend","","",8,null],[13,"Close","","",8,null],[13,"Play","","",8,null],[13,"FastForward","","",8,null],[13,"BassBoost","","",8,null],[13,"Print","","",8,null],[13,"HP","","",8,null],[13,"Camera","","",8,null],[13,"Sound","","",8,null],[13,"Question","","",8,null],[13,"Email","","",8,null],[13,"Chat","","",8,null],[13,"Search","","",8,null],[13,"Connect","","",8,null],[13,"Finance","","",8,null],[13,"Sport","","",8,null],[13,"Shop","","",8,null],[13,"AltErase","","",8,null],[13,"Cancel","","",8,null],[13,"BrightnessDown","","",8,null],[13,"BrightnessUp","","",8,null],[13,"Media","","",8,null],[13,"SwitchVideoMode","","",8,null],[13,"KBDIllumToggle","","",8,null],[13,"KBDIllumDown","","",8,null],[13,"KBDIllumUp","","",8,null],[13,"Send","","",8,null],[13,"Reply","","",8,null],[13,"ForwardMail","","",8,null],[13,"Save","","",8,null],[13,"Documents","","",8,null],[13,"Battery","","",8,null],[13,"Bluetooth","","",8,null],[13,"Wlan","","",8,null],[13,"Uwb","","",8,null],[13,"Unknown","","",8,null],[13,"VideoNext","","",8,null],[13,"VideoPrev","","",8,null],[13,"BrightnessCycle","","",8,null],[13,"BrightnessAuto","","",8,null],[13,"DisplayOff","","",8,null],[13,"WWan","","",8,null],[13,"RFKill","","",8,null],[13,"MicMute","","",8,null],[4,"Button","","",null,null],[13,"Left","","",9,null],[13,"Right","","",9,null],[13,"Middle","","",9,null],[13,"Side","","",9,null],[13,"Extra","","",9,null],[13,"Forward","","",9,null],[13,"Back","","",9,null],[13,"Task","","",9,null],[4,"Error","","Error representing the failure to start the Compositor",null,null],[13,"AlreadyRunning","","A wlc compositor was already started in this library and did not yet terminate",10,null],[13,"InternalError","","wlc encountered an internal error (e.g. failure to allocate resources) Take a log at the log (wlc uses the log crate)",10,null],[5,"init","","Initialize Wlc. Returns `wlc::Error` on failure.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"terminate","","Terminates the currently active wlc Compositor",null,{"inputs":[],"output":null}],[5,"get_backend_type","","Gets the currently active Backend",null,{"inputs":[],"output":{"name":"backendtype"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"all_outputs","","Get all outputs currently active outputs",11,null],[11,"with_all_outputs","","Safe version of `Output::all_outputs` Work with all active outputs in a short-lived scope",11,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"focused_output","","Get currently focused output",11,{"inputs":[],"output":{"name":"output"}}],[11,"with_focused_output","","Safe version of `Output::focused_output` Work with currently focused outputs in a short-lived scope",11,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"set_no_focus","","Set no output focused",11,{"inputs":[],"output":null}],[11,"name","","Get output name",11,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"is_sleeping","","Get sleep state",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_sleeping","","Wake up / send output to sleep",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"resolution","","Get real resolution.",11,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"virtual_resolution","","Get virtual resolution.",11,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"set_resolution","","Set resolution",11,{"inputs":[{"name":"self"},{"name":"size"},{"name":"u32"}],"output":null}],[11,"scale","","Get scale factor",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"visibility","","Get current visibility bitmask",11,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"set_visibility","","Set visibility bitmask",11,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"views","","Get views in stack order",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_views","","Sets the view stack",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"focus","","Focus output",11,{"inputs":[{"name":"self"}],"output":null}],[11,"gamma_size","","Get the supported gamma ramp size of the `Output`",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_gamma","","Set gamma ramps for this `Output`",11,null],[11,"schedule_render","","Schedules output for rendering next frame.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"weak_reference","","Get a weak reference of the Output that may outlive its referenced output",11,{"inputs":[{"name":"self"}],"output":{"name":"weakoutput"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"weakoutput"}}],[11,"upgrade","","Upgrade your weak reference to an actual `Output`",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"run","","Run a function on the referenced Output, if it still exists",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"weakoutput"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"weakoutput"}],"output":{"name":"bool"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_no_focus","","Set no view focused",13,{"inputs":[],"output":null}],[11,"focus","","Focus view",13,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Close view",13,{"inputs":[{"name":"self"}],"output":null}],[11,"output","","Get current `Output`",13,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"set_output","","Set `Output`",13,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"send_to_back","","Send behind everything else",13,{"inputs":[{"name":"self"}],"output":null}],[11,"send_below","","Send below another view",13,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"bring_to_front","","Send above another view",13,{"inputs":[{"name":"self"}],"output":null}],[11,"bring_above","","Bring to front of everything",13,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"visibility","","Get current visibility bitmask",13,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"set_visibility","","Set visibility bitmask",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"geometry","","Get current geometry. (what client sees)",13,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"visible_geometry","","Get visible geometry. (what wlc displays)",13,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"set_geometry","","Set geometry. Set edges if the geometry change is caused by interactive resize",13,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"geometry"}],"output":null}],[11,"view_type","","Get type bitfield",13,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"set_view_type","","Set type bit. Toggle indicates whether it is set or not",13,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"state","","Get current state bitfield",13,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"set_state","","Set state bit. Toggle indicates whether it is set or not",13,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"parent","","Get parent view",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_parent","","Set parent view",13,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"title","","Get title",13,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"class","","Get class. (shell-surface only)",13,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"instance","","Get instance. (shell-surface only)",13,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"app_id","","Get app id. (xdg-surface only)",13,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"pid","","Get pid",13,{"inputs":[{"name":"self"}],"output":{"name":"pid_t"}}],[11,"positioner","","Get the positioner of the `View` if one exists",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"weak_reference","","Get a weak reference of the View that may outlive its referenced view",13,{"inputs":[{"name":"self"}],"output":{"name":"weakview"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"anchor","","Get the anchor of the `Positioner`",14,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"anchor_rect","","Get the anchor rect of the `Positioner`",14,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"constraint_adjustment","","Get the constraint adjustments of the `Positioner`",14,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"gravity","","Get the gravity of the `Positioner`",14,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"offset","","Get the offset of the `Positioner`",14,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"size","","Get the size of the `Positioner`",14,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"weakview"}}],[11,"upgrade","","Upgrade your weak reference to an actual `View`",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"run","","Run a function on the referenced View, if it still exists",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"weakview"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"weakview"}],"output":{"name":"bool"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",15,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backendtype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"backendtype"}],"output":{"name":"bool"}}],[11,"from_i64","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"touchtype"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"touchtype"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"from_i64","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"modifiers"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"modifiers"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"empty","","",3,{"inputs":[],"output":{"name":"modifiers"}}],[11,"set_user_data","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"user_data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_take_user_data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear_user_data","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_user_data","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"user_data","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_take_user_data","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear_user_data","","",13,{"inputs":[{"name":"self"}],"output":null}],[0,"event_loop","","Exposed functionality of wlc's underlying run loop",null,null],[3,"EventSource","wlc::event_loop","Type representing a registered event source",null,null],[3,"Timer","","Type representing a registered Timer",null,null],[5,"event_loop_add_io","","Register an IO type implementing `AsRawFd` for event loop callbacks on specified events",null,{"inputs":[{"name":"r"},{"name":"flags"},{"name":"t"}],"output":{"name":"eventsource"}}],[5,"event_loop_add_timer","","Created a registered Timer with a given Callback",null,{"inputs":[{"name":"t"}],"output":{"name":"timer"}}],[0,"Event","","Events emitted by the run loop",null,null],[3,"Flags","wlc::event_loop::Event","Bitmap that may represent multiple Event types",null,null],[17,"Readable","","Did become readable",null,null],[17,"Writable","","Did become writable",null,null],[17,"HangUp","","Did hung up",null,null],[17,"Error","","An error happened",null,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",16,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",16,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"update","wlc::event_loop","Call to schedule the next fire event after a given Duration",17,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[8,"IoCallback","","Implement this to react to events",null,null],[10,"ready","","called when a new event happened",19,{"inputs":[{"name":"self"},{"name":"r"},{"name":"flags"}],"output":null}],[8,"TimerCallback","","Implement this to react to timer events",null,null],[10,"fire","","called once for every call to update after the specified delay",20,{"inputs":[{"name":"self"}],"output":null}],[0,"input","wlc","Experimental Input API",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",9,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"keyboard","wlc::input","Keyboard related functionality",null,null],[3,"Keymap","wlc::input::keyboard","Compiled keymap object.",null,null],[6,"Keysym","","A number used to represent the symbols generated from a key on a keyboard.",null,null],[3,"State","","Keyboard state object.",null,null],[0,"Keysyms","","",null,null],[17,"KEY_NoSymbol","wlc::input::keyboard::Keysyms","",null,null],[17,"KEY_VoidSymbol","","",null,null],[17,"KEY_BackSpace","","",null,null],[17,"KEY_Tab","","",null,null],[17,"KEY_Linefeed","","",null,null],[17,"KEY_Clear","","",null,null],[17,"KEY_Return","","",null,null],[17,"KEY_Pause","","",null,null],[17,"KEY_Scroll_Lock","","",null,null],[17,"KEY_Sys_Req","","",null,null],[17,"KEY_Escape","","",null,null],[17,"KEY_Delete","","",null,null],[17,"KEY_Multi_key","","",null,null],[17,"KEY_Codeinput","","",null,null],[17,"KEY_SingleCandidate","","",null,null],[17,"KEY_MultipleCandidate","","",null,null],[17,"KEY_PreviousCandidate","","",null,null],[17,"KEY_Kanji","","",null,null],[17,"KEY_Muhenkan","","",null,null],[17,"KEY_Henkan_Mode","","",null,null],[17,"KEY_Henkan","","",null,null],[17,"KEY_Romaji","","",null,null],[17,"KEY_Hiragana","","",null,null],[17,"KEY_Katakana","","",null,null],[17,"KEY_Hiragana_Katakana","","",null,null],[17,"KEY_Zenkaku","","",null,null],[17,"KEY_Hankaku","","",null,null],[17,"KEY_Zenkaku_Hankaku","","",null,null],[17,"KEY_Touroku","","",null,null],[17,"KEY_Massyo","","",null,null],[17,"KEY_Kana_Lock","","",null,null],[17,"KEY_Kana_Shift","","",null,null],[17,"KEY_Eisu_Shift","","",null,null],[17,"KEY_Eisu_toggle","","",null,null],[17,"KEY_Kanji_Bangou","","",null,null],[17,"KEY_Zen_Koho","","",null,null],[17,"KEY_Mae_Koho","","",null,null],[17,"KEY_Home","","",null,null],[17,"KEY_Left","","",null,null],[17,"KEY_Up","","",null,null],[17,"KEY_Right","","",null,null],[17,"KEY_Down","","",null,null],[17,"KEY_Prior","","",null,null],[17,"KEY_Page_Up","","",null,null],[17,"KEY_Next","","",null,null],[17,"KEY_Page_Down","","",null,null],[17,"KEY_End","","",null,null],[17,"KEY_Begin","","",null,null],[17,"KEY_Select","","",null,null],[17,"KEY_Print","","",null,null],[17,"KEY_Execute","","",null,null],[17,"KEY_Insert","","",null,null],[17,"KEY_Undo","","",null,null],[17,"KEY_Redo","","",null,null],[17,"KEY_Menu","","",null,null],[17,"KEY_Find","","",null,null],[17,"KEY_Cancel","","",null,null],[17,"KEY_Help","","",null,null],[17,"KEY_Break","","",null,null],[17,"KEY_Mode_switch","","",null,null],[17,"KEY_script_switch","","",null,null],[17,"KEY_Num_Lock","","",null,null],[17,"KEY_KP_Space","","",null,null],[17,"KEY_KP_Tab","","",null,null],[17,"KEY_KP_Enter","","",null,null],[17,"KEY_KP_F1","","",null,null],[17,"KEY_KP_F2","","",null,null],[17,"KEY_KP_F3","","",null,null],[17,"KEY_KP_F4","","",null,null],[17,"KEY_KP_Home","","",null,null],[17,"KEY_KP_Left","","",null,null],[17,"KEY_KP_Up","","",null,null],[17,"KEY_KP_Right","","",null,null],[17,"KEY_KP_Down","","",null,null],[17,"KEY_KP_Prior","","",null,null],[17,"KEY_KP_Page_Up","","",null,null],[17,"KEY_KP_Next","","",null,null],[17,"KEY_KP_Page_Down","","",null,null],[17,"KEY_KP_End","","",null,null],[17,"KEY_KP_Begin","","",null,null],[17,"KEY_KP_Insert","","",null,null],[17,"KEY_KP_Delete","","",null,null],[17,"KEY_KP_Equal","","",null,null],[17,"KEY_KP_Multiply","","",null,null],[17,"KEY_KP_Add","","",null,null],[17,"KEY_KP_Separator","","",null,null],[17,"KEY_KP_Subtract","","",null,null],[17,"KEY_KP_Decimal","","",null,null],[17,"KEY_KP_Divide","","",null,null],[17,"KEY_KP_0","","",null,null],[17,"KEY_KP_1","","",null,null],[17,"KEY_KP_2","","",null,null],[17,"KEY_KP_3","","",null,null],[17,"KEY_KP_4","","",null,null],[17,"KEY_KP_5","","",null,null],[17,"KEY_KP_6","","",null,null],[17,"KEY_KP_7","","",null,null],[17,"KEY_KP_8","","",null,null],[17,"KEY_KP_9","","",null,null],[17,"KEY_F1","","",null,null],[17,"KEY_F2","","",null,null],[17,"KEY_F3","","",null,null],[17,"KEY_F4","","",null,null],[17,"KEY_F5","","",null,null],[17,"KEY_F6","","",null,null],[17,"KEY_F7","","",null,null],[17,"KEY_F8","","",null,null],[17,"KEY_F9","","",null,null],[17,"KEY_F10","","",null,null],[17,"KEY_F11","","",null,null],[17,"KEY_L1","","",null,null],[17,"KEY_F12","","",null,null],[17,"KEY_L2","","",null,null],[17,"KEY_F13","","",null,null],[17,"KEY_L3","","",null,null],[17,"KEY_F14","","",null,null],[17,"KEY_L4","","",null,null],[17,"KEY_F15","","",null,null],[17,"KEY_L5","","",null,null],[17,"KEY_F16","","",null,null],[17,"KEY_L6","","",null,null],[17,"KEY_F17","","",null,null],[17,"KEY_L7","","",null,null],[17,"KEY_F18","","",null,null],[17,"KEY_L8","","",null,null],[17,"KEY_F19","","",null,null],[17,"KEY_L9","","",null,null],[17,"KEY_F20","","",null,null],[17,"KEY_L10","","",null,null],[17,"KEY_F21","","",null,null],[17,"KEY_R1","","",null,null],[17,"KEY_F22","","",null,null],[17,"KEY_R2","","",null,null],[17,"KEY_F23","","",null,null],[17,"KEY_R3","","",null,null],[17,"KEY_F24","","",null,null],[17,"KEY_R4","","",null,null],[17,"KEY_F25","","",null,null],[17,"KEY_R5","","",null,null],[17,"KEY_F26","","",null,null],[17,"KEY_R6","","",null,null],[17,"KEY_F27","","",null,null],[17,"KEY_R7","","",null,null],[17,"KEY_F28","","",null,null],[17,"KEY_R8","","",null,null],[17,"KEY_F29","","",null,null],[17,"KEY_R9","","",null,null],[17,"KEY_F30","","",null,null],[17,"KEY_R10","","",null,null],[17,"KEY_F31","","",null,null],[17,"KEY_R11","","",null,null],[17,"KEY_F32","","",null,null],[17,"KEY_R12","","",null,null],[17,"KEY_F33","","",null,null],[17,"KEY_R13","","",null,null],[17,"KEY_F34","","",null,null],[17,"KEY_R14","","",null,null],[17,"KEY_F35","","",null,null],[17,"KEY_R15","","",null,null],[17,"KEY_Shift_L","","",null,null],[17,"KEY_Shift_R","","",null,null],[17,"KEY_Control_L","","",null,null],[17,"KEY_Control_R","","",null,null],[17,"KEY_Caps_Lock","","",null,null],[17,"KEY_Shift_Lock","","",null,null],[17,"KEY_Meta_L","","",null,null],[17,"KEY_Meta_R","","",null,null],[17,"KEY_Alt_L","","",null,null],[17,"KEY_Alt_R","","",null,null],[17,"KEY_Super_L","","",null,null],[17,"KEY_Super_R","","",null,null],[17,"KEY_Hyper_L","","",null,null],[17,"KEY_Hyper_R","","",null,null],[17,"KEY_ISO_Lock","","",null,null],[17,"KEY_ISO_Level2_Latch","","",null,null],[17,"KEY_ISO_Level3_Shift","","",null,null],[17,"KEY_ISO_Level3_Latch","","",null,null],[17,"KEY_ISO_Level3_Lock","","",null,null],[17,"KEY_ISO_Level5_Shift","","",null,null],[17,"KEY_ISO_Level5_Latch","","",null,null],[17,"KEY_ISO_Level5_Lock","","",null,null],[17,"KEY_ISO_Group_Shift","","",null,null],[17,"KEY_ISO_Group_Latch","","",null,null],[17,"KEY_ISO_Group_Lock","","",null,null],[17,"KEY_ISO_Next_Group","","",null,null],[17,"KEY_ISO_Next_Group_Lock","","",null,null],[17,"KEY_ISO_Prev_Group","","",null,null],[17,"KEY_ISO_Prev_Group_Lock","","",null,null],[17,"KEY_ISO_First_Group","","",null,null],[17,"KEY_ISO_First_Group_Lock","","",null,null],[17,"KEY_ISO_Last_Group","","",null,null],[17,"KEY_ISO_Last_Group_Lock","","",null,null],[17,"KEY_ISO_Left_Tab","","",null,null],[17,"KEY_ISO_Move_Line_Up","","",null,null],[17,"KEY_ISO_Move_Line_Down","","",null,null],[17,"KEY_ISO_Partial_Line_Up","","",null,null],[17,"KEY_ISO_Partial_Line_Down","","",null,null],[17,"KEY_ISO_Partial_Space_Left","","",null,null],[17,"KEY_ISO_Partial_Space_Right","","",null,null],[17,"KEY_ISO_Set_Margin_Left","","",null,null],[17,"KEY_ISO_Set_Margin_Right","","",null,null],[17,"KEY_ISO_Release_Margin_Left","","",null,null],[17,"KEY_ISO_Release_Margin_Right","","",null,null],[17,"KEY_ISO_Release_Both_Margins","","",null,null],[17,"KEY_ISO_Fast_Cursor_Left","","",null,null],[17,"KEY_ISO_Fast_Cursor_Right","","",null,null],[17,"KEY_ISO_Fast_Cursor_Up","","",null,null],[17,"KEY_ISO_Fast_Cursor_Down","","",null,null],[17,"KEY_ISO_Continuous_Underline","","",null,null],[17,"KEY_ISO_Discontinuous_Underline","","",null,null],[17,"KEY_ISO_Emphasize","","",null,null],[17,"KEY_ISO_Center_Object","","",null,null],[17,"KEY_ISO_Enter","","",null,null],[17,"KEY_dead_grave","","",null,null],[17,"KEY_dead_acute","","",null,null],[17,"KEY_dead_circumflex","","",null,null],[17,"KEY_dead_tilde","","",null,null],[17,"KEY_dead_perispomeni","","",null,null],[17,"KEY_dead_macron","","",null,null],[17,"KEY_dead_breve","","",null,null],[17,"KEY_dead_abovedot","","",null,null],[17,"KEY_dead_diaeresis","","",null,null],[17,"KEY_dead_abovering","","",null,null],[17,"KEY_dead_doubleacute","","",null,null],[17,"KEY_dead_caron","","",null,null],[17,"KEY_dead_cedilla","","",null,null],[17,"KEY_dead_ogonek","","",null,null],[17,"KEY_dead_iota","","",null,null],[17,"KEY_dead_voiced_sound","","",null,null],[17,"KEY_dead_semivoiced_sound","","",null,null],[17,"KEY_dead_belowdot","","",null,null],[17,"KEY_dead_hook","","",null,null],[17,"KEY_dead_horn","","",null,null],[17,"KEY_dead_stroke","","",null,null],[17,"KEY_dead_abovecomma","","",null,null],[17,"KEY_dead_psili","","",null,null],[17,"KEY_dead_abovereversedcomma","","",null,null],[17,"KEY_dead_dasia","","",null,null],[17,"KEY_dead_doublegrave","","",null,null],[17,"KEY_dead_belowring","","",null,null],[17,"KEY_dead_belowmacron","","",null,null],[17,"KEY_dead_belowcircumflex","","",null,null],[17,"KEY_dead_belowtilde","","",null,null],[17,"KEY_dead_belowbreve","","",null,null],[17,"KEY_dead_belowdiaeresis","","",null,null],[17,"KEY_dead_invertedbreve","","",null,null],[17,"KEY_dead_belowcomma","","",null,null],[17,"KEY_dead_currency","","",null,null],[17,"KEY_dead_lowline","","",null,null],[17,"KEY_dead_aboveverticalline","","",null,null],[17,"KEY_dead_belowverticalline","","",null,null],[17,"KEY_dead_longsolidusoverlay","","",null,null],[17,"KEY_dead_a","","",null,null],[17,"KEY_dead_A","","",null,null],[17,"KEY_dead_e","","",null,null],[17,"KEY_dead_E","","",null,null],[17,"KEY_dead_i","","",null,null],[17,"KEY_dead_I","","",null,null],[17,"KEY_dead_o","","",null,null],[17,"KEY_dead_O","","",null,null],[17,"KEY_dead_u","","",null,null],[17,"KEY_dead_U","","",null,null],[17,"KEY_dead_small_schwa","","",null,null],[17,"KEY_dead_capital_schwa","","",null,null],[17,"KEY_dead_greek","","",null,null],[17,"KEY_First_Virtual_Screen","","",null,null],[17,"KEY_Prev_Virtual_Screen","","",null,null],[17,"KEY_Next_Virtual_Screen","","",null,null],[17,"KEY_Last_Virtual_Screen","","",null,null],[17,"KEY_Terminate_Server","","",null,null],[17,"KEY_AccessX_Enable","","",null,null],[17,"KEY_AccessX_Feedback_Enable","","",null,null],[17,"KEY_RepeatKeys_Enable","","",null,null],[17,"KEY_SlowKeys_Enable","","",null,null],[17,"KEY_BounceKeys_Enable","","",null,null],[17,"KEY_StickyKeys_Enable","","",null,null],[17,"KEY_MouseKeys_Enable","","",null,null],[17,"KEY_MouseKeys_Accel_Enable","","",null,null],[17,"KEY_Overlay1_Enable","","",null,null],[17,"KEY_Overlay2_Enable","","",null,null],[17,"KEY_AudibleBell_Enable","","",null,null],[17,"KEY_Pointer_Left","","",null,null],[17,"KEY_Pointer_Right","","",null,null],[17,"KEY_Pointer_Up","","",null,null],[17,"KEY_Pointer_Down","","",null,null],[17,"KEY_Pointer_UpLeft","","",null,null],[17,"KEY_Pointer_UpRight","","",null,null],[17,"KEY_Pointer_DownLeft","","",null,null],[17,"KEY_Pointer_DownRight","","",null,null],[17,"KEY_Pointer_Button_Dflt","","",null,null],[17,"KEY_Pointer_Button1","","",null,null],[17,"KEY_Pointer_Button2","","",null,null],[17,"KEY_Pointer_Button3","","",null,null],[17,"KEY_Pointer_Button4","","",null,null],[17,"KEY_Pointer_Button5","","",null,null],[17,"KEY_Pointer_DblClick_Dflt","","",null,null],[17,"KEY_Pointer_DblClick1","","",null,null],[17,"KEY_Pointer_DblClick2","","",null,null],[17,"KEY_Pointer_DblClick3","","",null,null],[17,"KEY_Pointer_DblClick4","","",null,null],[17,"KEY_Pointer_DblClick5","","",null,null],[17,"KEY_Pointer_Drag_Dflt","","",null,null],[17,"KEY_Pointer_Drag1","","",null,null],[17,"KEY_Pointer_Drag2","","",null,null],[17,"KEY_Pointer_Drag3","","",null,null],[17,"KEY_Pointer_Drag4","","",null,null],[17,"KEY_Pointer_Drag5","","",null,null],[17,"KEY_Pointer_EnableKeys","","",null,null],[17,"KEY_Pointer_Accelerate","","",null,null],[17,"KEY_Pointer_DfltBtnNext","","",null,null],[17,"KEY_Pointer_DfltBtnPrev","","",null,null],[17,"KEY_ch","","",null,null],[17,"KEY_Ch","","",null,null],[17,"KEY_CH","","",null,null],[17,"KEY_c_h","","",null,null],[17,"KEY_C_h","","",null,null],[17,"KEY_C_H","","",null,null],[17,"KEY_3270_Duplicate","","",null,null],[17,"KEY_3270_FieldMark","","",null,null],[17,"KEY_3270_Right2","","",null,null],[17,"KEY_3270_Left2","","",null,null],[17,"KEY_3270_BackTab","","",null,null],[17,"KEY_3270_EraseEOF","","",null,null],[17,"KEY_3270_EraseInput","","",null,null],[17,"KEY_3270_Reset","","",null,null],[17,"KEY_3270_Quit","","",null,null],[17,"KEY_3270_PA1","","",null,null],[17,"KEY_3270_PA2","","",null,null],[17,"KEY_3270_PA3","","",null,null],[17,"KEY_3270_Test","","",null,null],[17,"KEY_3270_Attn","","",null,null],[17,"KEY_3270_CursorBlink","","",null,null],[17,"KEY_3270_AltCursor","","",null,null],[17,"KEY_3270_KeyClick","","",null,null],[17,"KEY_3270_Jump","","",null,null],[17,"KEY_3270_Ident","","",null,null],[17,"KEY_3270_Rule","","",null,null],[17,"KEY_3270_Copy","","",null,null],[17,"KEY_3270_Play","","",null,null],[17,"KEY_3270_Setup","","",null,null],[17,"KEY_3270_Record","","",null,null],[17,"KEY_3270_ChangeScreen","","",null,null],[17,"KEY_3270_DeleteWord","","",null,null],[17,"KEY_3270_ExSelect","","",null,null],[17,"KEY_3270_CursorSelect","","",null,null],[17,"KEY_3270_PrintScreen","","",null,null],[17,"KEY_3270_Enter","","",null,null],[17,"KEY_space","","",null,null],[17,"KEY_exclam","","",null,null],[17,"KEY_quotedbl","","",null,null],[17,"KEY_numbersign","","",null,null],[17,"KEY_dollar","","",null,null],[17,"KEY_percent","","",null,null],[17,"KEY_ampersand","","",null,null],[17,"KEY_apostrophe","","",null,null],[17,"KEY_quoteright","","",null,null],[17,"KEY_parenleft","","",null,null],[17,"KEY_parenright","","",null,null],[17,"KEY_asterisk","","",null,null],[17,"KEY_plus","","",null,null],[17,"KEY_comma","","",null,null],[17,"KEY_minus","","",null,null],[17,"KEY_period","","",null,null],[17,"KEY_slash","","",null,null],[17,"KEY_0","","",null,null],[17,"KEY_1","","",null,null],[17,"KEY_2","","",null,null],[17,"KEY_3","","",null,null],[17,"KEY_4","","",null,null],[17,"KEY_5","","",null,null],[17,"KEY_6","","",null,null],[17,"KEY_7","","",null,null],[17,"KEY_8","","",null,null],[17,"KEY_9","","",null,null],[17,"KEY_colon","","",null,null],[17,"KEY_semicolon","","",null,null],[17,"KEY_less","","",null,null],[17,"KEY_equal","","",null,null],[17,"KEY_greater","","",null,null],[17,"KEY_question","","",null,null],[17,"KEY_at","","",null,null],[17,"KEY_A","","",null,null],[17,"KEY_B","","",null,null],[17,"KEY_C","","",null,null],[17,"KEY_D","","",null,null],[17,"KEY_E","","",null,null],[17,"KEY_F","","",null,null],[17,"KEY_G","","",null,null],[17,"KEY_H","","",null,null],[17,"KEY_I","","",null,null],[17,"KEY_J","","",null,null],[17,"KEY_K","","",null,null],[17,"KEY_L","","",null,null],[17,"KEY_M","","",null,null],[17,"KEY_N","","",null,null],[17,"KEY_O","","",null,null],[17,"KEY_P","","",null,null],[17,"KEY_Q","","",null,null],[17,"KEY_R","","",null,null],[17,"KEY_S","","",null,null],[17,"KEY_T","","",null,null],[17,"KEY_U","","",null,null],[17,"KEY_V","","",null,null],[17,"KEY_W","","",null,null],[17,"KEY_X","","",null,null],[17,"KEY_Y","","",null,null],[17,"KEY_Z","","",null,null],[17,"KEY_bracketleft","","",null,null],[17,"KEY_backslash","","",null,null],[17,"KEY_bracketright","","",null,null],[17,"KEY_asciicircum","","",null,null],[17,"KEY_underscore","","",null,null],[17,"KEY_grave","","",null,null],[17,"KEY_quoteleft","","",null,null],[17,"KEY_a","","",null,null],[17,"KEY_b","","",null,null],[17,"KEY_c","","",null,null],[17,"KEY_d","","",null,null],[17,"KEY_e","","",null,null],[17,"KEY_f","","",null,null],[17,"KEY_g","","",null,null],[17,"KEY_h","","",null,null],[17,"KEY_i","","",null,null],[17,"KEY_j","","",null,null],[17,"KEY_k","","",null,null],[17,"KEY_l","","",null,null],[17,"KEY_m","","",null,null],[17,"KEY_n","","",null,null],[17,"KEY_o","","",null,null],[17,"KEY_p","","",null,null],[17,"KEY_q","","",null,null],[17,"KEY_r","","",null,null],[17,"KEY_s","","",null,null],[17,"KEY_t","","",null,null],[17,"KEY_u","","",null,null],[17,"KEY_v","","",null,null],[17,"KEY_w","","",null,null],[17,"KEY_x","","",null,null],[17,"KEY_y","","",null,null],[17,"KEY_z","","",null,null],[17,"KEY_braceleft","","",null,null],[17,"KEY_bar","","",null,null],[17,"KEY_braceright","","",null,null],[17,"KEY_asciitilde","","",null,null],[17,"KEY_nobreakspace","","",null,null],[17,"KEY_exclamdown","","",null,null],[17,"KEY_cent","","",null,null],[17,"KEY_sterling","","",null,null],[17,"KEY_currency","","",null,null],[17,"KEY_yen","","",null,null],[17,"KEY_brokenbar","","",null,null],[17,"KEY_section","","",null,null],[17,"KEY_diaeresis","","",null,null],[17,"KEY_copyright","","",null,null],[17,"KEY_ordfeminine","","",null,null],[17,"KEY_guillemotleft","","",null,null],[17,"KEY_notsign","","",null,null],[17,"KEY_hyphen","","",null,null],[17,"KEY_registered","","",null,null],[17,"KEY_macron","","",null,null],[17,"KEY_degree","","",null,null],[17,"KEY_plusminus","","",null,null],[17,"KEY_twosuperior","","",null,null],[17,"KEY_threesuperior","","",null,null],[17,"KEY_acute","","",null,null],[17,"KEY_mu","","",null,null],[17,"KEY_paragraph","","",null,null],[17,"KEY_periodcentered","","",null,null],[17,"KEY_cedilla","","",null,null],[17,"KEY_onesuperior","","",null,null],[17,"KEY_masculine","","",null,null],[17,"KEY_guillemotright","","",null,null],[17,"KEY_onequarter","","",null,null],[17,"KEY_onehalf","","",null,null],[17,"KEY_threequarters","","",null,null],[17,"KEY_questiondown","","",null,null],[17,"KEY_Agrave","","",null,null],[17,"KEY_Aacute","","",null,null],[17,"KEY_Acircumflex","","",null,null],[17,"KEY_Atilde","","",null,null],[17,"KEY_Adiaeresis","","",null,null],[17,"KEY_Aring","","",null,null],[17,"KEY_AE","","",null,null],[17,"KEY_Ccedilla","","",null,null],[17,"KEY_Egrave","","",null,null],[17,"KEY_Eacute","","",null,null],[17,"KEY_Ecircumflex","","",null,null],[17,"KEY_Ediaeresis","","",null,null],[17,"KEY_Igrave","","",null,null],[17,"KEY_Iacute","","",null,null],[17,"KEY_Icircumflex","","",null,null],[17,"KEY_Idiaeresis","","",null,null],[17,"KEY_ETH","","",null,null],[17,"KEY_Eth","","",null,null],[17,"KEY_Ntilde","","",null,null],[17,"KEY_Ograve","","",null,null],[17,"KEY_Oacute","","",null,null],[17,"KEY_Ocircumflex","","",null,null],[17,"KEY_Otilde","","",null,null],[17,"KEY_Odiaeresis","","",null,null],[17,"KEY_multiply","","",null,null],[17,"KEY_Oslash","","",null,null],[17,"KEY_Ooblique","","",null,null],[17,"KEY_Ugrave","","",null,null],[17,"KEY_Uacute","","",null,null],[17,"KEY_Ucircumflex","","",null,null],[17,"KEY_Udiaeresis","","",null,null],[17,"KEY_Yacute","","",null,null],[17,"KEY_THORN","","",null,null],[17,"KEY_Thorn","","",null,null],[17,"KEY_ssharp","","",null,null],[17,"KEY_agrave","","",null,null],[17,"KEY_aacute","","",null,null],[17,"KEY_acircumflex","","",null,null],[17,"KEY_atilde","","",null,null],[17,"KEY_adiaeresis","","",null,null],[17,"KEY_aring","","",null,null],[17,"KEY_ae","","",null,null],[17,"KEY_ccedilla","","",null,null],[17,"KEY_egrave","","",null,null],[17,"KEY_eacute","","",null,null],[17,"KEY_ecircumflex","","",null,null],[17,"KEY_ediaeresis","","",null,null],[17,"KEY_igrave","","",null,null],[17,"KEY_iacute","","",null,null],[17,"KEY_icircumflex","","",null,null],[17,"KEY_idiaeresis","","",null,null],[17,"KEY_eth","","",null,null],[17,"KEY_ntilde","","",null,null],[17,"KEY_ograve","","",null,null],[17,"KEY_oacute","","",null,null],[17,"KEY_ocircumflex","","",null,null],[17,"KEY_otilde","","",null,null],[17,"KEY_odiaeresis","","",null,null],[17,"KEY_division","","",null,null],[17,"KEY_oslash","","",null,null],[17,"KEY_ooblique","","",null,null],[17,"KEY_ugrave","","",null,null],[17,"KEY_uacute","","",null,null],[17,"KEY_ucircumflex","","",null,null],[17,"KEY_udiaeresis","","",null,null],[17,"KEY_yacute","","",null,null],[17,"KEY_thorn","","",null,null],[17,"KEY_ydiaeresis","","",null,null],[17,"KEY_Aogonek","","",null,null],[17,"KEY_breve","","",null,null],[17,"KEY_Lstroke","","",null,null],[17,"KEY_Lcaron","","",null,null],[17,"KEY_Sacute","","",null,null],[17,"KEY_Scaron","","",null,null],[17,"KEY_Scedilla","","",null,null],[17,"KEY_Tcaron","","",null,null],[17,"KEY_Zacute","","",null,null],[17,"KEY_Zcaron","","",null,null],[17,"KEY_Zabovedot","","",null,null],[17,"KEY_aogonek","","",null,null],[17,"KEY_ogonek","","",null,null],[17,"KEY_lstroke","","",null,null],[17,"KEY_lcaron","","",null,null],[17,"KEY_sacute","","",null,null],[17,"KEY_caron","","",null,null],[17,"KEY_scaron","","",null,null],[17,"KEY_scedilla","","",null,null],[17,"KEY_tcaron","","",null,null],[17,"KEY_zacute","","",null,null],[17,"KEY_doubleacute","","",null,null],[17,"KEY_zcaron","","",null,null],[17,"KEY_zabovedot","","",null,null],[17,"KEY_Racute","","",null,null],[17,"KEY_Abreve","","",null,null],[17,"KEY_Lacute","","",null,null],[17,"KEY_Cacute","","",null,null],[17,"KEY_Ccaron","","",null,null],[17,"KEY_Eogonek","","",null,null],[17,"KEY_Ecaron","","",null,null],[17,"KEY_Dcaron","","",null,null],[17,"KEY_Dstroke","","",null,null],[17,"KEY_Nacute","","",null,null],[17,"KEY_Ncaron","","",null,null],[17,"KEY_Odoubleacute","","",null,null],[17,"KEY_Rcaron","","",null,null],[17,"KEY_Uring","","",null,null],[17,"KEY_Udoubleacute","","",null,null],[17,"KEY_Tcedilla","","",null,null],[17,"KEY_racute","","",null,null],[17,"KEY_abreve","","",null,null],[17,"KEY_lacute","","",null,null],[17,"KEY_cacute","","",null,null],[17,"KEY_ccaron","","",null,null],[17,"KEY_eogonek","","",null,null],[17,"KEY_ecaron","","",null,null],[17,"KEY_dcaron","","",null,null],[17,"KEY_dstroke","","",null,null],[17,"KEY_nacute","","",null,null],[17,"KEY_ncaron","","",null,null],[17,"KEY_odoubleacute","","",null,null],[17,"KEY_rcaron","","",null,null],[17,"KEY_uring","","",null,null],[17,"KEY_udoubleacute","","",null,null],[17,"KEY_tcedilla","","",null,null],[17,"KEY_abovedot","","",null,null],[17,"KEY_Hstroke","","",null,null],[17,"KEY_Hcircumflex","","",null,null],[17,"KEY_Iabovedot","","",null,null],[17,"KEY_Gbreve","","",null,null],[17,"KEY_Jcircumflex","","",null,null],[17,"KEY_hstroke","","",null,null],[17,"KEY_hcircumflex","","",null,null],[17,"KEY_idotless","","",null,null],[17,"KEY_gbreve","","",null,null],[17,"KEY_jcircumflex","","",null,null],[17,"KEY_Cabovedot","","",null,null],[17,"KEY_Ccircumflex","","",null,null],[17,"KEY_Gabovedot","","",null,null],[17,"KEY_Gcircumflex","","",null,null],[17,"KEY_Ubreve","","",null,null],[17,"KEY_Scircumflex","","",null,null],[17,"KEY_cabovedot","","",null,null],[17,"KEY_ccircumflex","","",null,null],[17,"KEY_gabovedot","","",null,null],[17,"KEY_gcircumflex","","",null,null],[17,"KEY_ubreve","","",null,null],[17,"KEY_scircumflex","","",null,null],[17,"KEY_kra","","",null,null],[17,"KEY_kappa","","",null,null],[17,"KEY_Rcedilla","","",null,null],[17,"KEY_Itilde","","",null,null],[17,"KEY_Lcedilla","","",null,null],[17,"KEY_Emacron","","",null,null],[17,"KEY_Gcedilla","","",null,null],[17,"KEY_Tslash","","",null,null],[17,"KEY_rcedilla","","",null,null],[17,"KEY_itilde","","",null,null],[17,"KEY_lcedilla","","",null,null],[17,"KEY_emacron","","",null,null],[17,"KEY_gcedilla","","",null,null],[17,"KEY_tslash","","",null,null],[17,"KEY_ENG","","",null,null],[17,"KEY_eng","","",null,null],[17,"KEY_Amacron","","",null,null],[17,"KEY_Iogonek","","",null,null],[17,"KEY_Eabovedot","","",null,null],[17,"KEY_Imacron","","",null,null],[17,"KEY_Ncedilla","","",null,null],[17,"KEY_Omacron","","",null,null],[17,"KEY_Kcedilla","","",null,null],[17,"KEY_Uogonek","","",null,null],[17,"KEY_Utilde","","",null,null],[17,"KEY_Umacron","","",null,null],[17,"KEY_amacron","","",null,null],[17,"KEY_iogonek","","",null,null],[17,"KEY_eabovedot","","",null,null],[17,"KEY_imacron","","",null,null],[17,"KEY_ncedilla","","",null,null],[17,"KEY_omacron","","",null,null],[17,"KEY_kcedilla","","",null,null],[17,"KEY_uogonek","","",null,null],[17,"KEY_utilde","","",null,null],[17,"KEY_umacron","","",null,null],[17,"KEY_Wcircumflex","","",null,null],[17,"KEY_wcircumflex","","",null,null],[17,"KEY_Ycircumflex","","",null,null],[17,"KEY_ycircumflex","","",null,null],[17,"KEY_Babovedot","","",null,null],[17,"KEY_babovedot","","",null,null],[17,"KEY_Dabovedot","","",null,null],[17,"KEY_dabovedot","","",null,null],[17,"KEY_Fabovedot","","",null,null],[17,"KEY_fabovedot","","",null,null],[17,"KEY_Mabovedot","","",null,null],[17,"KEY_mabovedot","","",null,null],[17,"KEY_Pabovedot","","",null,null],[17,"KEY_pabovedot","","",null,null],[17,"KEY_Sabovedot","","",null,null],[17,"KEY_sabovedot","","",null,null],[17,"KEY_Tabovedot","","",null,null],[17,"KEY_tabovedot","","",null,null],[17,"KEY_Wgrave","","",null,null],[17,"KEY_wgrave","","",null,null],[17,"KEY_Wacute","","",null,null],[17,"KEY_wacute","","",null,null],[17,"KEY_Wdiaeresis","","",null,null],[17,"KEY_wdiaeresis","","",null,null],[17,"KEY_Ygrave","","",null,null],[17,"KEY_ygrave","","",null,null],[17,"KEY_OE","","",null,null],[17,"KEY_oe","","",null,null],[17,"KEY_Ydiaeresis","","",null,null],[17,"KEY_overline","","",null,null],[17,"KEY_kana_fullstop","","",null,null],[17,"KEY_kana_openingbracket","","",null,null],[17,"KEY_kana_closingbracket","","",null,null],[17,"KEY_kana_comma","","",null,null],[17,"KEY_kana_conjunctive","","",null,null],[17,"KEY_kana_middledot","","",null,null],[17,"KEY_kana_WO","","",null,null],[17,"KEY_kana_a","","",null,null],[17,"KEY_kana_i","","",null,null],[17,"KEY_kana_u","","",null,null],[17,"KEY_kana_e","","",null,null],[17,"KEY_kana_o","","",null,null],[17,"KEY_kana_ya","","",null,null],[17,"KEY_kana_yu","","",null,null],[17,"KEY_kana_yo","","",null,null],[17,"KEY_kana_tsu","","",null,null],[17,"KEY_kana_tu","","",null,null],[17,"KEY_prolongedsound","","",null,null],[17,"KEY_kana_A","","",null,null],[17,"KEY_kana_I","","",null,null],[17,"KEY_kana_U","","",null,null],[17,"KEY_kana_E","","",null,null],[17,"KEY_kana_O","","",null,null],[17,"KEY_kana_KA","","",null,null],[17,"KEY_kana_KI","","",null,null],[17,"KEY_kana_KU","","",null,null],[17,"KEY_kana_KE","","",null,null],[17,"KEY_kana_KO","","",null,null],[17,"KEY_kana_SA","","",null,null],[17,"KEY_kana_SHI","","",null,null],[17,"KEY_kana_SU","","",null,null],[17,"KEY_kana_SE","","",null,null],[17,"KEY_kana_SO","","",null,null],[17,"KEY_kana_TA","","",null,null],[17,"KEY_kana_CHI","","",null,null],[17,"KEY_kana_TI","","",null,null],[17,"KEY_kana_TSU","","",null,null],[17,"KEY_kana_TU","","",null,null],[17,"KEY_kana_TE","","",null,null],[17,"KEY_kana_TO","","",null,null],[17,"KEY_kana_NA","","",null,null],[17,"KEY_kana_NI","","",null,null],[17,"KEY_kana_NU","","",null,null],[17,"KEY_kana_NE","","",null,null],[17,"KEY_kana_NO","","",null,null],[17,"KEY_kana_HA","","",null,null],[17,"KEY_kana_HI","","",null,null],[17,"KEY_kana_FU","","",null,null],[17,"KEY_kana_HU","","",null,null],[17,"KEY_kana_HE","","",null,null],[17,"KEY_kana_HO","","",null,null],[17,"KEY_kana_MA","","",null,null],[17,"KEY_kana_MI","","",null,null],[17,"KEY_kana_MU","","",null,null],[17,"KEY_kana_ME","","",null,null],[17,"KEY_kana_MO","","",null,null],[17,"KEY_kana_YA","","",null,null],[17,"KEY_kana_YU","","",null,null],[17,"KEY_kana_YO","","",null,null],[17,"KEY_kana_RA","","",null,null],[17,"KEY_kana_RI","","",null,null],[17,"KEY_kana_RU","","",null,null],[17,"KEY_kana_RE","","",null,null],[17,"KEY_kana_RO","","",null,null],[17,"KEY_kana_WA","","",null,null],[17,"KEY_kana_N","","",null,null],[17,"KEY_voicedsound","","",null,null],[17,"KEY_semivoicedsound","","",null,null],[17,"KEY_kana_switch","","",null,null],[17,"KEY_Farsi_0","","",null,null],[17,"KEY_Farsi_1","","",null,null],[17,"KEY_Farsi_2","","",null,null],[17,"KEY_Farsi_3","","",null,null],[17,"KEY_Farsi_4","","",null,null],[17,"KEY_Farsi_5","","",null,null],[17,"KEY_Farsi_6","","",null,null],[17,"KEY_Farsi_7","","",null,null],[17,"KEY_Farsi_8","","",null,null],[17,"KEY_Farsi_9","","",null,null],[17,"KEY_Arabic_percent","","",null,null],[17,"KEY_Arabic_superscript_alef","","",null,null],[17,"KEY_Arabic_tteh","","",null,null],[17,"KEY_Arabic_peh","","",null,null],[17,"KEY_Arabic_tcheh","","",null,null],[17,"KEY_Arabic_ddal","","",null,null],[17,"KEY_Arabic_rreh","","",null,null],[17,"KEY_Arabic_comma","","",null,null],[17,"KEY_Arabic_fullstop","","",null,null],[17,"KEY_Arabic_0","","",null,null],[17,"KEY_Arabic_1","","",null,null],[17,"KEY_Arabic_2","","",null,null],[17,"KEY_Arabic_3","","",null,null],[17,"KEY_Arabic_4","","",null,null],[17,"KEY_Arabic_5","","",null,null],[17,"KEY_Arabic_6","","",null,null],[17,"KEY_Arabic_7","","",null,null],[17,"KEY_Arabic_8","","",null,null],[17,"KEY_Arabic_9","","",null,null],[17,"KEY_Arabic_semicolon","","",null,null],[17,"KEY_Arabic_question_mark","","",null,null],[17,"KEY_Arabic_hamza","","",null,null],[17,"KEY_Arabic_maddaonalef","","",null,null],[17,"KEY_Arabic_hamzaonalef","","",null,null],[17,"KEY_Arabic_hamzaonwaw","","",null,null],[17,"KEY_Arabic_hamzaunderalef","","",null,null],[17,"KEY_Arabic_hamzaonyeh","","",null,null],[17,"KEY_Arabic_alef","","",null,null],[17,"KEY_Arabic_beh","","",null,null],[17,"KEY_Arabic_tehmarbuta","","",null,null],[17,"KEY_Arabic_teh","","",null,null],[17,"KEY_Arabic_theh","","",null,null],[17,"KEY_Arabic_jeem","","",null,null],[17,"KEY_Arabic_hah","","",null,null],[17,"KEY_Arabic_khah","","",null,null],[17,"KEY_Arabic_dal","","",null,null],[17,"KEY_Arabic_thal","","",null,null],[17,"KEY_Arabic_ra","","",null,null],[17,"KEY_Arabic_zain","","",null,null],[17,"KEY_Arabic_seen","","",null,null],[17,"KEY_Arabic_sheen","","",null,null],[17,"KEY_Arabic_sad","","",null,null],[17,"KEY_Arabic_dad","","",null,null],[17,"KEY_Arabic_tah","","",null,null],[17,"KEY_Arabic_zah","","",null,null],[17,"KEY_Arabic_ain","","",null,null],[17,"KEY_Arabic_ghain","","",null,null],[17,"KEY_Arabic_tatweel","","",null,null],[17,"KEY_Arabic_feh","","",null,null],[17,"KEY_Arabic_qaf","","",null,null],[17,"KEY_Arabic_kaf","","",null,null],[17,"KEY_Arabic_lam","","",null,null],[17,"KEY_Arabic_meem","","",null,null],[17,"KEY_Arabic_noon","","",null,null],[17,"KEY_Arabic_ha","","",null,null],[17,"KEY_Arabic_heh","","",null,null],[17,"KEY_Arabic_waw","","",null,null],[17,"KEY_Arabic_alefmaksura","","",null,null],[17,"KEY_Arabic_yeh","","",null,null],[17,"KEY_Arabic_fathatan","","",null,null],[17,"KEY_Arabic_dammatan","","",null,null],[17,"KEY_Arabic_kasratan","","",null,null],[17,"KEY_Arabic_fatha","","",null,null],[17,"KEY_Arabic_damma","","",null,null],[17,"KEY_Arabic_kasra","","",null,null],[17,"KEY_Arabic_shadda","","",null,null],[17,"KEY_Arabic_sukun","","",null,null],[17,"KEY_Arabic_madda_above","","",null,null],[17,"KEY_Arabic_hamza_above","","",null,null],[17,"KEY_Arabic_hamza_below","","",null,null],[17,"KEY_Arabic_jeh","","",null,null],[17,"KEY_Arabic_veh","","",null,null],[17,"KEY_Arabic_keheh","","",null,null],[17,"KEY_Arabic_gaf","","",null,null],[17,"KEY_Arabic_noon_ghunna","","",null,null],[17,"KEY_Arabic_heh_doachashmee","","",null,null],[17,"KEY_Farsi_yeh","","",null,null],[17,"KEY_Arabic_farsi_yeh","","",null,null],[17,"KEY_Arabic_yeh_baree","","",null,null],[17,"KEY_Arabic_heh_goal","","",null,null],[17,"KEY_Arabic_switch","","",null,null],[17,"KEY_Cyrillic_GHE_bar","","",null,null],[17,"KEY_Cyrillic_ghe_bar","","",null,null],[17,"KEY_Cyrillic_ZHE_descender","","",null,null],[17,"KEY_Cyrillic_zhe_descender","","",null,null],[17,"KEY_Cyrillic_KA_descender","","",null,null],[17,"KEY_Cyrillic_ka_descender","","",null,null],[17,"KEY_Cyrillic_KA_vertstroke","","",null,null],[17,"KEY_Cyrillic_ka_vertstroke","","",null,null],[17,"KEY_Cyrillic_EN_descender","","",null,null],[17,"KEY_Cyrillic_en_descender","","",null,null],[17,"KEY_Cyrillic_U_straight","","",null,null],[17,"KEY_Cyrillic_u_straight","","",null,null],[17,"KEY_Cyrillic_U_straight_bar","","",null,null],[17,"KEY_Cyrillic_u_straight_bar","","",null,null],[17,"KEY_Cyrillic_HA_descender","","",null,null],[17,"KEY_Cyrillic_ha_descender","","",null,null],[17,"KEY_Cyrillic_CHE_descender","","",null,null],[17,"KEY_Cyrillic_che_descender","","",null,null],[17,"KEY_Cyrillic_CHE_vertstroke","","",null,null],[17,"KEY_Cyrillic_che_vertstroke","","",null,null],[17,"KEY_Cyrillic_SHHA","","",null,null],[17,"KEY_Cyrillic_shha","","",null,null],[17,"KEY_Cyrillic_SCHWA","","",null,null],[17,"KEY_Cyrillic_schwa","","",null,null],[17,"KEY_Cyrillic_I_macron","","",null,null],[17,"KEY_Cyrillic_i_macron","","",null,null],[17,"KEY_Cyrillic_O_bar","","",null,null],[17,"KEY_Cyrillic_o_bar","","",null,null],[17,"KEY_Cyrillic_U_macron","","",null,null],[17,"KEY_Cyrillic_u_macron","","",null,null],[17,"KEY_Serbian_dje","","",null,null],[17,"KEY_Macedonia_gje","","",null,null],[17,"KEY_Cyrillic_io","","",null,null],[17,"KEY_Ukrainian_ie","","",null,null],[17,"KEY_Ukranian_je","","",null,null],[17,"KEY_Macedonia_dse","","",null,null],[17,"KEY_Ukrainian_i","","",null,null],[17,"KEY_Ukranian_i","","",null,null],[17,"KEY_Ukrainian_yi","","",null,null],[17,"KEY_Ukranian_yi","","",null,null],[17,"KEY_Cyrillic_je","","",null,null],[17,"KEY_Serbian_je","","",null,null],[17,"KEY_Cyrillic_lje","","",null,null],[17,"KEY_Serbian_lje","","",null,null],[17,"KEY_Cyrillic_nje","","",null,null],[17,"KEY_Serbian_nje","","",null,null],[17,"KEY_Serbian_tshe","","",null,null],[17,"KEY_Macedonia_kje","","",null,null],[17,"KEY_Ukrainian_ghe_with_upturn","","",null,null],[17,"KEY_Byelorussian_shortu","","",null,null],[17,"KEY_Cyrillic_dzhe","","",null,null],[17,"KEY_Serbian_dze","","",null,null],[17,"KEY_numerosign","","",null,null],[17,"KEY_Serbian_DJE","","",null,null],[17,"KEY_Macedonia_GJE","","",null,null],[17,"KEY_Cyrillic_IO","","",null,null],[17,"KEY_Ukrainian_IE","","",null,null],[17,"KEY_Ukranian_JE","","",null,null],[17,"KEY_Macedonia_DSE","","",null,null],[17,"KEY_Ukrainian_I","","",null,null],[17,"KEY_Ukranian_I","","",null,null],[17,"KEY_Ukrainian_YI","","",null,null],[17,"KEY_Ukranian_YI","","",null,null],[17,"KEY_Cyrillic_JE","","",null,null],[17,"KEY_Serbian_JE","","",null,null],[17,"KEY_Cyrillic_LJE","","",null,null],[17,"KEY_Serbian_LJE","","",null,null],[17,"KEY_Cyrillic_NJE","","",null,null],[17,"KEY_Serbian_NJE","","",null,null],[17,"KEY_Serbian_TSHE","","",null,null],[17,"KEY_Macedonia_KJE","","",null,null],[17,"KEY_Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"KEY_Byelorussian_SHORTU","","",null,null],[17,"KEY_Cyrillic_DZHE","","",null,null],[17,"KEY_Serbian_DZE","","",null,null],[17,"KEY_Cyrillic_yu","","",null,null],[17,"KEY_Cyrillic_a","","",null,null],[17,"KEY_Cyrillic_be","","",null,null],[17,"KEY_Cyrillic_tse","","",null,null],[17,"KEY_Cyrillic_de","","",null,null],[17,"KEY_Cyrillic_ie","","",null,null],[17,"KEY_Cyrillic_ef","","",null,null],[17,"KEY_Cyrillic_ghe","","",null,null],[17,"KEY_Cyrillic_ha","","",null,null],[17,"KEY_Cyrillic_i","","",null,null],[17,"KEY_Cyrillic_shorti","","",null,null],[17,"KEY_Cyrillic_ka","","",null,null],[17,"KEY_Cyrillic_el","","",null,null],[17,"KEY_Cyrillic_em","","",null,null],[17,"KEY_Cyrillic_en","","",null,null],[17,"KEY_Cyrillic_o","","",null,null],[17,"KEY_Cyrillic_pe","","",null,null],[17,"KEY_Cyrillic_ya","","",null,null],[17,"KEY_Cyrillic_er","","",null,null],[17,"KEY_Cyrillic_es","","",null,null],[17,"KEY_Cyrillic_te","","",null,null],[17,"KEY_Cyrillic_u","","",null,null],[17,"KEY_Cyrillic_zhe","","",null,null],[17,"KEY_Cyrillic_ve","","",null,null],[17,"KEY_Cyrillic_softsign","","",null,null],[17,"KEY_Cyrillic_yeru","","",null,null],[17,"KEY_Cyrillic_ze","","",null,null],[17,"KEY_Cyrillic_sha","","",null,null],[17,"KEY_Cyrillic_e","","",null,null],[17,"KEY_Cyrillic_shcha","","",null,null],[17,"KEY_Cyrillic_che","","",null,null],[17,"KEY_Cyrillic_hardsign","","",null,null],[17,"KEY_Cyrillic_YU","","",null,null],[17,"KEY_Cyrillic_A","","",null,null],[17,"KEY_Cyrillic_BE","","",null,null],[17,"KEY_Cyrillic_TSE","","",null,null],[17,"KEY_Cyrillic_DE","","",null,null],[17,"KEY_Cyrillic_IE","","",null,null],[17,"KEY_Cyrillic_EF","","",null,null],[17,"KEY_Cyrillic_GHE","","",null,null],[17,"KEY_Cyrillic_HA","","",null,null],[17,"KEY_Cyrillic_I","","",null,null],[17,"KEY_Cyrillic_SHORTI","","",null,null],[17,"KEY_Cyrillic_KA","","",null,null],[17,"KEY_Cyrillic_EL","","",null,null],[17,"KEY_Cyrillic_EM","","",null,null],[17,"KEY_Cyrillic_EN","","",null,null],[17,"KEY_Cyrillic_O","","",null,null],[17,"KEY_Cyrillic_PE","","",null,null],[17,"KEY_Cyrillic_YA","","",null,null],[17,"KEY_Cyrillic_ER","","",null,null],[17,"KEY_Cyrillic_ES","","",null,null],[17,"KEY_Cyrillic_TE","","",null,null],[17,"KEY_Cyrillic_U","","",null,null],[17,"KEY_Cyrillic_ZHE","","",null,null],[17,"KEY_Cyrillic_VE","","",null,null],[17,"KEY_Cyrillic_SOFTSIGN","","",null,null],[17,"KEY_Cyrillic_YERU","","",null,null],[17,"KEY_Cyrillic_ZE","","",null,null],[17,"KEY_Cyrillic_SHA","","",null,null],[17,"KEY_Cyrillic_E","","",null,null],[17,"KEY_Cyrillic_SHCHA","","",null,null],[17,"KEY_Cyrillic_CHE","","",null,null],[17,"KEY_Cyrillic_HARDSIGN","","",null,null],[17,"KEY_Greek_ALPHAaccent","","",null,null],[17,"KEY_Greek_EPSILONaccent","","",null,null],[17,"KEY_Greek_ETAaccent","","",null,null],[17,"KEY_Greek_IOTAaccent","","",null,null],[17,"KEY_Greek_IOTAdieresis","","",null,null],[17,"KEY_Greek_IOTAdiaeresis","","",null,null],[17,"KEY_Greek_OMICRONaccent","","",null,null],[17,"KEY_Greek_UPSILONaccent","","",null,null],[17,"KEY_Greek_UPSILONdieresis","","",null,null],[17,"KEY_Greek_OMEGAaccent","","",null,null],[17,"KEY_Greek_accentdieresis","","",null,null],[17,"KEY_Greek_horizbar","","",null,null],[17,"KEY_Greek_alphaaccent","","",null,null],[17,"KEY_Greek_epsilonaccent","","",null,null],[17,"KEY_Greek_etaaccent","","",null,null],[17,"KEY_Greek_iotaaccent","","",null,null],[17,"KEY_Greek_iotadieresis","","",null,null],[17,"KEY_Greek_iotaaccentdieresis","","",null,null],[17,"KEY_Greek_omicronaccent","","",null,null],[17,"KEY_Greek_upsilonaccent","","",null,null],[17,"KEY_Greek_upsilondieresis","","",null,null],[17,"KEY_Greek_upsilonaccentdieresis","","",null,null],[17,"KEY_Greek_omegaaccent","","",null,null],[17,"KEY_Greek_ALPHA","","",null,null],[17,"KEY_Greek_BETA","","",null,null],[17,"KEY_Greek_GAMMA","","",null,null],[17,"KEY_Greek_DELTA","","",null,null],[17,"KEY_Greek_EPSILON","","",null,null],[17,"KEY_Greek_ZETA","","",null,null],[17,"KEY_Greek_ETA","","",null,null],[17,"KEY_Greek_THETA","","",null,null],[17,"KEY_Greek_IOTA","","",null,null],[17,"KEY_Greek_KAPPA","","",null,null],[17,"KEY_Greek_LAMDA","","",null,null],[17,"KEY_Greek_LAMBDA","","",null,null],[17,"KEY_Greek_MU","","",null,null],[17,"KEY_Greek_NU","","",null,null],[17,"KEY_Greek_XI","","",null,null],[17,"KEY_Greek_OMICRON","","",null,null],[17,"KEY_Greek_PI","","",null,null],[17,"KEY_Greek_RHO","","",null,null],[17,"KEY_Greek_SIGMA","","",null,null],[17,"KEY_Greek_TAU","","",null,null],[17,"KEY_Greek_UPSILON","","",null,null],[17,"KEY_Greek_PHI","","",null,null],[17,"KEY_Greek_CHI","","",null,null],[17,"KEY_Greek_PSI","","",null,null],[17,"KEY_Greek_OMEGA","","",null,null],[17,"KEY_Greek_alpha","","",null,null],[17,"KEY_Greek_beta","","",null,null],[17,"KEY_Greek_gamma","","",null,null],[17,"KEY_Greek_delta","","",null,null],[17,"KEY_Greek_epsilon","","",null,null],[17,"KEY_Greek_zeta","","",null,null],[17,"KEY_Greek_eta","","",null,null],[17,"KEY_Greek_theta","","",null,null],[17,"KEY_Greek_iota","","",null,null],[17,"KEY_Greek_kappa","","",null,null],[17,"KEY_Greek_lamda","","",null,null],[17,"KEY_Greek_lambda","","",null,null],[17,"KEY_Greek_mu","","",null,null],[17,"KEY_Greek_nu","","",null,null],[17,"KEY_Greek_xi","","",null,null],[17,"KEY_Greek_omicron","","",null,null],[17,"KEY_Greek_pi","","",null,null],[17,"KEY_Greek_rho","","",null,null],[17,"KEY_Greek_sigma","","",null,null],[17,"KEY_Greek_finalsmallsigma","","",null,null],[17,"KEY_Greek_tau","","",null,null],[17,"KEY_Greek_upsilon","","",null,null],[17,"KEY_Greek_phi","","",null,null],[17,"KEY_Greek_chi","","",null,null],[17,"KEY_Greek_psi","","",null,null],[17,"KEY_Greek_omega","","",null,null],[17,"KEY_Greek_switch","","",null,null],[17,"KEY_leftradical","","",null,null],[17,"KEY_topleftradical","","",null,null],[17,"KEY_horizconnector","","",null,null],[17,"KEY_topintegral","","",null,null],[17,"KEY_botintegral","","",null,null],[17,"KEY_vertconnector","","",null,null],[17,"KEY_topleftsqbracket","","",null,null],[17,"KEY_botleftsqbracket","","",null,null],[17,"KEY_toprightsqbracket","","",null,null],[17,"KEY_botrightsqbracket","","",null,null],[17,"KEY_topleftparens","","",null,null],[17,"KEY_botleftparens","","",null,null],[17,"KEY_toprightparens","","",null,null],[17,"KEY_botrightparens","","",null,null],[17,"KEY_leftmiddlecurlybrace","","",null,null],[17,"KEY_rightmiddlecurlybrace","","",null,null],[17,"KEY_topleftsummation","","",null,null],[17,"KEY_botleftsummation","","",null,null],[17,"KEY_topvertsummationconnector","","",null,null],[17,"KEY_botvertsummationconnector","","",null,null],[17,"KEY_toprightsummation","","",null,null],[17,"KEY_botrightsummation","","",null,null],[17,"KEY_rightmiddlesummation","","",null,null],[17,"KEY_lessthanequal","","",null,null],[17,"KEY_notequal","","",null,null],[17,"KEY_greaterthanequal","","",null,null],[17,"KEY_integral","","",null,null],[17,"KEY_therefore","","",null,null],[17,"KEY_variation","","",null,null],[17,"KEY_infinity","","",null,null],[17,"KEY_nabla","","",null,null],[17,"KEY_approximate","","",null,null],[17,"KEY_similarequal","","",null,null],[17,"KEY_ifonlyif","","",null,null],[17,"KEY_implies","","",null,null],[17,"KEY_identical","","",null,null],[17,"KEY_radical","","",null,null],[17,"KEY_includedin","","",null,null],[17,"KEY_includes","","",null,null],[17,"KEY_intersection","","",null,null],[17,"KEY_union","","",null,null],[17,"KEY_logicaland","","",null,null],[17,"KEY_logicalor","","",null,null],[17,"KEY_partialderivative","","",null,null],[17,"KEY_function","","",null,null],[17,"KEY_leftarrow","","",null,null],[17,"KEY_uparrow","","",null,null],[17,"KEY_rightarrow","","",null,null],[17,"KEY_downarrow","","",null,null],[17,"KEY_blank","","",null,null],[17,"KEY_soliddiamond","","",null,null],[17,"KEY_checkerboard","","",null,null],[17,"KEY_ht","","",null,null],[17,"KEY_ff","","",null,null],[17,"KEY_cr","","",null,null],[17,"KEY_lf","","",null,null],[17,"KEY_nl","","",null,null],[17,"KEY_vt","","",null,null],[17,"KEY_lowrightcorner","","",null,null],[17,"KEY_uprightcorner","","",null,null],[17,"KEY_upleftcorner","","",null,null],[17,"KEY_lowleftcorner","","",null,null],[17,"KEY_crossinglines","","",null,null],[17,"KEY_horizlinescan1","","",null,null],[17,"KEY_horizlinescan3","","",null,null],[17,"KEY_horizlinescan5","","",null,null],[17,"KEY_horizlinescan7","","",null,null],[17,"KEY_horizlinescan9","","",null,null],[17,"KEY_leftt","","",null,null],[17,"KEY_rightt","","",null,null],[17,"KEY_bott","","",null,null],[17,"KEY_topt","","",null,null],[17,"KEY_vertbar","","",null,null],[17,"KEY_emspace","","",null,null],[17,"KEY_enspace","","",null,null],[17,"KEY_em3space","","",null,null],[17,"KEY_em4space","","",null,null],[17,"KEY_digitspace","","",null,null],[17,"KEY_punctspace","","",null,null],[17,"KEY_thinspace","","",null,null],[17,"KEY_hairspace","","",null,null],[17,"KEY_emdash","","",null,null],[17,"KEY_endash","","",null,null],[17,"KEY_signifblank","","",null,null],[17,"KEY_ellipsis","","",null,null],[17,"KEY_doubbaselinedot","","",null,null],[17,"KEY_onethird","","",null,null],[17,"KEY_twothirds","","",null,null],[17,"KEY_onefifth","","",null,null],[17,"KEY_twofifths","","",null,null],[17,"KEY_threefifths","","",null,null],[17,"KEY_fourfifths","","",null,null],[17,"KEY_onesixth","","",null,null],[17,"KEY_fivesixths","","",null,null],[17,"KEY_careof","","",null,null],[17,"KEY_figdash","","",null,null],[17,"KEY_leftanglebracket","","",null,null],[17,"KEY_decimalpoint","","",null,null],[17,"KEY_rightanglebracket","","",null,null],[17,"KEY_marker","","",null,null],[17,"KEY_oneeighth","","",null,null],[17,"KEY_threeeighths","","",null,null],[17,"KEY_fiveeighths","","",null,null],[17,"KEY_seveneighths","","",null,null],[17,"KEY_trademark","","",null,null],[17,"KEY_signaturemark","","",null,null],[17,"KEY_trademarkincircle","","",null,null],[17,"KEY_leftopentriangle","","",null,null],[17,"KEY_rightopentriangle","","",null,null],[17,"KEY_emopencircle","","",null,null],[17,"KEY_emopenrectangle","","",null,null],[17,"KEY_leftsinglequotemark","","",null,null],[17,"KEY_rightsinglequotemark","","",null,null],[17,"KEY_leftdoublequotemark","","",null,null],[17,"KEY_rightdoublequotemark","","",null,null],[17,"KEY_prescription","","",null,null],[17,"KEY_permille","","",null,null],[17,"KEY_minutes","","",null,null],[17,"KEY_seconds","","",null,null],[17,"KEY_latincross","","",null,null],[17,"KEY_hexagram","","",null,null],[17,"KEY_filledrectbullet","","",null,null],[17,"KEY_filledlefttribullet","","",null,null],[17,"KEY_filledrighttribullet","","",null,null],[17,"KEY_emfilledcircle","","",null,null],[17,"KEY_emfilledrect","","",null,null],[17,"KEY_enopencircbullet","","",null,null],[17,"KEY_enopensquarebullet","","",null,null],[17,"KEY_openrectbullet","","",null,null],[17,"KEY_opentribulletup","","",null,null],[17,"KEY_opentribulletdown","","",null,null],[17,"KEY_openstar","","",null,null],[17,"KEY_enfilledcircbullet","","",null,null],[17,"KEY_enfilledsqbullet","","",null,null],[17,"KEY_filledtribulletup","","",null,null],[17,"KEY_filledtribulletdown","","",null,null],[17,"KEY_leftpointer","","",null,null],[17,"KEY_rightpointer","","",null,null],[17,"KEY_club","","",null,null],[17,"KEY_diamond","","",null,null],[17,"KEY_heart","","",null,null],[17,"KEY_maltesecross","","",null,null],[17,"KEY_dagger","","",null,null],[17,"KEY_doubledagger","","",null,null],[17,"KEY_checkmark","","",null,null],[17,"KEY_ballotcross","","",null,null],[17,"KEY_musicalsharp","","",null,null],[17,"KEY_musicalflat","","",null,null],[17,"KEY_malesymbol","","",null,null],[17,"KEY_femalesymbol","","",null,null],[17,"KEY_telephone","","",null,null],[17,"KEY_telephonerecorder","","",null,null],[17,"KEY_phonographcopyright","","",null,null],[17,"KEY_caret","","",null,null],[17,"KEY_singlelowquotemark","","",null,null],[17,"KEY_doublelowquotemark","","",null,null],[17,"KEY_cursor","","",null,null],[17,"KEY_leftcaret","","",null,null],[17,"KEY_rightcaret","","",null,null],[17,"KEY_downcaret","","",null,null],[17,"KEY_upcaret","","",null,null],[17,"KEY_overbar","","",null,null],[17,"KEY_downtack","","",null,null],[17,"KEY_upshoe","","",null,null],[17,"KEY_downstile","","",null,null],[17,"KEY_underbar","","",null,null],[17,"KEY_jot","","",null,null],[17,"KEY_quad","","",null,null],[17,"KEY_uptack","","",null,null],[17,"KEY_circle","","",null,null],[17,"KEY_upstile","","",null,null],[17,"KEY_downshoe","","",null,null],[17,"KEY_rightshoe","","",null,null],[17,"KEY_leftshoe","","",null,null],[17,"KEY_lefttack","","",null,null],[17,"KEY_righttack","","",null,null],[17,"KEY_hebrew_doublelowline","","",null,null],[17,"KEY_hebrew_aleph","","",null,null],[17,"KEY_hebrew_bet","","",null,null],[17,"KEY_hebrew_beth","","",null,null],[17,"KEY_hebrew_gimel","","",null,null],[17,"KEY_hebrew_gimmel","","",null,null],[17,"KEY_hebrew_dalet","","",null,null],[17,"KEY_hebrew_daleth","","",null,null],[17,"KEY_hebrew_he","","",null,null],[17,"KEY_hebrew_waw","","",null,null],[17,"KEY_hebrew_zain","","",null,null],[17,"KEY_hebrew_zayin","","",null,null],[17,"KEY_hebrew_chet","","",null,null],[17,"KEY_hebrew_het","","",null,null],[17,"KEY_hebrew_tet","","",null,null],[17,"KEY_hebrew_teth","","",null,null],[17,"KEY_hebrew_yod","","",null,null],[17,"KEY_hebrew_finalkaph","","",null,null],[17,"KEY_hebrew_kaph","","",null,null],[17,"KEY_hebrew_lamed","","",null,null],[17,"KEY_hebrew_finalmem","","",null,null],[17,"KEY_hebrew_mem","","",null,null],[17,"KEY_hebrew_finalnun","","",null,null],[17,"KEY_hebrew_nun","","",null,null],[17,"KEY_hebrew_samech","","",null,null],[17,"KEY_hebrew_samekh","","",null,null],[17,"KEY_hebrew_ayin","","",null,null],[17,"KEY_hebrew_finalpe","","",null,null],[17,"KEY_hebrew_pe","","",null,null],[17,"KEY_hebrew_finalzade","","",null,null],[17,"KEY_hebrew_finalzadi","","",null,null],[17,"KEY_hebrew_zade","","",null,null],[17,"KEY_hebrew_zadi","","",null,null],[17,"KEY_hebrew_qoph","","",null,null],[17,"KEY_hebrew_kuf","","",null,null],[17,"KEY_hebrew_resh","","",null,null],[17,"KEY_hebrew_shin","","",null,null],[17,"KEY_hebrew_taw","","",null,null],[17,"KEY_hebrew_taf","","",null,null],[17,"KEY_Hebrew_switch","","",null,null],[17,"KEY_Thai_kokai","","",null,null],[17,"KEY_Thai_khokhai","","",null,null],[17,"KEY_Thai_khokhuat","","",null,null],[17,"KEY_Thai_khokhwai","","",null,null],[17,"KEY_Thai_khokhon","","",null,null],[17,"KEY_Thai_khorakhang","","",null,null],[17,"KEY_Thai_ngongu","","",null,null],[17,"KEY_Thai_chochan","","",null,null],[17,"KEY_Thai_choching","","",null,null],[17,"KEY_Thai_chochang","","",null,null],[17,"KEY_Thai_soso","","",null,null],[17,"KEY_Thai_chochoe","","",null,null],[17,"KEY_Thai_yoying","","",null,null],[17,"KEY_Thai_dochada","","",null,null],[17,"KEY_Thai_topatak","","",null,null],[17,"KEY_Thai_thothan","","",null,null],[17,"KEY_Thai_thonangmontho","","",null,null],[17,"KEY_Thai_thophuthao","","",null,null],[17,"KEY_Thai_nonen","","",null,null],[17,"KEY_Thai_dodek","","",null,null],[17,"KEY_Thai_totao","","",null,null],[17,"KEY_Thai_thothung","","",null,null],[17,"KEY_Thai_thothahan","","",null,null],[17,"KEY_Thai_thothong","","",null,null],[17,"KEY_Thai_nonu","","",null,null],[17,"KEY_Thai_bobaimai","","",null,null],[17,"KEY_Thai_popla","","",null,null],[17,"KEY_Thai_phophung","","",null,null],[17,"KEY_Thai_fofa","","",null,null],[17,"KEY_Thai_phophan","","",null,null],[17,"KEY_Thai_fofan","","",null,null],[17,"KEY_Thai_phosamphao","","",null,null],[17,"KEY_Thai_moma","","",null,null],[17,"KEY_Thai_yoyak","","",null,null],[17,"KEY_Thai_rorua","","",null,null],[17,"KEY_Thai_ru","","",null,null],[17,"KEY_Thai_loling","","",null,null],[17,"KEY_Thai_lu","","",null,null],[17,"KEY_Thai_wowaen","","",null,null],[17,"KEY_Thai_sosala","","",null,null],[17,"KEY_Thai_sorusi","","",null,null],[17,"KEY_Thai_sosua","","",null,null],[17,"KEY_Thai_hohip","","",null,null],[17,"KEY_Thai_lochula","","",null,null],[17,"KEY_Thai_oang","","",null,null],[17,"KEY_Thai_honokhuk","","",null,null],[17,"KEY_Thai_paiyannoi","","",null,null],[17,"KEY_Thai_saraa","","",null,null],[17,"KEY_Thai_maihanakat","","",null,null],[17,"KEY_Thai_saraaa","","",null,null],[17,"KEY_Thai_saraam","","",null,null],[17,"KEY_Thai_sarai","","",null,null],[17,"KEY_Thai_saraii","","",null,null],[17,"KEY_Thai_saraue","","",null,null],[17,"KEY_Thai_sarauee","","",null,null],[17,"KEY_Thai_sarau","","",null,null],[17,"KEY_Thai_sarauu","","",null,null],[17,"KEY_Thai_phinthu","","",null,null],[17,"KEY_Thai_maihanakat_maitho","","",null,null],[17,"KEY_Thai_baht","","",null,null],[17,"KEY_Thai_sarae","","",null,null],[17,"KEY_Thai_saraae","","",null,null],[17,"KEY_Thai_sarao","","",null,null],[17,"KEY_Thai_saraaimaimuan","","",null,null],[17,"KEY_Thai_saraaimaimalai","","",null,null],[17,"KEY_Thai_lakkhangyao","","",null,null],[17,"KEY_Thai_maiyamok","","",null,null],[17,"KEY_Thai_maitaikhu","","",null,null],[17,"KEY_Thai_maiek","","",null,null],[17,"KEY_Thai_maitho","","",null,null],[17,"KEY_Thai_maitri","","",null,null],[17,"KEY_Thai_maichattawa","","",null,null],[17,"KEY_Thai_thanthakhat","","",null,null],[17,"KEY_Thai_nikhahit","","",null,null],[17,"KEY_Thai_leksun","","",null,null],[17,"KEY_Thai_leknung","","",null,null],[17,"KEY_Thai_leksong","","",null,null],[17,"KEY_Thai_leksam","","",null,null],[17,"KEY_Thai_leksi","","",null,null],[17,"KEY_Thai_lekha","","",null,null],[17,"KEY_Thai_lekhok","","",null,null],[17,"KEY_Thai_lekchet","","",null,null],[17,"KEY_Thai_lekpaet","","",null,null],[17,"KEY_Thai_lekkao","","",null,null],[17,"KEY_Hangul","","",null,null],[17,"KEY_Hangul_Start","","",null,null],[17,"KEY_Hangul_End","","",null,null],[17,"KEY_Hangul_Hanja","","",null,null],[17,"KEY_Hangul_Jamo","","",null,null],[17,"KEY_Hangul_Romaja","","",null,null],[17,"KEY_Hangul_Codeinput","","",null,null],[17,"KEY_Hangul_Jeonja","","",null,null],[17,"KEY_Hangul_Banja","","",null,null],[17,"KEY_Hangul_PreHanja","","",null,null],[17,"KEY_Hangul_PostHanja","","",null,null],[17,"KEY_Hangul_SingleCandidate","","",null,null],[17,"KEY_Hangul_MultipleCandidate","","",null,null],[17,"KEY_Hangul_PreviousCandidate","","",null,null],[17,"KEY_Hangul_Special","","",null,null],[17,"KEY_Hangul_switch","","",null,null],[17,"KEY_Hangul_Kiyeog","","",null,null],[17,"KEY_Hangul_SsangKiyeog","","",null,null],[17,"KEY_Hangul_KiyeogSios","","",null,null],[17,"KEY_Hangul_Nieun","","",null,null],[17,"KEY_Hangul_NieunJieuj","","",null,null],[17,"KEY_Hangul_NieunHieuh","","",null,null],[17,"KEY_Hangul_Dikeud","","",null,null],[17,"KEY_Hangul_SsangDikeud","","",null,null],[17,"KEY_Hangul_Rieul","","",null,null],[17,"KEY_Hangul_RieulKiyeog","","",null,null],[17,"KEY_Hangul_RieulMieum","","",null,null],[17,"KEY_Hangul_RieulPieub","","",null,null],[17,"KEY_Hangul_RieulSios","","",null,null],[17,"KEY_Hangul_RieulTieut","","",null,null],[17,"KEY_Hangul_RieulPhieuf","","",null,null],[17,"KEY_Hangul_RieulHieuh","","",null,null],[17,"KEY_Hangul_Mieum","","",null,null],[17,"KEY_Hangul_Pieub","","",null,null],[17,"KEY_Hangul_SsangPieub","","",null,null],[17,"KEY_Hangul_PieubSios","","",null,null],[17,"KEY_Hangul_Sios","","",null,null],[17,"KEY_Hangul_SsangSios","","",null,null],[17,"KEY_Hangul_Ieung","","",null,null],[17,"KEY_Hangul_Jieuj","","",null,null],[17,"KEY_Hangul_SsangJieuj","","",null,null],[17,"KEY_Hangul_Cieuc","","",null,null],[17,"KEY_Hangul_Khieuq","","",null,null],[17,"KEY_Hangul_Tieut","","",null,null],[17,"KEY_Hangul_Phieuf","","",null,null],[17,"KEY_Hangul_Hieuh","","",null,null],[17,"KEY_Hangul_A","","",null,null],[17,"KEY_Hangul_AE","","",null,null],[17,"KEY_Hangul_YA","","",null,null],[17,"KEY_Hangul_YAE","","",null,null],[17,"KEY_Hangul_EO","","",null,null],[17,"KEY_Hangul_E","","",null,null],[17,"KEY_Hangul_YEO","","",null,null],[17,"KEY_Hangul_YE","","",null,null],[17,"KEY_Hangul_O","","",null,null],[17,"KEY_Hangul_WA","","",null,null],[17,"KEY_Hangul_WAE","","",null,null],[17,"KEY_Hangul_OE","","",null,null],[17,"KEY_Hangul_YO","","",null,null],[17,"KEY_Hangul_U","","",null,null],[17,"KEY_Hangul_WEO","","",null,null],[17,"KEY_Hangul_WE","","",null,null],[17,"KEY_Hangul_WI","","",null,null],[17,"KEY_Hangul_YU","","",null,null],[17,"KEY_Hangul_EU","","",null,null],[17,"KEY_Hangul_YI","","",null,null],[17,"KEY_Hangul_I","","",null,null],[17,"KEY_Hangul_J_Kiyeog","","",null,null],[17,"KEY_Hangul_J_SsangKiyeog","","",null,null],[17,"KEY_Hangul_J_KiyeogSios","","",null,null],[17,"KEY_Hangul_J_Nieun","","",null,null],[17,"KEY_Hangul_J_NieunJieuj","","",null,null],[17,"KEY_Hangul_J_NieunHieuh","","",null,null],[17,"KEY_Hangul_J_Dikeud","","",null,null],[17,"KEY_Hangul_J_Rieul","","",null,null],[17,"KEY_Hangul_J_RieulKiyeog","","",null,null],[17,"KEY_Hangul_J_RieulMieum","","",null,null],[17,"KEY_Hangul_J_RieulPieub","","",null,null],[17,"KEY_Hangul_J_RieulSios","","",null,null],[17,"KEY_Hangul_J_RieulTieut","","",null,null],[17,"KEY_Hangul_J_RieulPhieuf","","",null,null],[17,"KEY_Hangul_J_RieulHieuh","","",null,null],[17,"KEY_Hangul_J_Mieum","","",null,null],[17,"KEY_Hangul_J_Pieub","","",null,null],[17,"KEY_Hangul_J_PieubSios","","",null,null],[17,"KEY_Hangul_J_Sios","","",null,null],[17,"KEY_Hangul_J_SsangSios","","",null,null],[17,"KEY_Hangul_J_Ieung","","",null,null],[17,"KEY_Hangul_J_Jieuj","","",null,null],[17,"KEY_Hangul_J_Cieuc","","",null,null],[17,"KEY_Hangul_J_Khieuq","","",null,null],[17,"KEY_Hangul_J_Tieut","","",null,null],[17,"KEY_Hangul_J_Phieuf","","",null,null],[17,"KEY_Hangul_J_Hieuh","","",null,null],[17,"KEY_Hangul_RieulYeorinHieuh","","",null,null],[17,"KEY_Hangul_SunkyeongeumMieum","","",null,null],[17,"KEY_Hangul_SunkyeongeumPieub","","",null,null],[17,"KEY_Hangul_PanSios","","",null,null],[17,"KEY_Hangul_KkogjiDalrinIeung","","",null,null],[17,"KEY_Hangul_SunkyeongeumPhieuf","","",null,null],[17,"KEY_Hangul_YeorinHieuh","","",null,null],[17,"KEY_Hangul_AraeA","","",null,null],[17,"KEY_Hangul_AraeAE","","",null,null],[17,"KEY_Hangul_J_PanSios","","",null,null],[17,"KEY_Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"KEY_Hangul_J_YeorinHieuh","","",null,null],[17,"KEY_Korean_Won","","",null,null],[17,"KEY_Armenian_ligature_ew","","",null,null],[17,"KEY_Armenian_full_stop","","",null,null],[17,"KEY_Armenian_verjaket","","",null,null],[17,"KEY_Armenian_separation_mark","","",null,null],[17,"KEY_Armenian_but","","",null,null],[17,"KEY_Armenian_hyphen","","",null,null],[17,"KEY_Armenian_yentamna","","",null,null],[17,"KEY_Armenian_exclam","","",null,null],[17,"KEY_Armenian_amanak","","",null,null],[17,"KEY_Armenian_accent","","",null,null],[17,"KEY_Armenian_shesht","","",null,null],[17,"KEY_Armenian_question","","",null,null],[17,"KEY_Armenian_paruyk","","",null,null],[17,"KEY_Armenian_AYB","","",null,null],[17,"KEY_Armenian_ayb","","",null,null],[17,"KEY_Armenian_BEN","","",null,null],[17,"KEY_Armenian_ben","","",null,null],[17,"KEY_Armenian_GIM","","",null,null],[17,"KEY_Armenian_gim","","",null,null],[17,"KEY_Armenian_DA","","",null,null],[17,"KEY_Armenian_da","","",null,null],[17,"KEY_Armenian_YECH","","",null,null],[17,"KEY_Armenian_yech","","",null,null],[17,"KEY_Armenian_ZA","","",null,null],[17,"KEY_Armenian_za","","",null,null],[17,"KEY_Armenian_E","","",null,null],[17,"KEY_Armenian_e","","",null,null],[17,"KEY_Armenian_AT","","",null,null],[17,"KEY_Armenian_at","","",null,null],[17,"KEY_Armenian_TO","","",null,null],[17,"KEY_Armenian_to","","",null,null],[17,"KEY_Armenian_ZHE","","",null,null],[17,"KEY_Armenian_zhe","","",null,null],[17,"KEY_Armenian_INI","","",null,null],[17,"KEY_Armenian_ini","","",null,null],[17,"KEY_Armenian_LYUN","","",null,null],[17,"KEY_Armenian_lyun","","",null,null],[17,"KEY_Armenian_KHE","","",null,null],[17,"KEY_Armenian_khe","","",null,null],[17,"KEY_Armenian_TSA","","",null,null],[17,"KEY_Armenian_tsa","","",null,null],[17,"KEY_Armenian_KEN","","",null,null],[17,"KEY_Armenian_ken","","",null,null],[17,"KEY_Armenian_HO","","",null,null],[17,"KEY_Armenian_ho","","",null,null],[17,"KEY_Armenian_DZA","","",null,null],[17,"KEY_Armenian_dza","","",null,null],[17,"KEY_Armenian_GHAT","","",null,null],[17,"KEY_Armenian_ghat","","",null,null],[17,"KEY_Armenian_TCHE","","",null,null],[17,"KEY_Armenian_tche","","",null,null],[17,"KEY_Armenian_MEN","","",null,null],[17,"KEY_Armenian_men","","",null,null],[17,"KEY_Armenian_HI","","",null,null],[17,"KEY_Armenian_hi","","",null,null],[17,"KEY_Armenian_NU","","",null,null],[17,"KEY_Armenian_nu","","",null,null],[17,"KEY_Armenian_SHA","","",null,null],[17,"KEY_Armenian_sha","","",null,null],[17,"KEY_Armenian_VO","","",null,null],[17,"KEY_Armenian_vo","","",null,null],[17,"KEY_Armenian_CHA","","",null,null],[17,"KEY_Armenian_cha","","",null,null],[17,"KEY_Armenian_PE","","",null,null],[17,"KEY_Armenian_pe","","",null,null],[17,"KEY_Armenian_JE","","",null,null],[17,"KEY_Armenian_je","","",null,null],[17,"KEY_Armenian_RA","","",null,null],[17,"KEY_Armenian_ra","","",null,null],[17,"KEY_Armenian_SE","","",null,null],[17,"KEY_Armenian_se","","",null,null],[17,"KEY_Armenian_VEV","","",null,null],[17,"KEY_Armenian_vev","","",null,null],[17,"KEY_Armenian_TYUN","","",null,null],[17,"KEY_Armenian_tyun","","",null,null],[17,"KEY_Armenian_RE","","",null,null],[17,"KEY_Armenian_re","","",null,null],[17,"KEY_Armenian_TSO","","",null,null],[17,"KEY_Armenian_tso","","",null,null],[17,"KEY_Armenian_VYUN","","",null,null],[17,"KEY_Armenian_vyun","","",null,null],[17,"KEY_Armenian_PYUR","","",null,null],[17,"KEY_Armenian_pyur","","",null,null],[17,"KEY_Armenian_KE","","",null,null],[17,"KEY_Armenian_ke","","",null,null],[17,"KEY_Armenian_O","","",null,null],[17,"KEY_Armenian_o","","",null,null],[17,"KEY_Armenian_FE","","",null,null],[17,"KEY_Armenian_fe","","",null,null],[17,"KEY_Armenian_apostrophe","","",null,null],[17,"KEY_Georgian_an","","",null,null],[17,"KEY_Georgian_ban","","",null,null],[17,"KEY_Georgian_gan","","",null,null],[17,"KEY_Georgian_don","","",null,null],[17,"KEY_Georgian_en","","",null,null],[17,"KEY_Georgian_vin","","",null,null],[17,"KEY_Georgian_zen","","",null,null],[17,"KEY_Georgian_tan","","",null,null],[17,"KEY_Georgian_in","","",null,null],[17,"KEY_Georgian_kan","","",null,null],[17,"KEY_Georgian_las","","",null,null],[17,"KEY_Georgian_man","","",null,null],[17,"KEY_Georgian_nar","","",null,null],[17,"KEY_Georgian_on","","",null,null],[17,"KEY_Georgian_par","","",null,null],[17,"KEY_Georgian_zhar","","",null,null],[17,"KEY_Georgian_rae","","",null,null],[17,"KEY_Georgian_san","","",null,null],[17,"KEY_Georgian_tar","","",null,null],[17,"KEY_Georgian_un","","",null,null],[17,"KEY_Georgian_phar","","",null,null],[17,"KEY_Georgian_khar","","",null,null],[17,"KEY_Georgian_ghan","","",null,null],[17,"KEY_Georgian_qar","","",null,null],[17,"KEY_Georgian_shin","","",null,null],[17,"KEY_Georgian_chin","","",null,null],[17,"KEY_Georgian_can","","",null,null],[17,"KEY_Georgian_jil","","",null,null],[17,"KEY_Georgian_cil","","",null,null],[17,"KEY_Georgian_char","","",null,null],[17,"KEY_Georgian_xan","","",null,null],[17,"KEY_Georgian_jhan","","",null,null],[17,"KEY_Georgian_hae","","",null,null],[17,"KEY_Georgian_he","","",null,null],[17,"KEY_Georgian_hie","","",null,null],[17,"KEY_Georgian_we","","",null,null],[17,"KEY_Georgian_har","","",null,null],[17,"KEY_Georgian_hoe","","",null,null],[17,"KEY_Georgian_fi","","",null,null],[17,"KEY_Xabovedot","","",null,null],[17,"KEY_Ibreve","","",null,null],[17,"KEY_Zstroke","","",null,null],[17,"KEY_Gcaron","","",null,null],[17,"KEY_Ocaron","","",null,null],[17,"KEY_Obarred","","",null,null],[17,"KEY_xabovedot","","",null,null],[17,"KEY_ibreve","","",null,null],[17,"KEY_zstroke","","",null,null],[17,"KEY_gcaron","","",null,null],[17,"KEY_ocaron","","",null,null],[17,"KEY_obarred","","",null,null],[17,"KEY_SCHWA","","",null,null],[17,"KEY_schwa","","",null,null],[17,"KEY_EZH","","",null,null],[17,"KEY_ezh","","",null,null],[17,"KEY_Lbelowdot","","",null,null],[17,"KEY_lbelowdot","","",null,null],[17,"KEY_Abelowdot","","",null,null],[17,"KEY_abelowdot","","",null,null],[17,"KEY_Ahook","","",null,null],[17,"KEY_ahook","","",null,null],[17,"KEY_Acircumflexacute","","",null,null],[17,"KEY_acircumflexacute","","",null,null],[17,"KEY_Acircumflexgrave","","",null,null],[17,"KEY_acircumflexgrave","","",null,null],[17,"KEY_Acircumflexhook","","",null,null],[17,"KEY_acircumflexhook","","",null,null],[17,"KEY_Acircumflextilde","","",null,null],[17,"KEY_acircumflextilde","","",null,null],[17,"KEY_Acircumflexbelowdot","","",null,null],[17,"KEY_acircumflexbelowdot","","",null,null],[17,"KEY_Abreveacute","","",null,null],[17,"KEY_abreveacute","","",null,null],[17,"KEY_Abrevegrave","","",null,null],[17,"KEY_abrevegrave","","",null,null],[17,"KEY_Abrevehook","","",null,null],[17,"KEY_abrevehook","","",null,null],[17,"KEY_Abrevetilde","","",null,null],[17,"KEY_abrevetilde","","",null,null],[17,"KEY_Abrevebelowdot","","",null,null],[17,"KEY_abrevebelowdot","","",null,null],[17,"KEY_Ebelowdot","","",null,null],[17,"KEY_ebelowdot","","",null,null],[17,"KEY_Ehook","","",null,null],[17,"KEY_ehook","","",null,null],[17,"KEY_Etilde","","",null,null],[17,"KEY_etilde","","",null,null],[17,"KEY_Ecircumflexacute","","",null,null],[17,"KEY_ecircumflexacute","","",null,null],[17,"KEY_Ecircumflexgrave","","",null,null],[17,"KEY_ecircumflexgrave","","",null,null],[17,"KEY_Ecircumflexhook","","",null,null],[17,"KEY_ecircumflexhook","","",null,null],[17,"KEY_Ecircumflextilde","","",null,null],[17,"KEY_ecircumflextilde","","",null,null],[17,"KEY_Ecircumflexbelowdot","","",null,null],[17,"KEY_ecircumflexbelowdot","","",null,null],[17,"KEY_Ihook","","",null,null],[17,"KEY_ihook","","",null,null],[17,"KEY_Ibelowdot","","",null,null],[17,"KEY_ibelowdot","","",null,null],[17,"KEY_Obelowdot","","",null,null],[17,"KEY_obelowdot","","",null,null],[17,"KEY_Ohook","","",null,null],[17,"KEY_ohook","","",null,null],[17,"KEY_Ocircumflexacute","","",null,null],[17,"KEY_ocircumflexacute","","",null,null],[17,"KEY_Ocircumflexgrave","","",null,null],[17,"KEY_ocircumflexgrave","","",null,null],[17,"KEY_Ocircumflexhook","","",null,null],[17,"KEY_ocircumflexhook","","",null,null],[17,"KEY_Ocircumflextilde","","",null,null],[17,"KEY_ocircumflextilde","","",null,null],[17,"KEY_Ocircumflexbelowdot","","",null,null],[17,"KEY_ocircumflexbelowdot","","",null,null],[17,"KEY_Ohornacute","","",null,null],[17,"KEY_ohornacute","","",null,null],[17,"KEY_Ohorngrave","","",null,null],[17,"KEY_ohorngrave","","",null,null],[17,"KEY_Ohornhook","","",null,null],[17,"KEY_ohornhook","","",null,null],[17,"KEY_Ohorntilde","","",null,null],[17,"KEY_ohorntilde","","",null,null],[17,"KEY_Ohornbelowdot","","",null,null],[17,"KEY_ohornbelowdot","","",null,null],[17,"KEY_Ubelowdot","","",null,null],[17,"KEY_ubelowdot","","",null,null],[17,"KEY_Uhook","","",null,null],[17,"KEY_uhook","","",null,null],[17,"KEY_Uhornacute","","",null,null],[17,"KEY_uhornacute","","",null,null],[17,"KEY_Uhorngrave","","",null,null],[17,"KEY_uhorngrave","","",null,null],[17,"KEY_Uhornhook","","",null,null],[17,"KEY_uhornhook","","",null,null],[17,"KEY_Uhorntilde","","",null,null],[17,"KEY_uhorntilde","","",null,null],[17,"KEY_Uhornbelowdot","","",null,null],[17,"KEY_uhornbelowdot","","",null,null],[17,"KEY_Ybelowdot","","",null,null],[17,"KEY_ybelowdot","","",null,null],[17,"KEY_Yhook","","",null,null],[17,"KEY_yhook","","",null,null],[17,"KEY_Ytilde","","",null,null],[17,"KEY_ytilde","","",null,null],[17,"KEY_Ohorn","","",null,null],[17,"KEY_ohorn","","",null,null],[17,"KEY_Uhorn","","",null,null],[17,"KEY_uhorn","","",null,null],[17,"KEY_EcuSign","","",null,null],[17,"KEY_ColonSign","","",null,null],[17,"KEY_CruzeiroSign","","",null,null],[17,"KEY_FFrancSign","","",null,null],[17,"KEY_LiraSign","","",null,null],[17,"KEY_MillSign","","",null,null],[17,"KEY_NairaSign","","",null,null],[17,"KEY_PesetaSign","","",null,null],[17,"KEY_RupeeSign","","",null,null],[17,"KEY_WonSign","","",null,null],[17,"KEY_NewSheqelSign","","",null,null],[17,"KEY_DongSign","","",null,null],[17,"KEY_EuroSign","","",null,null],[17,"KEY_zerosuperior","","",null,null],[17,"KEY_foursuperior","","",null,null],[17,"KEY_fivesuperior","","",null,null],[17,"KEY_sixsuperior","","",null,null],[17,"KEY_sevensuperior","","",null,null],[17,"KEY_eightsuperior","","",null,null],[17,"KEY_ninesuperior","","",null,null],[17,"KEY_zerosubscript","","",null,null],[17,"KEY_onesubscript","","",null,null],[17,"KEY_twosubscript","","",null,null],[17,"KEY_threesubscript","","",null,null],[17,"KEY_foursubscript","","",null,null],[17,"KEY_fivesubscript","","",null,null],[17,"KEY_sixsubscript","","",null,null],[17,"KEY_sevensubscript","","",null,null],[17,"KEY_eightsubscript","","",null,null],[17,"KEY_ninesubscript","","",null,null],[17,"KEY_partdifferential","","",null,null],[17,"KEY_emptyset","","",null,null],[17,"KEY_elementof","","",null,null],[17,"KEY_notelementof","","",null,null],[17,"KEY_containsas","","",null,null],[17,"KEY_squareroot","","",null,null],[17,"KEY_cuberoot","","",null,null],[17,"KEY_fourthroot","","",null,null],[17,"KEY_dintegral","","",null,null],[17,"KEY_tintegral","","",null,null],[17,"KEY_because","","",null,null],[17,"KEY_approxeq","","",null,null],[17,"KEY_notapproxeq","","",null,null],[17,"KEY_notidentical","","",null,null],[17,"KEY_stricteq","","",null,null],[17,"KEY_braille_dot_1","","",null,null],[17,"KEY_braille_dot_2","","",null,null],[17,"KEY_braille_dot_3","","",null,null],[17,"KEY_braille_dot_4","","",null,null],[17,"KEY_braille_dot_5","","",null,null],[17,"KEY_braille_dot_6","","",null,null],[17,"KEY_braille_dot_7","","",null,null],[17,"KEY_braille_dot_8","","",null,null],[17,"KEY_braille_dot_9","","",null,null],[17,"KEY_braille_dot_10","","",null,null],[17,"KEY_braille_blank","","",null,null],[17,"KEY_braille_dots_1","","",null,null],[17,"KEY_braille_dots_2","","",null,null],[17,"KEY_braille_dots_12","","",null,null],[17,"KEY_braille_dots_3","","",null,null],[17,"KEY_braille_dots_13","","",null,null],[17,"KEY_braille_dots_23","","",null,null],[17,"KEY_braille_dots_123","","",null,null],[17,"KEY_braille_dots_4","","",null,null],[17,"KEY_braille_dots_14","","",null,null],[17,"KEY_braille_dots_24","","",null,null],[17,"KEY_braille_dots_124","","",null,null],[17,"KEY_braille_dots_34","","",null,null],[17,"KEY_braille_dots_134","","",null,null],[17,"KEY_braille_dots_234","","",null,null],[17,"KEY_braille_dots_1234","","",null,null],[17,"KEY_braille_dots_5","","",null,null],[17,"KEY_braille_dots_15","","",null,null],[17,"KEY_braille_dots_25","","",null,null],[17,"KEY_braille_dots_125","","",null,null],[17,"KEY_braille_dots_35","","",null,null],[17,"KEY_braille_dots_135","","",null,null],[17,"KEY_braille_dots_235","","",null,null],[17,"KEY_braille_dots_1235","","",null,null],[17,"KEY_braille_dots_45","","",null,null],[17,"KEY_braille_dots_145","","",null,null],[17,"KEY_braille_dots_245","","",null,null],[17,"KEY_braille_dots_1245","","",null,null],[17,"KEY_braille_dots_345","","",null,null],[17,"KEY_braille_dots_1345","","",null,null],[17,"KEY_braille_dots_2345","","",null,null],[17,"KEY_braille_dots_12345","","",null,null],[17,"KEY_braille_dots_6","","",null,null],[17,"KEY_braille_dots_16","","",null,null],[17,"KEY_braille_dots_26","","",null,null],[17,"KEY_braille_dots_126","","",null,null],[17,"KEY_braille_dots_36","","",null,null],[17,"KEY_braille_dots_136","","",null,null],[17,"KEY_braille_dots_236","","",null,null],[17,"KEY_braille_dots_1236","","",null,null],[17,"KEY_braille_dots_46","","",null,null],[17,"KEY_braille_dots_146","","",null,null],[17,"KEY_braille_dots_246","","",null,null],[17,"KEY_braille_dots_1246","","",null,null],[17,"KEY_braille_dots_346","","",null,null],[17,"KEY_braille_dots_1346","","",null,null],[17,"KEY_braille_dots_2346","","",null,null],[17,"KEY_braille_dots_12346","","",null,null],[17,"KEY_braille_dots_56","","",null,null],[17,"KEY_braille_dots_156","","",null,null],[17,"KEY_braille_dots_256","","",null,null],[17,"KEY_braille_dots_1256","","",null,null],[17,"KEY_braille_dots_356","","",null,null],[17,"KEY_braille_dots_1356","","",null,null],[17,"KEY_braille_dots_2356","","",null,null],[17,"KEY_braille_dots_12356","","",null,null],[17,"KEY_braille_dots_456","","",null,null],[17,"KEY_braille_dots_1456","","",null,null],[17,"KEY_braille_dots_2456","","",null,null],[17,"KEY_braille_dots_12456","","",null,null],[17,"KEY_braille_dots_3456","","",null,null],[17,"KEY_braille_dots_13456","","",null,null],[17,"KEY_braille_dots_23456","","",null,null],[17,"KEY_braille_dots_123456","","",null,null],[17,"KEY_braille_dots_7","","",null,null],[17,"KEY_braille_dots_17","","",null,null],[17,"KEY_braille_dots_27","","",null,null],[17,"KEY_braille_dots_127","","",null,null],[17,"KEY_braille_dots_37","","",null,null],[17,"KEY_braille_dots_137","","",null,null],[17,"KEY_braille_dots_237","","",null,null],[17,"KEY_braille_dots_1237","","",null,null],[17,"KEY_braille_dots_47","","",null,null],[17,"KEY_braille_dots_147","","",null,null],[17,"KEY_braille_dots_247","","",null,null],[17,"KEY_braille_dots_1247","","",null,null],[17,"KEY_braille_dots_347","","",null,null],[17,"KEY_braille_dots_1347","","",null,null],[17,"KEY_braille_dots_2347","","",null,null],[17,"KEY_braille_dots_12347","","",null,null],[17,"KEY_braille_dots_57","","",null,null],[17,"KEY_braille_dots_157","","",null,null],[17,"KEY_braille_dots_257","","",null,null],[17,"KEY_braille_dots_1257","","",null,null],[17,"KEY_braille_dots_357","","",null,null],[17,"KEY_braille_dots_1357","","",null,null],[17,"KEY_braille_dots_2357","","",null,null],[17,"KEY_braille_dots_12357","","",null,null],[17,"KEY_braille_dots_457","","",null,null],[17,"KEY_braille_dots_1457","","",null,null],[17,"KEY_braille_dots_2457","","",null,null],[17,"KEY_braille_dots_12457","","",null,null],[17,"KEY_braille_dots_3457","","",null,null],[17,"KEY_braille_dots_13457","","",null,null],[17,"KEY_braille_dots_23457","","",null,null],[17,"KEY_braille_dots_123457","","",null,null],[17,"KEY_braille_dots_67","","",null,null],[17,"KEY_braille_dots_167","","",null,null],[17,"KEY_braille_dots_267","","",null,null],[17,"KEY_braille_dots_1267","","",null,null],[17,"KEY_braille_dots_367","","",null,null],[17,"KEY_braille_dots_1367","","",null,null],[17,"KEY_braille_dots_2367","","",null,null],[17,"KEY_braille_dots_12367","","",null,null],[17,"KEY_braille_dots_467","","",null,null],[17,"KEY_braille_dots_1467","","",null,null],[17,"KEY_braille_dots_2467","","",null,null],[17,"KEY_braille_dots_12467","","",null,null],[17,"KEY_braille_dots_3467","","",null,null],[17,"KEY_braille_dots_13467","","",null,null],[17,"KEY_braille_dots_23467","","",null,null],[17,"KEY_braille_dots_123467","","",null,null],[17,"KEY_braille_dots_567","","",null,null],[17,"KEY_braille_dots_1567","","",null,null],[17,"KEY_braille_dots_2567","","",null,null],[17,"KEY_braille_dots_12567","","",null,null],[17,"KEY_braille_dots_3567","","",null,null],[17,"KEY_braille_dots_13567","","",null,null],[17,"KEY_braille_dots_23567","","",null,null],[17,"KEY_braille_dots_123567","","",null,null],[17,"KEY_braille_dots_4567","","",null,null],[17,"KEY_braille_dots_14567","","",null,null],[17,"KEY_braille_dots_24567","","",null,null],[17,"KEY_braille_dots_124567","","",null,null],[17,"KEY_braille_dots_34567","","",null,null],[17,"KEY_braille_dots_134567","","",null,null],[17,"KEY_braille_dots_234567","","",null,null],[17,"KEY_braille_dots_1234567","","",null,null],[17,"KEY_braille_dots_8","","",null,null],[17,"KEY_braille_dots_18","","",null,null],[17,"KEY_braille_dots_28","","",null,null],[17,"KEY_braille_dots_128","","",null,null],[17,"KEY_braille_dots_38","","",null,null],[17,"KEY_braille_dots_138","","",null,null],[17,"KEY_braille_dots_238","","",null,null],[17,"KEY_braille_dots_1238","","",null,null],[17,"KEY_braille_dots_48","","",null,null],[17,"KEY_braille_dots_148","","",null,null],[17,"KEY_braille_dots_248","","",null,null],[17,"KEY_braille_dots_1248","","",null,null],[17,"KEY_braille_dots_348","","",null,null],[17,"KEY_braille_dots_1348","","",null,null],[17,"KEY_braille_dots_2348","","",null,null],[17,"KEY_braille_dots_12348","","",null,null],[17,"KEY_braille_dots_58","","",null,null],[17,"KEY_braille_dots_158","","",null,null],[17,"KEY_braille_dots_258","","",null,null],[17,"KEY_braille_dots_1258","","",null,null],[17,"KEY_braille_dots_358","","",null,null],[17,"KEY_braille_dots_1358","","",null,null],[17,"KEY_braille_dots_2358","","",null,null],[17,"KEY_braille_dots_12358","","",null,null],[17,"KEY_braille_dots_458","","",null,null],[17,"KEY_braille_dots_1458","","",null,null],[17,"KEY_braille_dots_2458","","",null,null],[17,"KEY_braille_dots_12458","","",null,null],[17,"KEY_braille_dots_3458","","",null,null],[17,"KEY_braille_dots_13458","","",null,null],[17,"KEY_braille_dots_23458","","",null,null],[17,"KEY_braille_dots_123458","","",null,null],[17,"KEY_braille_dots_68","","",null,null],[17,"KEY_braille_dots_168","","",null,null],[17,"KEY_braille_dots_268","","",null,null],[17,"KEY_braille_dots_1268","","",null,null],[17,"KEY_braille_dots_368","","",null,null],[17,"KEY_braille_dots_1368","","",null,null],[17,"KEY_braille_dots_2368","","",null,null],[17,"KEY_braille_dots_12368","","",null,null],[17,"KEY_braille_dots_468","","",null,null],[17,"KEY_braille_dots_1468","","",null,null],[17,"KEY_braille_dots_2468","","",null,null],[17,"KEY_braille_dots_12468","","",null,null],[17,"KEY_braille_dots_3468","","",null,null],[17,"KEY_braille_dots_13468","","",null,null],[17,"KEY_braille_dots_23468","","",null,null],[17,"KEY_braille_dots_123468","","",null,null],[17,"KEY_braille_dots_568","","",null,null],[17,"KEY_braille_dots_1568","","",null,null],[17,"KEY_braille_dots_2568","","",null,null],[17,"KEY_braille_dots_12568","","",null,null],[17,"KEY_braille_dots_3568","","",null,null],[17,"KEY_braille_dots_13568","","",null,null],[17,"KEY_braille_dots_23568","","",null,null],[17,"KEY_braille_dots_123568","","",null,null],[17,"KEY_braille_dots_4568","","",null,null],[17,"KEY_braille_dots_14568","","",null,null],[17,"KEY_braille_dots_24568","","",null,null],[17,"KEY_braille_dots_124568","","",null,null],[17,"KEY_braille_dots_34568","","",null,null],[17,"KEY_braille_dots_134568","","",null,null],[17,"KEY_braille_dots_234568","","",null,null],[17,"KEY_braille_dots_1234568","","",null,null],[17,"KEY_braille_dots_78","","",null,null],[17,"KEY_braille_dots_178","","",null,null],[17,"KEY_braille_dots_278","","",null,null],[17,"KEY_braille_dots_1278","","",null,null],[17,"KEY_braille_dots_378","","",null,null],[17,"KEY_braille_dots_1378","","",null,null],[17,"KEY_braille_dots_2378","","",null,null],[17,"KEY_braille_dots_12378","","",null,null],[17,"KEY_braille_dots_478","","",null,null],[17,"KEY_braille_dots_1478","","",null,null],[17,"KEY_braille_dots_2478","","",null,null],[17,"KEY_braille_dots_12478","","",null,null],[17,"KEY_braille_dots_3478","","",null,null],[17,"KEY_braille_dots_13478","","",null,null],[17,"KEY_braille_dots_23478","","",null,null],[17,"KEY_braille_dots_123478","","",null,null],[17,"KEY_braille_dots_578","","",null,null],[17,"KEY_braille_dots_1578","","",null,null],[17,"KEY_braille_dots_2578","","",null,null],[17,"KEY_braille_dots_12578","","",null,null],[17,"KEY_braille_dots_3578","","",null,null],[17,"KEY_braille_dots_13578","","",null,null],[17,"KEY_braille_dots_23578","","",null,null],[17,"KEY_braille_dots_123578","","",null,null],[17,"KEY_braille_dots_4578","","",null,null],[17,"KEY_braille_dots_14578","","",null,null],[17,"KEY_braille_dots_24578","","",null,null],[17,"KEY_braille_dots_124578","","",null,null],[17,"KEY_braille_dots_34578","","",null,null],[17,"KEY_braille_dots_134578","","",null,null],[17,"KEY_braille_dots_234578","","",null,null],[17,"KEY_braille_dots_1234578","","",null,null],[17,"KEY_braille_dots_678","","",null,null],[17,"KEY_braille_dots_1678","","",null,null],[17,"KEY_braille_dots_2678","","",null,null],[17,"KEY_braille_dots_12678","","",null,null],[17,"KEY_braille_dots_3678","","",null,null],[17,"KEY_braille_dots_13678","","",null,null],[17,"KEY_braille_dots_23678","","",null,null],[17,"KEY_braille_dots_123678","","",null,null],[17,"KEY_braille_dots_4678","","",null,null],[17,"KEY_braille_dots_14678","","",null,null],[17,"KEY_braille_dots_24678","","",null,null],[17,"KEY_braille_dots_124678","","",null,null],[17,"KEY_braille_dots_34678","","",null,null],[17,"KEY_braille_dots_134678","","",null,null],[17,"KEY_braille_dots_234678","","",null,null],[17,"KEY_braille_dots_1234678","","",null,null],[17,"KEY_braille_dots_5678","","",null,null],[17,"KEY_braille_dots_15678","","",null,null],[17,"KEY_braille_dots_25678","","",null,null],[17,"KEY_braille_dots_125678","","",null,null],[17,"KEY_braille_dots_35678","","",null,null],[17,"KEY_braille_dots_135678","","",null,null],[17,"KEY_braille_dots_235678","","",null,null],[17,"KEY_braille_dots_1235678","","",null,null],[17,"KEY_braille_dots_45678","","",null,null],[17,"KEY_braille_dots_145678","","",null,null],[17,"KEY_braille_dots_245678","","",null,null],[17,"KEY_braille_dots_1245678","","",null,null],[17,"KEY_braille_dots_345678","","",null,null],[17,"KEY_braille_dots_1345678","","",null,null],[17,"KEY_braille_dots_2345678","","",null,null],[17,"KEY_braille_dots_12345678","","",null,null],[17,"KEY_Sinh_ng","","",null,null],[17,"KEY_Sinh_h2","","",null,null],[17,"KEY_Sinh_a","","",null,null],[17,"KEY_Sinh_aa","","",null,null],[17,"KEY_Sinh_ae","","",null,null],[17,"KEY_Sinh_aee","","",null,null],[17,"KEY_Sinh_i","","",null,null],[17,"KEY_Sinh_ii","","",null,null],[17,"KEY_Sinh_u","","",null,null],[17,"KEY_Sinh_uu","","",null,null],[17,"KEY_Sinh_ri","","",null,null],[17,"KEY_Sinh_rii","","",null,null],[17,"KEY_Sinh_lu","","",null,null],[17,"KEY_Sinh_luu","","",null,null],[17,"KEY_Sinh_e","","",null,null],[17,"KEY_Sinh_ee","","",null,null],[17,"KEY_Sinh_ai","","",null,null],[17,"KEY_Sinh_o","","",null,null],[17,"KEY_Sinh_oo","","",null,null],[17,"KEY_Sinh_au","","",null,null],[17,"KEY_Sinh_ka","","",null,null],[17,"KEY_Sinh_kha","","",null,null],[17,"KEY_Sinh_ga","","",null,null],[17,"KEY_Sinh_gha","","",null,null],[17,"KEY_Sinh_ng2","","",null,null],[17,"KEY_Sinh_nga","","",null,null],[17,"KEY_Sinh_ca","","",null,null],[17,"KEY_Sinh_cha","","",null,null],[17,"KEY_Sinh_ja","","",null,null],[17,"KEY_Sinh_jha","","",null,null],[17,"KEY_Sinh_nya","","",null,null],[17,"KEY_Sinh_jnya","","",null,null],[17,"KEY_Sinh_nja","","",null,null],[17,"KEY_Sinh_tta","","",null,null],[17,"KEY_Sinh_ttha","","",null,null],[17,"KEY_Sinh_dda","","",null,null],[17,"KEY_Sinh_ddha","","",null,null],[17,"KEY_Sinh_nna","","",null,null],[17,"KEY_Sinh_ndda","","",null,null],[17,"KEY_Sinh_tha","","",null,null],[17,"KEY_Sinh_thha","","",null,null],[17,"KEY_Sinh_dha","","",null,null],[17,"KEY_Sinh_dhha","","",null,null],[17,"KEY_Sinh_na","","",null,null],[17,"KEY_Sinh_ndha","","",null,null],[17,"KEY_Sinh_pa","","",null,null],[17,"KEY_Sinh_pha","","",null,null],[17,"KEY_Sinh_ba","","",null,null],[17,"KEY_Sinh_bha","","",null,null],[17,"KEY_Sinh_ma","","",null,null],[17,"KEY_Sinh_mba","","",null,null],[17,"KEY_Sinh_ya","","",null,null],[17,"KEY_Sinh_ra","","",null,null],[17,"KEY_Sinh_la","","",null,null],[17,"KEY_Sinh_va","","",null,null],[17,"KEY_Sinh_sha","","",null,null],[17,"KEY_Sinh_ssha","","",null,null],[17,"KEY_Sinh_sa","","",null,null],[17,"KEY_Sinh_ha","","",null,null],[17,"KEY_Sinh_lla","","",null,null],[17,"KEY_Sinh_fa","","",null,null],[17,"KEY_Sinh_al","","",null,null],[17,"KEY_Sinh_aa2","","",null,null],[17,"KEY_Sinh_ae2","","",null,null],[17,"KEY_Sinh_aee2","","",null,null],[17,"KEY_Sinh_i2","","",null,null],[17,"KEY_Sinh_ii2","","",null,null],[17,"KEY_Sinh_u2","","",null,null],[17,"KEY_Sinh_uu2","","",null,null],[17,"KEY_Sinh_ru2","","",null,null],[17,"KEY_Sinh_e2","","",null,null],[17,"KEY_Sinh_ee2","","",null,null],[17,"KEY_Sinh_ai2","","",null,null],[17,"KEY_Sinh_o2","","",null,null],[17,"KEY_Sinh_oo2","","",null,null],[17,"KEY_Sinh_au2","","",null,null],[17,"KEY_Sinh_lu2","","",null,null],[17,"KEY_Sinh_ruu2","","",null,null],[17,"KEY_Sinh_luu2","","",null,null],[17,"KEY_Sinh_kunddaliya","","",null,null],[17,"KEY_XF86ModeLock","","",null,null],[17,"KEY_XF86MonBrightnessUp","","",null,null],[17,"KEY_XF86MonBrightnessDown","","",null,null],[17,"KEY_XF86KbdLightOnOff","","",null,null],[17,"KEY_XF86KbdBrightnessUp","","",null,null],[17,"KEY_XF86KbdBrightnessDown","","",null,null],[17,"KEY_XF86Standby","","",null,null],[17,"KEY_XF86AudioLowerVolume","","",null,null],[17,"KEY_XF86AudioMute","","",null,null],[17,"KEY_XF86AudioRaiseVolume","","",null,null],[17,"KEY_XF86AudioPlay","","",null,null],[17,"KEY_XF86AudioStop","","",null,null],[17,"KEY_XF86AudioPrev","","",null,null],[17,"KEY_XF86AudioNext","","",null,null],[17,"KEY_XF86HomePage","","",null,null],[17,"KEY_XF86Mail","","",null,null],[17,"KEY_XF86Start","","",null,null],[17,"KEY_XF86Search","","",null,null],[17,"KEY_XF86AudioRecord","","",null,null],[17,"KEY_XF86Calculator","","",null,null],[17,"KEY_XF86Memo","","",null,null],[17,"KEY_XF86ToDoList","","",null,null],[17,"KEY_XF86Calendar","","",null,null],[17,"KEY_XF86PowerDown","","",null,null],[17,"KEY_XF86ContrastAdjust","","",null,null],[17,"KEY_XF86RockerUp","","",null,null],[17,"KEY_XF86RockerDown","","",null,null],[17,"KEY_XF86RockerEnter","","",null,null],[17,"KEY_XF86Back","","",null,null],[17,"KEY_XF86Forward","","",null,null],[17,"KEY_XF86Stop","","",null,null],[17,"KEY_XF86Refresh","","",null,null],[17,"KEY_XF86PowerOff","","",null,null],[17,"KEY_XF86WakeUp","","",null,null],[17,"KEY_XF86Eject","","",null,null],[17,"KEY_XF86ScreenSaver","","",null,null],[17,"KEY_XF86WWW","","",null,null],[17,"KEY_XF86Sleep","","",null,null],[17,"KEY_XF86Favorites","","",null,null],[17,"KEY_XF86AudioPause","","",null,null],[17,"KEY_XF86AudioMedia","","",null,null],[17,"KEY_XF86MyComputer","","",null,null],[17,"KEY_XF86VendorHome","","",null,null],[17,"KEY_XF86LightBulb","","",null,null],[17,"KEY_XF86Shop","","",null,null],[17,"KEY_XF86History","","",null,null],[17,"KEY_XF86OpenURL","","",null,null],[17,"KEY_XF86AddFavorite","","",null,null],[17,"KEY_XF86HotLinks","","",null,null],[17,"KEY_XF86BrightnessAdjust","","",null,null],[17,"KEY_XF86Finance","","",null,null],[17,"KEY_XF86Community","","",null,null],[17,"KEY_XF86AudioRewind","","",null,null],[17,"KEY_XF86BackForward","","",null,null],[17,"KEY_XF86Launch0","","",null,null],[17,"KEY_XF86Launch1","","",null,null],[17,"KEY_XF86Launch2","","",null,null],[17,"KEY_XF86Launch3","","",null,null],[17,"KEY_XF86Launch4","","",null,null],[17,"KEY_XF86Launch5","","",null,null],[17,"KEY_XF86Launch6","","",null,null],[17,"KEY_XF86Launch7","","",null,null],[17,"KEY_XF86Launch8","","",null,null],[17,"KEY_XF86Launch9","","",null,null],[17,"KEY_XF86LaunchA","","",null,null],[17,"KEY_XF86LaunchB","","",null,null],[17,"KEY_XF86LaunchC","","",null,null],[17,"KEY_XF86LaunchD","","",null,null],[17,"KEY_XF86LaunchE","","",null,null],[17,"KEY_XF86LaunchF","","",null,null],[17,"KEY_XF86ApplicationLeft","","",null,null],[17,"KEY_XF86ApplicationRight","","",null,null],[17,"KEY_XF86Book","","",null,null],[17,"KEY_XF86CD","","",null,null],[17,"KEY_XF86Calculater","","",null,null],[17,"KEY_XF86Clear","","",null,null],[17,"KEY_XF86Close","","",null,null],[17,"KEY_XF86Copy","","",null,null],[17,"KEY_XF86Cut","","",null,null],[17,"KEY_XF86Display","","",null,null],[17,"KEY_XF86DOS","","",null,null],[17,"KEY_XF86Documents","","",null,null],[17,"KEY_XF86Excel","","",null,null],[17,"KEY_XF86Explorer","","",null,null],[17,"KEY_XF86Game","","",null,null],[17,"KEY_XF86Go","","",null,null],[17,"KEY_XF86iTouch","","",null,null],[17,"KEY_XF86LogOff","","",null,null],[17,"KEY_XF86Market","","",null,null],[17,"KEY_XF86Meeting","","",null,null],[17,"KEY_XF86MenuKB","","",null,null],[17,"KEY_XF86MenuPB","","",null,null],[17,"KEY_XF86MySites","","",null,null],[17,"KEY_XF86New","","",null,null],[17,"KEY_XF86News","","",null,null],[17,"KEY_XF86OfficeHome","","",null,null],[17,"KEY_XF86Open","","",null,null],[17,"KEY_XF86Option","","",null,null],[17,"KEY_XF86Paste","","",null,null],[17,"KEY_XF86Phone","","",null,null],[17,"KEY_XF86Q","","",null,null],[17,"KEY_XF86Reply","","",null,null],[17,"KEY_XF86Reload","","",null,null],[17,"KEY_XF86RotateWindows","","",null,null],[17,"KEY_XF86RotationPB","","",null,null],[17,"KEY_XF86RotationKB","","",null,null],[17,"KEY_XF86Save","","",null,null],[17,"KEY_XF86ScrollUp","","",null,null],[17,"KEY_XF86ScrollDown","","",null,null],[17,"KEY_XF86ScrollClick","","",null,null],[17,"KEY_XF86Send","","",null,null],[17,"KEY_XF86Spell","","",null,null],[17,"KEY_XF86SplitScreen","","",null,null],[17,"KEY_XF86Support","","",null,null],[17,"KEY_XF86TaskPane","","",null,null],[17,"KEY_XF86Terminal","","",null,null],[17,"KEY_XF86Tools","","",null,null],[17,"KEY_XF86Travel","","",null,null],[17,"KEY_XF86UserPB","","",null,null],[17,"KEY_XF86User1KB","","",null,null],[17,"KEY_XF86User2KB","","",null,null],[17,"KEY_XF86Video","","",null,null],[17,"KEY_XF86WheelButton","","",null,null],[17,"KEY_XF86Word","","",null,null],[17,"KEY_XF86Xfer","","",null,null],[17,"KEY_XF86ZoomIn","","",null,null],[17,"KEY_XF86ZoomOut","","",null,null],[17,"KEY_XF86Away","","",null,null],[17,"KEY_XF86Messenger","","",null,null],[17,"KEY_XF86WebCam","","",null,null],[17,"KEY_XF86MailForward","","",null,null],[17,"KEY_XF86Pictures","","",null,null],[17,"KEY_XF86Music","","",null,null],[17,"KEY_XF86Battery","","",null,null],[17,"KEY_XF86Bluetooth","","",null,null],[17,"KEY_XF86WLAN","","",null,null],[17,"KEY_XF86UWB","","",null,null],[17,"KEY_XF86AudioForward","","",null,null],[17,"KEY_XF86AudioRepeat","","",null,null],[17,"KEY_XF86AudioRandomPlay","","",null,null],[17,"KEY_XF86Subtitle","","",null,null],[17,"KEY_XF86AudioCycleTrack","","",null,null],[17,"KEY_XF86CycleAngle","","",null,null],[17,"KEY_XF86FrameBack","","",null,null],[17,"KEY_XF86FrameForward","","",null,null],[17,"KEY_XF86Time","","",null,null],[17,"KEY_XF86Select","","",null,null],[17,"KEY_XF86View","","",null,null],[17,"KEY_XF86TopMenu","","",null,null],[17,"KEY_XF86Red","","",null,null],[17,"KEY_XF86Green","","",null,null],[17,"KEY_XF86Yellow","","",null,null],[17,"KEY_XF86Blue","","",null,null],[17,"KEY_XF86Suspend","","",null,null],[17,"KEY_XF86Hibernate","","",null,null],[17,"KEY_XF86TouchpadToggle","","",null,null],[17,"KEY_XF86TouchpadOn","","",null,null],[17,"KEY_XF86TouchpadOff","","",null,null],[17,"KEY_XF86AudioMicMute","","",null,null],[17,"KEY_XF86Switch_VT_1","","",null,null],[17,"KEY_XF86Switch_VT_2","","",null,null],[17,"KEY_XF86Switch_VT_3","","",null,null],[17,"KEY_XF86Switch_VT_4","","",null,null],[17,"KEY_XF86Switch_VT_5","","",null,null],[17,"KEY_XF86Switch_VT_6","","",null,null],[17,"KEY_XF86Switch_VT_7","","",null,null],[17,"KEY_XF86Switch_VT_8","","",null,null],[17,"KEY_XF86Switch_VT_9","","",null,null],[17,"KEY_XF86Switch_VT_10","","",null,null],[17,"KEY_XF86Switch_VT_11","","",null,null],[17,"KEY_XF86Switch_VT_12","","",null,null],[17,"KEY_XF86Ungrab","","",null,null],[17,"KEY_XF86ClearGrab","","",null,null],[17,"KEY_XF86Next_VMode","","",null,null],[17,"KEY_XF86Prev_VMode","","",null,null],[17,"KEY_XF86LogWindowTree","","",null,null],[17,"KEY_XF86LogGrabInfo","","",null,null],[17,"KEY_SunFA_Grave","","",null,null],[17,"KEY_SunFA_Circum","","",null,null],[17,"KEY_SunFA_Tilde","","",null,null],[17,"KEY_SunFA_Acute","","",null,null],[17,"KEY_SunFA_Diaeresis","","",null,null],[17,"KEY_SunFA_Cedilla","","",null,null],[17,"KEY_SunF36","","",null,null],[17,"KEY_SunF37","","",null,null],[17,"KEY_SunSys_Req","","",null,null],[17,"KEY_SunPrint_Screen","","",null,null],[17,"KEY_SunCompose","","",null,null],[17,"KEY_SunAltGraph","","",null,null],[17,"KEY_SunPageUp","","",null,null],[17,"KEY_SunPageDown","","",null,null],[17,"KEY_SunUndo","","",null,null],[17,"KEY_SunAgain","","",null,null],[17,"KEY_SunFind","","",null,null],[17,"KEY_SunStop","","",null,null],[17,"KEY_SunProps","","",null,null],[17,"KEY_SunFront","","",null,null],[17,"KEY_SunCopy","","",null,null],[17,"KEY_SunOpen","","",null,null],[17,"KEY_SunPaste","","",null,null],[17,"KEY_SunCut","","",null,null],[17,"KEY_SunPowerSwitch","","",null,null],[17,"KEY_SunAudioLowerVolume","","",null,null],[17,"KEY_SunAudioMute","","",null,null],[17,"KEY_SunAudioRaiseVolume","","",null,null],[17,"KEY_SunVideoDegauss","","",null,null],[17,"KEY_SunVideoLowerBrightness","","",null,null],[17,"KEY_SunVideoRaiseBrightness","","",null,null],[17,"KEY_SunPowerSwitchShift","","",null,null],[17,"KEY_Dring_accent","","",null,null],[17,"KEY_Dcircumflex_accent","","",null,null],[17,"KEY_Dcedilla_accent","","",null,null],[17,"KEY_Dacute_accent","","",null,null],[17,"KEY_Dgrave_accent","","",null,null],[17,"KEY_Dtilde","","",null,null],[17,"KEY_Ddiaeresis","","",null,null],[17,"KEY_DRemove","","",null,null],[17,"KEY_hpClearLine","","",null,null],[17,"KEY_hpInsertLine","","",null,null],[17,"KEY_hpDeleteLine","","",null,null],[17,"KEY_hpInsertChar","","",null,null],[17,"KEY_hpDeleteChar","","",null,null],[17,"KEY_hpBackTab","","",null,null],[17,"KEY_hpKP_BackTab","","",null,null],[17,"KEY_hpModelock1","","",null,null],[17,"KEY_hpModelock2","","",null,null],[17,"KEY_hpReset","","",null,null],[17,"KEY_hpSystem","","",null,null],[17,"KEY_hpUser","","",null,null],[17,"KEY_hpmute_acute","","",null,null],[17,"KEY_hpmute_grave","","",null,null],[17,"KEY_hpmute_asciicircum","","",null,null],[17,"KEY_hpmute_diaeresis","","",null,null],[17,"KEY_hpmute_asciitilde","","",null,null],[17,"KEY_hplira","","",null,null],[17,"KEY_hpguilder","","",null,null],[17,"KEY_hpYdiaeresis","","",null,null],[17,"KEY_hpIO","","",null,null],[17,"KEY_hplongminus","","",null,null],[17,"KEY_hpblock","","",null,null],[17,"KEY_osfCopy","","",null,null],[17,"KEY_osfCut","","",null,null],[17,"KEY_osfPaste","","",null,null],[17,"KEY_osfBackTab","","",null,null],[17,"KEY_osfBackSpace","","",null,null],[17,"KEY_osfClear","","",null,null],[17,"KEY_osfEscape","","",null,null],[17,"KEY_osfAddMode","","",null,null],[17,"KEY_osfPrimaryPaste","","",null,null],[17,"KEY_osfQuickPaste","","",null,null],[17,"KEY_osfPageLeft","","",null,null],[17,"KEY_osfPageUp","","",null,null],[17,"KEY_osfPageDown","","",null,null],[17,"KEY_osfPageRight","","",null,null],[17,"KEY_osfActivate","","",null,null],[17,"KEY_osfMenuBar","","",null,null],[17,"KEY_osfLeft","","",null,null],[17,"KEY_osfUp","","",null,null],[17,"KEY_osfRight","","",null,null],[17,"KEY_osfDown","","",null,null],[17,"KEY_osfEndLine","","",null,null],[17,"KEY_osfBeginLine","","",null,null],[17,"KEY_osfEndData","","",null,null],[17,"KEY_osfBeginData","","",null,null],[17,"KEY_osfPrevMenu","","",null,null],[17,"KEY_osfNextMenu","","",null,null],[17,"KEY_osfPrevField","","",null,null],[17,"KEY_osfNextField","","",null,null],[17,"KEY_osfSelect","","",null,null],[17,"KEY_osfInsert","","",null,null],[17,"KEY_osfUndo","","",null,null],[17,"KEY_osfMenu","","",null,null],[17,"KEY_osfCancel","","",null,null],[17,"KEY_osfHelp","","",null,null],[17,"KEY_osfSelectAll","","",null,null],[17,"KEY_osfDeselectAll","","",null,null],[17,"KEY_osfReselect","","",null,null],[17,"KEY_osfExtend","","",null,null],[17,"KEY_osfRestore","","",null,null],[17,"KEY_osfDelete","","",null,null],[17,"KEY_Reset","","",null,null],[17,"KEY_System","","",null,null],[17,"KEY_User","","",null,null],[17,"KEY_ClearLine","","",null,null],[17,"KEY_InsertLine","","",null,null],[17,"KEY_DeleteLine","","",null,null],[17,"KEY_InsertChar","","",null,null],[17,"KEY_DeleteChar","","",null,null],[17,"KEY_BackTab","","",null,null],[17,"KEY_KP_BackTab","","",null,null],[17,"KEY_Ext16bit_L","","",null,null],[17,"KEY_Ext16bit_R","","",null,null],[17,"KEY_mute_acute","","",null,null],[17,"KEY_mute_grave","","",null,null],[17,"KEY_mute_asciicircum","","",null,null],[17,"KEY_mute_diaeresis","","",null,null],[17,"KEY_mute_asciitilde","","",null,null],[17,"KEY_lira","","",null,null],[17,"KEY_guilder","","",null,null],[17,"KEY_IO","","",null,null],[17,"KEY_longminus","","",null,null],[17,"KEY_block","","",null,null],[4,"Key","wlc::input::keyboard","",null,null],[13,"Reserved","","",8,null],[13,"Esc","","",8,null],[13,"_1","","",8,null],[13,"_2","","",8,null],[13,"_3","","",8,null],[13,"_4","","",8,null],[13,"_5","","",8,null],[13,"_6","","",8,null],[13,"_7","","",8,null],[13,"_8","","",8,null],[13,"_9","","",8,null],[13,"_0","","",8,null],[13,"Minus","","",8,null],[13,"Equal","","",8,null],[13,"BackSpace","","",8,null],[13,"Tab","","",8,null],[13,"Q","","",8,null],[13,"W","","",8,null],[13,"E","","",8,null],[13,"R","","",8,null],[13,"T","","",8,null],[13,"Y","","",8,null],[13,"U","","",8,null],[13,"I","","",8,null],[13,"O","","",8,null],[13,"P","","",8,null],[13,"LeftBrace","","",8,null],[13,"RightBrace","","",8,null],[13,"Enter","","",8,null],[13,"LeftControl","","",8,null],[13,"A","","",8,null],[13,"S","","",8,null],[13,"D","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"J","","",8,null],[13,"K","","",8,null],[13,"L","","",8,null],[13,"SemiColon","","",8,null],[13,"Apostrophe","","",8,null],[13,"Grave","","",8,null],[13,"LeftShift","","",8,null],[13,"BackSlash","","",8,null],[13,"Z","","",8,null],[13,"X","","",8,null],[13,"C","","",8,null],[13,"V","","",8,null],[13,"B","","",8,null],[13,"N","","",8,null],[13,"M","","",8,null],[13,"Comma","","",8,null],[13,"Dot","","",8,null],[13,"Slash","","",8,null],[13,"RightShift","","",8,null],[13,"LeftAlt","","",8,null],[13,"Space","","",8,null],[13,"CapsLock","","",8,null],[13,"F1","","",8,null],[13,"F2","","",8,null],[13,"F3","","",8,null],[13,"F4","","",8,null],[13,"F5","","",8,null],[13,"F6","","",8,null],[13,"F7","","",8,null],[13,"F8","","",8,null],[13,"F9","","",8,null],[13,"F10","","",8,null],[13,"NumLock","","",8,null],[13,"ScrollLock","","",8,null],[13,"F11","","",8,null],[13,"F12","","",8,null],[13,"RightControl","","",8,null],[13,"SysRq","","",8,null],[13,"RightAlt","","",8,null],[13,"LineFeed","","",8,null],[13,"Home","","",8,null],[13,"Up","","",8,null],[13,"PageUp","","",8,null],[13,"Left","","",8,null],[13,"Right","","",8,null],[13,"End","","",8,null],[13,"Down","","",8,null],[13,"PageDown","","",8,null],[13,"Insert","","",8,null],[13,"Delete","","",8,null],[13,"LeftMeta","","",8,null],[13,"RightMeta","","",8,null],[13,"ScrollUp","","",8,null],[13,"ScrollDown","","",8,null],[13,"F13","","",8,null],[13,"F14","","",8,null],[13,"F15","","",8,null],[13,"F16","","",8,null],[13,"F17","","",8,null],[13,"F18","","",8,null],[13,"F19","","",8,null],[13,"F20","","",8,null],[13,"F21","","",8,null],[13,"F22","","",8,null],[13,"F23","","",8,null],[13,"F24","","",8,null],[13,"KP7","","",8,null],[13,"KP8","","",8,null],[13,"KP9","","",8,null],[13,"KPMinus","","",8,null],[13,"KP4","","",8,null],[13,"KP5","","",8,null],[13,"KP6","","",8,null],[13,"KPPlus","","",8,null],[13,"KP1","","",8,null],[13,"KP2","","",8,null],[13,"KP3","","",8,null],[13,"KP0","","",8,null],[13,"KPDot","","",8,null],[13,"Zenkakuhankaku","","",8,null],[13,"_102ND","","",8,null],[13,"RO","","",8,null],[13,"Katakana","","",8,null],[13,"Hiragana","","",8,null],[13,"Henkan","","",8,null],[13,"KatakanaHiragana","","",8,null],[13,"Muhenkan","","",8,null],[13,"KPJPComma","","",8,null],[13,"KPEnter","","",8,null],[13,"KPSlash","","",8,null],[13,"Macro","","",8,null],[13,"Mute","","",8,null],[13,"VolumeDown","","",8,null],[13,"VolumeUp","","",8,null],[13,"Power","","",8,null],[13,"KPEqual","","",8,null],[13,"KPPlusMinus","","",8,null],[13,"Pause","","",8,null],[13,"Scale","","",8,null],[13,"KPComma","","",8,null],[13,"Hangeul","","",8,null],[13,"Hanja","","",8,null],[13,"Yen","","",8,null],[13,"Compose","","",8,null],[13,"Stop","","",8,null],[13,"Again","","",8,null],[13,"Props","","",8,null],[13,"Undo","","",8,null],[13,"Front","","",8,null],[13,"Copy","","",8,null],[13,"Open","","",8,null],[13,"Paste","","",8,null],[13,"Find","","",8,null],[13,"Cut","","",8,null],[13,"Help","","",8,null],[13,"Menu","","",8,null],[13,"Calc","","",8,null],[13,"Setup","","",8,null],[13,"Sleep","","",8,null],[13,"Wakeup","","",8,null],[13,"File","","",8,null],[13,"Sendfile","","",8,null],[13,"DeleteFile","","",8,null],[13,"Xfer","","",8,null],[13,"Prog1","","",8,null],[13,"Prog2","","",8,null],[13,"WWW","","",8,null],[13,"MSDos","","",8,null],[13,"ScreenLock","","",8,null],[13,"RotateDisplay","","",8,null],[13,"CycleWindows","","",8,null],[13,"Mail","","",8,null],[13,"Bookmarks","","",8,null],[13,"Computer","","",8,null],[13,"Back","","",8,null],[13,"Forward","","",8,null],[13,"CloseCD","","",8,null],[13,"EjectCD","","",8,null],[13,"EjectCloseCD","","",8,null],[13,"NextSong","","",8,null],[13,"PlayPause","","",8,null],[13,"PreviousSong","","",8,null],[13,"StopCD","","",8,null],[13,"Record","","",8,null],[13,"Rewind","","",8,null],[13,"Phone","","",8,null],[13,"Iso","","",8,null],[13,"Config","","",8,null],[13,"HomePage","","",8,null],[13,"Refresh","","",8,null],[13,"Exit","","",8,null],[13,"Move","","",8,null],[13,"Edit","","",8,null],[13,"KPLeftParen","","",8,null],[13,"KPRightParen","","",8,null],[13,"New","","",8,null],[13,"Redo","","",8,null],[13,"PlayCD","","",8,null],[13,"PauseCD","","",8,null],[13,"Prog3","","",8,null],[13,"Prog4","","",8,null],[13,"Dashboard","","",8,null],[13,"Suspend","","",8,null],[13,"Close","","",8,null],[13,"Play","","",8,null],[13,"FastForward","","",8,null],[13,"BassBoost","","",8,null],[13,"Print","","",8,null],[13,"HP","","",8,null],[13,"Camera","","",8,null],[13,"Sound","","",8,null],[13,"Question","","",8,null],[13,"Email","","",8,null],[13,"Chat","","",8,null],[13,"Search","","",8,null],[13,"Connect","","",8,null],[13,"Finance","","",8,null],[13,"Sport","","",8,null],[13,"Shop","","",8,null],[13,"AltErase","","",8,null],[13,"Cancel","","",8,null],[13,"BrightnessDown","","",8,null],[13,"BrightnessUp","","",8,null],[13,"Media","","",8,null],[13,"SwitchVideoMode","","",8,null],[13,"KBDIllumToggle","","",8,null],[13,"KBDIllumDown","","",8,null],[13,"KBDIllumUp","","",8,null],[13,"Send","","",8,null],[13,"Reply","","",8,null],[13,"ForwardMail","","",8,null],[13,"Save","","",8,null],[13,"Documents","","",8,null],[13,"Battery","","",8,null],[13,"Bluetooth","","",8,null],[13,"Wlan","","",8,null],[13,"Uwb","","",8,null],[13,"Unknown","","",8,null],[13,"VideoNext","","",8,null],[13,"VideoPrev","","",8,null],[13,"BrightnessCycle","","",8,null],[13,"BrightnessAuto","","",8,null],[13,"DisplayOff","","",8,null],[13,"WWan","","",8,null],[13,"RFKill","","",8,null],[13,"MicMute","","",8,null],[5,"xkb_state","","Internal `xkb_state` exposed. You can use it to do more advanced key handling. However you should avoid messing with its state",null,{"inputs":[],"output":{"name":"state"}}],[5,"xkb_keymap","","Internal `xkb_keymap` exposed. You can use it to do more advanced key handling",null,{"inputs":[],"output":{"name":"keymap"}}],[5,"current_keys","","Get currently held keys",null,null],[5,"keysym_for_key","","Utility function to convert raw keycode to keysym. Passed modifiers may transform the key",null,{"inputs":[{"name":"key"},{"name":"modifiers"}],"output":{"name":"keysym"}}],[5,"utf32_for_key","","Utility function to convert raw keycode to Unicode/UTF-32 codepoint. Passed modifiers may transform the key",null,{"inputs":[{"name":"key"},{"name":"modifiers"}],"output":{"name":"u32"}}],[0,"pointer","wlc::input","Pointer related functionality",null,null],[4,"Button","wlc::input::pointer","",null,null],[13,"Left","","",9,null],[13,"Right","","",9,null],[13,"Middle","","",9,null],[13,"Side","","",9,null],[13,"Extra","","",9,null],[13,"Forward","","",9,null],[13,"Back","","",9,null],[13,"Task","","",9,null],[5,"position","","Get current pointer position",null,{"inputs":[],"output":{"name":"point"}}],[5,"set_position","","Set current pointer position",null,{"inputs":[{"name":"point"}],"output":null}],[0,"render","wlc","wlc's Rendering extensions",null,null],[3,"NoPixelFormat","wlc::render","`PixelFormat` of the `NoRenderer`",null,null],[3,"NoTexture","","Texture of the `NoRenderer`",null,null],[3,"NoRenderer","","Headless renderer",null,null],[3,"GLES2Renderer","","OpenGL ES 2 Renderer",null,null],[3,"RenderOutput","","Output with Render Extensions",null,null],[3,"RenderView","","View with Render Extensions",null,null],[4,"RenderInstance","","Wlc's Renderer Types",null,null],[13,"GLES2","","Renderer using GLES2",21,null],[13,"None","","Headless Renderer",21,null],[4,"SurfaceFormat","","Possible Surface formats",null,null],[13,"RGB","","",22,null],[13,"RGBA","","",22,null],[13,"EGL","","",22,null],[13,"Y_UV","","",22,null],[13,"Y_U_V","","",22,null],[13,"Y_XUXV","","",22,null],[13,"None","","",22,null],[4,"GLES2PixelFormat","","Supported PixelFormats of the GLES2Renderer",null,null],[13,"RGBA8888","","",23,null],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_renderer","","Returns currently active renderer on the given output",24,{"inputs":[{"name":"self"}],"output":{"name":"renderinstance"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"view"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"output","","Receive current render-extensions enabled `Output`",25,{"inputs":[{"name":"self"}],"output":{"name":"renderoutput"}}],[6,"GLTexture","","Texture of the `GLES2Renderer` (Raw OpenGL ES 2 Texture)",null,null],[8,"PixelFormat","","Renderer specific pixel format marker",null,null],[8,"Texture","","Renderer specific Texture marker",null,null],[8,"Renderer","","Renderer API",null,null],[16,"PixelFormat","","PixelFormat understood by this Renderer",26,null],[16,"Texture","","Texture understood by this Renderer",26,null],[10,"pixels_write","","Write pixel data with the specific format to output's framebuffer.",26,null],[10,"pixels_read","","Read pixel data from output's framebuffer.",26,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"surfaceformat"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"as_bits","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"gles2pixelformat"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"as_bits","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pixels_write","","",28,null],[11,"pixels_read","","",28,{"inputs":[{"name":"self"},{"name":"nopixelformat"},{"name":"geometry"}],"output":{"name":"vec"}}],[11,"pixels_write","","",29,null],[11,"pixels_read","","",29,{"inputs":[{"name":"self"},{"name":"gles2pixelformat"},{"name":"geometry"}],"output":{"name":"vec"}}],[0,"ViewState","wlc","States a View may hold",null,null],[3,"Flags","wlc::ViewState","Bitmap that may represent multiple states",null,null],[17,"Maximized","","view is maximized",null,null],[17,"Fullscreen","","view is shown in fullscreen",null,null],[17,"Resizing","","view is resizing",null,null],[17,"Moving","","view is moving",null,null],[17,"Activated","","view is active",null,null],[0,"ViewType","wlc","Typical view categories",null,null],[3,"Flags","wlc::ViewType","Bitmap that may represent multiple types",null,null],[17,"OverrideRedirect","","Override redirect (x11)",null,null],[17,"Unmanaged","","Tooltips, DnD's, menus (x11)",null,null],[17,"Splash","","Splash screens (x11)",null,null],[17,"Modal","","Modal windows (x11)",null,null],[17,"Popup","","xdg-shell, wl-shell popups",null,null],[0,"ViewPropertyUpdate","wlc","Updated properties of a view",null,null],[3,"Flags","wlc::ViewPropertyUpdate","Bitmap that may represent multiple updated properties",null,null],[17,"Title","","Title changed. Receive with `view.title()`",null,null],[17,"Class","","Class changed. Receive with `view.class()`",null,null],[17,"AppID","","AppID changed. Receive with `view.app_id()`",null,null],[17,"PID","","PID of belonging process changed. Receive with `view.pid()`",null,null],[0,"ResizeEdge","wlc","Edges for interactive resizing",null,null],[3,"Flags","wlc::ResizeEdge","Bitmap that may represent multiple edges",null,null],[17,"Null","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"Right","","",null,null],[0,"Modifier","wlc","Set of modifiers on a keyboard",null,null],[3,"Flags","wlc::Modifier","Bitmap that may represent multiple modifiers",null,null],[17,"Shift","","Shift Key",null,null],[17,"Caps","","Caps Key",null,null],[17,"Ctrl","","Control Key",null,null],[17,"Alt","","Alternative Function Key",null,null],[17,"Mod2","","Second Modifier",null,null],[17,"Mod3","","Third Modifier",null,null],[17,"Logo","","Logo (Forth) Modifier (Windows/Command Key)",null,null],[17,"Mod5","","Fifth Modifier",null,null],[0,"Led","wlc","Keyboard LEDs",null,null],[3,"Flags","wlc::Led","Bitmap that may represent multiple leds",null,null],[17,"Num","","",null,null],[17,"Caps","","",null,null],[17,"Scroll","","",null,null],[0,"ScrollAxis","wlc","Scroll Axes",null,null],[3,"Flags","wlc::ScrollAxis","Bitmap that may represent multiple axis",null,null],[17,"Vertical","","Vertical Scroll Axis",null,null],[17,"Horizontal","","Horizontal Scroll Axis",null,null],[0,"Visibility","wlc","Visibility Flags Useful to implement workspace functionality or simply hiding views",null,null],[3,"Flags","wlc::Visibility","Bitmap that may represent multiple Slots for Visibility",null,null],[17,"Null","","",null,null],[17,"Slot1","","",null,null],[17,"Slot2","","",null,null],[17,"Slot3","","",null,null],[17,"Slot4","","",null,null],[17,"Slot5","","",null,null],[17,"Slot6","","",null,null],[17,"Slot7","","",null,null],[17,"Slot8","","",null,null],[17,"Slot9","","",null,null],[17,"Slot10","","",null,null],[17,"Slot11","","",null,null],[17,"Slot12","","",null,null],[17,"Slot13","","",null,null],[17,"Slot14","","",null,null],[17,"Slot15","","",null,null],[17,"Slot16","","",null,null],[17,"Slot17","","",null,null],[17,"Slot18","","",null,null],[17,"Slot19","","",null,null],[17,"Slot20","","",null,null],[17,"Slot21","","",null,null],[17,"Slot22","","",null,null],[17,"Slot23","","",null,null],[17,"Slot24","","",null,null],[17,"Slot25","","",null,null],[17,"Slot26","","",null,null],[17,"Slot27","","",null,null],[17,"Slot28","","",null,null],[17,"Slot29","","",null,null],[17,"Slot30","","",null,null],[17,"Slot31","","",null,null],[17,"Slot32","","",null,null],[0,"Anchor","wlc","View Positioner Anchor",null,null],[3,"Flags","wlc::Anchor","Bitmap that may represent multiple Anchors of a `View` by it's `Positioner`",null,null],[17,"Null","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"Right","","",null,null],[0,"Gravity","wlc","View Positioner Gravity",null,null],[3,"Flags","wlc::Gravity","Bitmap that may represent multiple Gravity Values for a `View` by it's `Positioner`",null,null],[17,"Null","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"Right","","",null,null],[0,"ConstraintAdjustment","wlc","View Positioner Adjustments when View is constraint",null,null],[3,"Flags","wlc::ConstraintAdjustment","Bitmap that may represent multiple Constraints to adjust a `View` by it's `Positioner`",null,null],[17,"Null","","Don't alter the surface position even if it is constrained on some axis, for example partially outside the edge of a monitor.",null,null],[17,"FlipX","","Invert the anchor and gravity on the x axis if the surface is constrained on the x axis. For example, if the left edge of the surface is constrained, the gravity is 'left' and the anchor is 'left', change the gravity to 'right' and the anchor to 'right'.",null,null],[17,"FlipY","","Invert the anchor and gravity on the y axis if the surface is constrained on the y axis. For example, if the bottom edge of the surface is constrained, the gravity is 'bottom' and the anchor is 'bottom', change the gravity to 'top' and the anchor to 'top'.",null,null],[17,"ResizeX","","Resize the surface horizontally so that it is completely unconstrained.",null,null],[17,"ResizeY","","Resize the surface vertically so that it is completely unconstrained.",null,null],[17,"SlideX","","Slide the surface along the x axis until it is no longer constrained.",null,null],[17,"SlideY","","Slide the surface along the y axis until it is no longer constrained.",null,null],[8,"Handle","wlc","Assiciated user-provided data",null,null],[10,"set_user_data","","Sets any data as user pointer consuming the data.",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"user_data","","Receive a shared reference to the user data of a given type, if user data exists.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"try_take_user_data","","Tries to take the userdata exclusively and removes it from the Handle.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"clear_user_data","","Clears currently set user data (`Drop` gets called, after all references are dropped).",30,{"inputs":[{"name":"self"}],"output":null}],[8,"Callback","","Entry point for your code",null,null],[11,"output_created","","Output was created.",31,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"output_destroyed","","Output was destroyed",31,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_focus","","Output got or lost focus",31,{"inputs":[{"name":"self"},{"name":"output"},{"name":"bool"}],"output":null}],[11,"output_resolution","","Output resolution changed",31,{"inputs":[{"name":"self"},{"name":"output"},{"name":"size"},{"name":"size"}],"output":null}],[11,"output_render_pre","","Output pre render hook",31,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_render_post","","Output post render hook",31,{"inputs":[{"name":"self"},{"name":"renderoutput"}],"output":null}],[11,"output_context_created","","Output context is created.",31,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"output_context_destroyed","","Output context was destroyed",31,{"inputs":[{"name":"self"},{"name":"output"}],"output":null}],[11,"view_created","","View was created.",31,{"inputs":[{"name":"self"},{"name":"view"}],"output":{"name":"bool"}}],[11,"view_destroyed","","View was destroyed",31,{"inputs":[{"name":"self"},{"name":"view"}],"output":null}],[11,"view_focus","","View got or lost focus",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"bool"}],"output":null}],[11,"view_move_to_output","","View was moved to output",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"output"},{"name":"output"}],"output":null}],[11,"view_request_geometry","","Request to set given geometry for view.",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"geometry"}],"output":null}],[11,"view_request_state","","Request to disable or enable the given state for view.",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"view_request_move","","Request to move itself.",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"point"}],"output":null}],[11,"view_request_resize","","Request to resize itself with the given edges.",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"},{"name":"point"}],"output":null}],[11,"view_render_pre","","View pre render hook",31,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_render_post","","View post render hook",31,{"inputs":[{"name":"self"},{"name":"renderview"}],"output":null}],[11,"view_properties_updated","","View properties (title, class, app_id) were updated",31,{"inputs":[{"name":"self"},{"name":"view"},{"name":"flags"}],"output":null}],[11,"keyboard_key","","Key event was triggered, view handle will be zero if there was no focus.",31,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"key"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"pointer_button","","Button event was triggered, view handle will be `None` if there was no focus.",31,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"button"},{"name":"buttonstate"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pointer_scroll","","Scroll event was triggered, view handle will be `None` if there was no focus.",31,null],[11,"pointer_motion","","Motion event was triggered, view handle will be `None` if there was no focus.",31,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"touch","","Touch event was triggered, view handle will be `None` if there was no focus.",31,{"inputs":[{"name":"self"},{"name":"option"},{"name":"u32"},{"name":"modifiers"},{"name":"touchtype"},{"name":"i32"},{"name":"point"}],"output":{"name":"bool"}}],[11,"compositor_ready","","Compositor is ready to accept clients",31,{"inputs":[{"name":"self"}],"output":null}],[11,"compositor_terminate","","Compositor is about to terminate",31,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","wlc::input::keyboard","",33,null],[11,"drop","","",34,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"keymap"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","wlc::ViewState","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",35,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",35,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",35,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",35,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",35,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",35,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",35,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::ViewType","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",36,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",36,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",36,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::ViewPropertyUpdate","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",37,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",37,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",37,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::ResizeEdge","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",38,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",38,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",38,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",38,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",38,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",38,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",38,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",38,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::Modifier","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",39,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",39,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",39,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::Led","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",40,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",40,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",40,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",40,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::ScrollAxis","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",41,{"inputs":[{"name":"u8"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",41,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",41,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::Visibility","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",42,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",42,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",42,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",42,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",42,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",42,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",42,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",42,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::Anchor","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",43,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",43,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",43,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",43,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::Gravity","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",44,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",44,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",44,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",44,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",44,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",44,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",44,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",44,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"eq","wlc::ConstraintAdjustment","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",45,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",45,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",45,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",45,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",45,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",45,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",45,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",45,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"serialize","wlc::ViewState","",35,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::ViewType","",36,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::ViewPropertyUpdate","",37,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::ResizeEdge","",38,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::Modifier","",39,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::Led","",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::ScrollAxis","",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::Visibility","",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::Anchor","",43,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::Gravity","",44,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","wlc::ConstraintAdjustment","",45,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_raw_ptr","wlc::input::keyboard","",33,null],[11,"get_raw_ptr","","",33,null],[11,"new_from_names","","Create a keymap from RMLVO names.",33,{"inputs":[{"name":"context"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"option"},{"name":"u32"}],"output":{"name":"option"}}],[11,"new_from_file","","Create a keymap from a keymap file.",33,{"inputs":[{"name":"context"},{"name":"file"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"new_from_string","","Create a keymap from a keymap string.",33,{"inputs":[{"name":"context"},{"name":"string"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_as_string","","Get the compiled keymap as a string.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"min_keycode","","Get the minimum keycode in the keymap.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"max_keycode","","Get the maximum keycode in the keymap.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mods","","Get an iterator to the modifiers of this keymap",33,{"inputs":[{"name":"self"}],"output":{"name":"keymapmods"}}],[11,"num_mods","","Get the number of modifiers in the keymap.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mod_get_name","","Get the name of a modifier by index.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"str"}}],[11,"mod_get_index","","Get the index of a modifier by name.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u32"}}],[11,"layouts","","Returns an iterator to the layouts in this keymap",33,{"inputs":[{"name":"self"}],"output":{"name":"keymaplayouts"}}],[11,"num_layouts","","Get the number of layouts in the keymap.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"layout_get_name","","Get the name of a layout by index.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"str"}}],[11,"layout_get_index","","Get the index of a layout by name.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u32"}}],[11,"leds","","Returns an iterator to the leds in this keymap",33,{"inputs":[{"name":"self"}],"output":{"name":"keymapleds"}}],[11,"num_leds","","Get the number of LEDs in the keymap.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"led_get_name","","Get the name of a LED by index.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"str"}}],[11,"led_get_index","","Get the index of a LED by name.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u32"}}],[11,"num_layouts_for_key","","Get the number of layouts for a specific key.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"num_levels_for_key","","Get the number of shift levels for a specific key and layout.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"key_get_syms_by_level","","Get the keysyms obtained from pressing a key in a given layout and shift level.",33,null],[11,"key_repeats","","Determine whether a key should repeat or not.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_raw_ptr","","",34,null],[11,"get_raw_ptr","","",34,null],[11,"new","","Create a new keyboard state object from a keymap.",34,{"inputs":[{"name":"keymap"}],"output":{"name":"state"}}],[11,"get_keymap","","Get the keymap which a keyboard state object is using.",34,{"inputs":[{"name":"self"}],"output":{"name":"keymap"}}],[11,"update_key","","Update the keyboard state to reflect a given key being pressed or released.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"keydirection"}],"output":{"name":"u32"}}],[11,"update_mask","","Update a keyboard state from a set of explicit masks.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"key_get_syms","","Get the keysyms obtained from pressing a particular key in a given keyboard state.",34,null],[11,"key_get_utf8","","Get the Unicode/UTF-8 string obtained from pressing a particular key in a given keyboard state.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"key_get_utf32","","Get the Unicode/UTF-32 codepoint obtained from pressing a particular key in a a given keyboard state.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"key_get_one_sym","","Get the single keysym obtained from pressing a particular key in a given keyboard state.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"key_get_layout","","Get the effective layout index for a key in a given keyboard state.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"key_get_level","","Get the effective shift level for a key in a given keyboard state and layout.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"serialize_mods","","The counterpart to xkb_state_update_mask for modifiers, to be used on the server side of serialization.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"serialize_layout","","",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"mod_name_is_active","","Test whether a modifier is active in a given keyboard state by name.",34,{"inputs":[{"name":"self"},{"name":"s"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mod_index_is_active","","Test whether a modifier is active in a given keyboard state by index.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mod_index_is_consumed","","Test whether a modifier is consumed by keyboard state translation for a key.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mod_mask_remove_consumed","","Remove consumed modifiers from a modifier mask for a key.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"key_get_consumed_mods","","Get the mask of modifiers consumed by translating a given key.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"layout_name_is_active","","Test whether a layout is active in a given keyboard state by name.",34,{"inputs":[{"name":"self"},{"name":"s"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"layout_index_is_active","","Test whether a layout is active in a given keyboard state by index.",34,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"led_name_is_active","","Test whether a LED is active in a given keyboard state by name.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"led_index_is_active","","Test whether a LED is active in a given keyboard state by index.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}]],"paths":[[3,"Point"],[3,"Size"],[3,"Geometry"],[3,"Modifiers"],[4,"BackendType"],[4,"KeyState"],[4,"ButtonState"],[4,"TouchType"],[4,"Key"],[4,"Button"],[4,"Error"],[3,"Output"],[3,"WeakOutput"],[3,"View"],[3,"Positioner"],[3,"WeakView"],[3,"Flags"],[3,"Timer"],[3,"EventSource"],[8,"IoCallback"],[8,"TimerCallback"],[4,"RenderInstance"],[4,"SurfaceFormat"],[4,"GLES2PixelFormat"],[3,"RenderOutput"],[3,"RenderView"],[8,"Renderer"],[3,"NoPixelFormat"],[3,"NoRenderer"],[3,"GLES2Renderer"],[8,"Handle"],[8,"Callback"],[3,"Wlc"],[3,"Keymap"],[3,"State"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"],[3,"Flags"]]};
searchIndex["wlc_sys"] = {"doc":"","items":[[3,"wlc_point","wlc_sys","Fixed 2D point",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"wlc_size","","Fixed 2D size",null,null],[12,"w","","",1,null],[12,"h","","",1,null],[3,"wlc_geometry","","Fixed 2D point, size pair",null,null],[12,"origin","","",2,null],[12,"size","","",2,null],[3,"wlc_event_source","","",null,null],[3,"xkb_state","","",null,null],[3,"xkb_keymap","","",null,null],[3,"libinput_device","","",null,null],[3,"wlc_modifiers","","State of keyboard modifiers in various functions.",null,null],[12,"leds","","",3,null],[12,"mods","","",3,null],[5,"wlc_set_output_created_cb","","Output was created. Return false if you want to destroy the output. (e.g. failed to allocate data related to view)",null,null],[5,"wlc_set_output_destroyed_cb","","Output was destroyed.",null,null],[5,"wlc_set_output_focus_cb","","Output got or lost focus.",null,null],[5,"wlc_set_output_resolution_cb","","Output resolution changed.",null,null],[5,"wlc_set_output_render_pre_cb","","Output pre render hook.",null,null],[5,"wlc_set_output_render_post_cb","","Output post render hook.",null,null],[5,"wlc_set_output_context_created_cb","","Output context is created. This generally happens on startup and when current tty changes",null,null],[5,"wlc_set_output_context_destroyed_cb","","Output context was destroyed.",null,null],[5,"wlc_set_view_created_cb","","View was created. Return false if you want to destroy the view. (e.g. failed to allocate data related to view)",null,null],[5,"wlc_set_view_destroyed_cb","","View was destroyed.",null,null],[5,"wlc_set_view_focus_cb","","View got or lost focus.",null,null],[5,"wlc_set_view_move_to_output_cb","","View was moved to output.",null,null],[5,"wlc_set_view_request_geometry_cb","","Request to set given geometry for view. Apply using wlc_view_set_geometry to agree.",null,null],[5,"wlc_set_view_request_state_cb","","Request to disable or enable the given state for view. Apply using wlc_view_set_state to agree.",null,null],[5,"wlc_set_view_request_move_cb","","Request to move itself. Start a interactive move to agree.",null,null],[5,"wlc_set_view_request_resize_cb","","Request to resize itself with the given edges. Start a interactive resize to agree.",null,null],[5,"wlc_set_view_render_pre_cb","","View pre render hook.",null,null],[5,"wlc_set_view_render_post_cb","","View post render hook.",null,null],[5,"wlc_set_view_properties_updated_cb","","View properties (title, class, app_id) was updated",null,null],[5,"wlc_set_keyboard_key_cb","","Key event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients.",null,null],[5,"wlc_set_pointer_button_cb","","Button event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients.",null,null],[5,"wlc_set_pointer_scroll_cb","","Scroll event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients.",null,null],[5,"wlc_set_pointer_motion_cb","","Motion event was triggered, view handle will be zero if there was no focus. Apply with wlc_pointer_set_position to agree. Return true to prevent sending the event to clients.",null,null],[5,"wlc_set_touch_cb","","Touch event was triggered, view handle will be zero if there was no focus. Return true to prevent sending the event to clients.",null,null],[5,"wlc_set_compositor_ready_cb","","Compositor is ready to accept clients.",null,null],[5,"wlc_set_compositor_terminate_cb","","Compositor is about to terminate",null,null],[5,"wlc_set_input_created_cb","","Input device was created. Return value does nothing. (Experimental)",null,null],[5,"wlc_set_input_destroyed_cb","","Input device was destroyed. (Experimental)",null,null],[5,"wlc_log_set_handler","","Set log handler. Can be set before wlc_init.",null,null],[5,"wlc_init","","Initialize wlc. Returns false on failure.",null,null],[5,"wlc_terminate","","Terminate wlc.",null,null],[5,"wlc_get_backend_type","","Query backend wlc is using.",null,null],[5,"wlc_exec","","Exec program.",null,null],[5,"wlc_run","","Run event loop.",null,null],[5,"wlc_handle_set_user_data","","Link custom data to handle.",null,null],[5,"wlc_handle_get_user_data","","Get linked custom data from handle.",null,null],[5,"wlc_event_loop_add_fd","","Add fd to event loop. Return value of callback is unused, you should return 0.",null,null],[5,"wlc_event_loop_add_timer","","Add timer to event loop. Return value of callback is unused, you should return 0.",null,null],[5,"wlc_event_source_timer_update","","Update timer to trigger after delay. Returns true on success.",null,null],[5,"wlc_event_source_remove","","Remove event source from event loop.",null,null],[5,"wlc_get_outputs","","Get outputs. Returned array is a direct reference, careful when moving and destroying handles.",null,null],[5,"wlc_get_focused_output","","Get focused output.",null,null],[5,"wlc_output_get_name","","Get output name.",null,null],[5,"wlc_output_get_sleep","","Get sleep state.",null,null],[5,"wlc_output_set_sleep","","Wake up / sleep.",null,null],[5,"wlc_output_set_gamma","","Set gamma. R, G, and B are color ramp arrays of size elements.",null,null],[5,"wlc_output_get_gamma_size","","Get gamma size",null,null],[5,"wlc_output_get_resolution","","Get real resolution. Resolution applied by either wlc_output_set_resolution call or initially. Do not use this for coordinate boundary.",null,null],[5,"wlc_output_get_virtual_resolution","","Get virtual resolution. Resolution with transformations applied for proper rendering for example on high density displays. Use this to figure out coordinate boundary.",null,null],[5,"wlc_output_set_resolution","","Set resolution.",null,null],[5,"wlc_output_get_scale","","Get scale factor.",null,null],[5,"wlc_output_get_mask","","Get current visibility bitmask.",null,null],[5,"wlc_output_set_mask","","Set visibility bitmask.",null,null],[5,"wlc_output_get_views","","Get views in stack order. Returned array is a direct reference, careful when moving and destroying handles.",null,null],[5,"wlc_output_get_mutable_views","","Get mutable views in creation order. Returned array is a direct reference, careful when moving and destroying handles. This is mainly useful for wm's who need another view stack for inplace sorting. For example tiling wms, may want to use this to keep their tiling order separated from floating order.",null,null],[5,"wlc_output_set_views","","Set views in stack order. This will also change mutable views. Returns false on failure.",null,null],[5,"wlc_output_focus","","Focus output. Pass zero for no focus.",null,null],[5,"wlc_view_focus","","Focus view. Pass zero for no focus.",null,null],[5,"wlc_view_close","","Close view.",null,null],[5,"wlc_view_get_output","","Get current output.",null,null],[5,"wlc_view_set_output","","Set output. Alternatively you can wlc_output_set_views.",null,null],[5,"wlc_view_send_to_back","","Send behind everything.",null,null],[5,"wlc_view_send_below","","Send below another view.",null,null],[5,"wlc_view_bring_above","","Send above another view.",null,null],[5,"wlc_view_bring_to_front","","Bring to front of everything.",null,null],[5,"wlc_view_get_mask","","Get current visibility bitmask.",null,null],[5,"wlc_view_set_mask","","Set visibility bitmask.",null,null],[5,"wlc_view_get_geometry","","Get current geometry. (what client sees)",null,null],[5,"wlc_view_positioner_get_size","","Get size requested by positioner, as defined in xdg-shell v6. Returns NULL if view has no valid positioner",null,null],[5,"wlc_view_positioner_get_anchor_rect","","Get anchor rectangle requested by positioner, as defined in xdg-shell v6. Returns NULL if view has no valid positioner.",null,null],[5,"wlc_view_positioner_get_offset","","Get offset requested by positioner, as defined in xdg-shell v6. Returns NULL if view has no valid positioner, or default value (0, 0) if positioner has no offset set.",null,null],[5,"wlc_view_positioner_get_anchor","","Get anchor requested by positioner, as defined in xdg-shell v6. Returns default value WLC_BIT_ANCHOR_NONE if view has no valid positioner or if positioner has no anchor set.",null,null],[5,"wlc_view_positioner_get_gravity","","Get anchor requested by positioner, as defined in xdg-shell v6. Returns default value WLC_BIT_GRAVITY_NONE if view has no valid positioner or if positioner has no gravity set.",null,null],[5,"wlc_view_positioner_get_constraint_adjustment","","Get constraint adjustment requested by positioner, as defined in xdg-shell v6. Returns default value WLC_BIT_CONSTRAINT_ADJUSTMENT_NONE if view has no valid positioner or if positioner has no constraint adjustment set.",null,null],[5,"wlc_view_get_visible_geometry","","Get visible geometry. (what wlc displays)",null,null],[5,"wlc_view_set_geometry","","Set geometry. Set edges if the geometry change is caused by interactive resize.",null,null],[5,"wlc_view_get_type","","Get type bitfield.",null,null],[5,"wlc_view_set_type","","Set type bit. Toggle indicates whether it is set or not.",null,null],[5,"wlc_view_get_state","","Get current state bitfield.",null,null],[5,"wlc_view_set_state","","Set state bit. Toggle indicates whether it is set or not.",null,null],[5,"wlc_view_get_parent","","Get parent view.",null,null],[5,"wlc_view_set_parent","","Set parent view.",null,null],[5,"wlc_view_get_title","","Get title.",null,null],[5,"wlc_view_get_instance","","Get instance. (shell-surface only)",null,null],[5,"wlc_view_get_class","","Get class. (shell-surface only)",null,null],[5,"wlc_view_get_app_id","","Get app id. (xdg-surface only)",null,null],[5,"wlc_view_get_pid","","Get pid.",null,null],[5,"wlc_keyboard_get_xkb_state","","Internal xkb_state exposed. You can use it to do more advanced key handling. *  However you should avoid messing up with its state. ",null,null],[5,"wlc_keyboard_get_xkb_keymap","","Internal xkb_keymap exposed. You can use it to do more advanced key handling.",null,null],[5,"wlc_keyboard_get_current_keys","","Get currently held keys.",null,null],[5,"wlc_keyboard_get_keysym_for_key","","Utility function to convert raw keycode to keysym. Passed modifiers may transform the key.",null,null],[5,"wlc_keyboard_get_utf32_for_key","","Utility function to convert raw keycode to Unicode/UTF-32 codepoint. Passed modifiers may transform the key.",null,null],[5,"wlc_pointer_get_position","","Get current pointer position.",null,null],[5,"wlc_pointer_set_position","","Set current pointer position.",null,null],[5,"wlc_get_wl_display","","Returns Wayland display.",null,null],[5,"wlc_handle_from_wl_surface_resource","","Returns view handle from wl_surface resource.",null,null],[5,"wlc_handle_from_wl_output_resource","","Returns output handle from wl_output resource.",null,null],[5,"wlc_resource_from_wl_surface_resource","","Returns internal wlc surface from wl_surface resource.",null,null],[5,"wlc_surface_get_size","","Get surface size.",null,null],[5,"wlc_surface_get_wl_resource","","Return wl_surface resource from internal wlc surface.",null,null],[5,"wlc_view_from_surface","","Turns wl_surface into a wlc view. Returns 0 on failure. This will also trigger view.created callback as any view would. For the extra arguments see details of wl_resource_create and wl_resource_set_implementation. The extra arguments may be set NULL, if you are not implementing Wayland interface for the surface role.",null,null],[5,"wlc_view_get_surface","","Returns internal wlc surface from view handle",null,null],[5,"wlc_surface_get_subsurfaces","","Returns a list of the subsurfaces of the given surface",null,null],[5,"wlc_get_subsurface_geometry","","Returns the size of a subsurface and its position relative to parent",null,null],[5,"wlc_view_get_wl_client","","Returns wl_client from view handle",null,null],[5,"wlc_view_get_role","","Returns surface role resource from view handle. Return value will be NULL if the view was not assigned role or created with wlc_view_create_from_surface().",null,null],[5,"wlc_pixels_write","","Write pixel data with the specific format to output's framebuffer. If the geometry is out of bounds, it will be automaticall clamped.",null,null],[5,"wlc_pixels_read","","Read pixel data from output's framebuffer. If the geometry is out of bounds, it will be automatically clamped. Potentially clamped geometry will be stored in out_geometry, to indicate width / height of the returned data.",null,null],[5,"wlc_surface_render","","Renders surface.",null,null],[5,"wlc_output_schedule_render","","Schedules output for rendering next frame. If output was already scheduled this is no-op, if output is currently rendering, it will render immediately after.",null,null],[5,"wlc_surface_flush_frame_callbacks","","Adds frame callbacks of the given surface for the next output frame. It applies recursively to all subsurfaces. Useful when the compositor creates custom animations which require disabling internal rendering, but still need to update the surface textures (for ex. video players).",null,null],[5,"wlc_output_get_renderer","","Returns currently active renderer on the given output",null,null],[5,"wlc_surface_get_textures","","Fills out_textures[] with the textures of a surface. Returns false if surface is invalid. Array must have at least 3 elements and should be refreshed at each frame. Note that these are not only OpenGL textures but rather render-specific. For more info what they are check the renderer's source code ",null,null],[6,"wlc_handle","","",null,null],[6,"__pid_t","","",null,null],[6,"pid_t","","",null,null],[6,"wlc_log_type","","wlc_log(), wlc_vlog();",null,null],[6,"wlc_backend_type","","wlc_get_backend_type();",null,null],[6,"wlc_event_bit","","mask in wlc_event_loop_add_fd();",null,null],[6,"wlc_view_state_bit","","wlc_view_get_state();",null,null],[6,"wlc_view_type_bit","","wlc_view_get_type();",null,null],[6,"wlc_view_property_update_bit","","wlc_set_view_properties_updated_cb();",null,null],[6,"wlc_resize_edge","","wlc_view_set_geometry(); Edges in interface interface.view.request.resize function.",null,null],[6,"wlc_modifier_bit","","Mods in interface.keyboard.key function.",null,null],[6,"wlc_led_bit","","Leds in interface.keyboard.key function.",null,null],[6,"wlc_key_state","","State in interface.keyboard.key function.",null,null],[6,"wlc_button_state","","State in interface.pointer.button function.",null,null],[6,"wlc_scroll_axis_bit","","Axis in interface.pointer.scroll function.",null,null],[6,"wlc_touch_type","","Type in interface.touch.touch function",null,null],[6,"wlc_positioner_anchor_bit","","wlc_view_positioner_get_anchor();",null,null],[6,"wlc_positioner_gravity_bit","","wlc_view_positioner_get_gravity();",null,null],[6,"wlc_positioner_constraint_adjustment_bit","","wlc_view_positioner_get_gravity();",null,null],[6,"wlc_resource","","",null,null],[6,"wlc_pixel_format","","Allowed pixel formats.",null,null],[6,"wlc_renderer","","Enabled renderers",null,null],[6,"wlc_surface_format","","",null,null],[17,"wlc_log_type_WLC_LOG_INFO","","",null,null],[17,"wlc_log_type_WLC_LOG_WARN","","",null,null],[17,"wlc_log_type_WLC_LOG_ERROR","","",null,null],[17,"wlc_log_type_WLC_LOG_WAYLAND","","",null,null],[17,"wlc_backend_type_WLC_BACKEND_NONE","","",null,null],[17,"wlc_backend_type_WLC_BACKEND_DRM","","",null,null],[17,"wlc_backend_type_WLC_BACKEND_X11","","",null,null],[17,"wlc_event_bit_WLC_EVENT_READABLE","","",null,null],[17,"wlc_event_bit_WLC_EVENT_WRITABLE","","",null,null],[17,"wlc_event_bit_WLC_EVENT_HANGUP","","",null,null],[17,"wlc_event_bit_WLC_EVENT_ERROR","","",null,null],[17,"wlc_view_state_bit_WLC_BIT_MAXIMIZED","","",null,null],[17,"wlc_view_state_bit_WLC_BIT_FULLSCREEN","","",null,null],[17,"wlc_view_state_bit_WLC_BIT_RESIZING","","",null,null],[17,"wlc_view_state_bit_WLC_BIT_MOVING","","",null,null],[17,"wlc_view_state_bit_WLC_BIT_ACTIVATED","","",null,null],[17,"wlc_view_type_bit_WLC_BIT_OVERRIDE_REDIRECT","","",null,null],[17,"wlc_view_type_bit_WLC_BIT_UNMANAGED","","",null,null],[17,"wlc_view_type_bit_WLC_BIT_SPLASH","","",null,null],[17,"wlc_view_type_bit_WLC_BIT_MODAL","","",null,null],[17,"wlc_view_type_bit_WLC_BIT_POPUP","","",null,null],[17,"wlc_view_property_update_bit_WLC_BIT_PROPERTY_TITLE","","",null,null],[17,"wlc_view_property_update_bit_WLC_BIT_PROPERTY_CLASS","","",null,null],[17,"wlc_view_property_update_bit_WLC_BIT_PROPERTY_APP_ID","","",null,null],[17,"wlc_view_property_update_bit_WLC_BIT_PROPERTY_PID","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_NONE","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_TOP","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_BOTTOM","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_LEFT","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_TOP_LEFT","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_BOTTOM_LEFT","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_RIGHT","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_TOP_RIGHT","","",null,null],[17,"wlc_resize_edge_WLC_RESIZE_EDGE_BOTTOM_RIGHT","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_SHIFT","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_CAPS","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_CTRL","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_ALT","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_MOD2","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_MOD3","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_LOGO","","",null,null],[17,"wlc_modifier_bit_WLC_BIT_MOD_MOD5","","",null,null],[17,"wlc_led_bit_WLC_BIT_LED_NUM","","",null,null],[17,"wlc_led_bit_WLC_BIT_LED_CAPS","","",null,null],[17,"wlc_led_bit_WLC_BIT_LED_SCROLL","","",null,null],[17,"wlc_key_state_WLC_KEY_STATE_RELEASED","","",null,null],[17,"wlc_key_state_WLC_KEY_STATE_PRESSED","","",null,null],[17,"wlc_button_state_WLC_BUTTON_STATE_RELEASED","","",null,null],[17,"wlc_button_state_WLC_BUTTON_STATE_PRESSED","","",null,null],[17,"wlc_scroll_axis_bit_WLC_SCROLL_AXIS_VERTICAL","","",null,null],[17,"wlc_scroll_axis_bit_WLC_SCROLL_AXIS_HORIZONTAL","","",null,null],[17,"wlc_touch_type_WLC_TOUCH_DOWN","","",null,null],[17,"wlc_touch_type_WLC_TOUCH_UP","","",null,null],[17,"wlc_touch_type_WLC_TOUCH_MOTION","","",null,null],[17,"wlc_touch_type_WLC_TOUCH_FRAME","","",null,null],[17,"wlc_touch_type_WLC_TOUCH_CANCEL","","",null,null],[17,"wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_NONE","","",null,null],[17,"wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_TOP","","",null,null],[17,"wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_BOTTOM","","",null,null],[17,"wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_LEFT","","",null,null],[17,"wlc_positioner_anchor_bit_WLC_BIT_ANCHOR_RIGHT","","",null,null],[17,"wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_NONE","","",null,null],[17,"wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_TOP","","",null,null],[17,"wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_BOTTOM","","",null,null],[17,"wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_LEFT","","",null,null],[17,"wlc_positioner_gravity_bit_WLC_BIT_GRAVITY_RIGHT","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_NONE","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_SLIDE_X","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_SLIDE_Y","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_FLIP_X","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_FLIP_Y","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_RESIZE_X","","",null,null],[17,"wlc_positioner_constraint_adjustment_bit_WLC_BIT_CONSTRAINT_ADJUSTMENT_RESIZE_Y","","",null,null],[17,"wlc_pixel_format_WLC_RGBA8888","","",null,null],[17,"wlc_renderer_WLC_RENDERER_GLES2","","",null,null],[17,"wlc_renderer_WLC_NO_RENDERER","","",null,null],[17,"wlc_surface_format_SURFACE_RGB","","",null,null],[17,"wlc_surface_format_SURFACE_RGBA","","",null,null],[17,"wlc_surface_format_SURFACE_EGL","","",null,null],[17,"wlc_surface_format_SURFACE_Y_UV","","",null,null],[17,"wlc_surface_format_SURFACE_Y_U_V","","",null,null],[17,"wlc_surface_format_SURFACE_Y_XUXV","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"wlc_event_source"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"xkb_state"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"xkb_keymap"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"libinput_device"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"wlc_point"],[3,"wlc_size"],[3,"wlc_geometry"],[3,"wlc_modifiers"],[3,"wlc_event_source"],[3,"xkb_state"],[3,"xkb_keymap"],[3,"libinput_device"]]};
searchIndex["xkbcommon"] = {"doc":"","items":[[0,"xkb","xkbcommon","",null,null],[3,"Context","xkbcommon::xkb","Top level library context object.",null,null],[3,"ContextIncludePaths","","Iterator to a Context include paths",null,null],[3,"Keymap","","Compiled keymap object.",null,null],[3,"KeymapMods","","iterator to the modifiers in a Keymap",null,null],[3,"KeymapLayouts","","iterator to the layouts in Keymap",null,null],[3,"KeymapLeds","","iterator to the leds in a Keymap",null,null],[3,"State","","Keyboard state object.",null,null],[4,"LogLevel","","",null,null],[13,"Critical","","",0,null],[13,"Error","","",0,null],[13,"Warning","","",0,null],[13,"Info","","",0,null],[13,"Debug","","",0,null],[4,"KeyDirection","","Specifies the direction of the key (press / release).",null,null],[13,"Up","","the key was released",1,null],[13,"Down","","the key was pressed",1,null],[5,"keycode_is_legal_ext","","Test whether a value is a valid extended keycode. @sa xkb_keycode_t",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"keycode_is_legal_x11","","Names to compile a keymap with, also known as RMLVO.",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"keysym_get_name","","Get the name of a keysym.",null,{"inputs":[{"name":"keysym"}],"output":{"name":"string"}}],[5,"keysym_from_name","","Get a keysym from its name.",null,{"inputs":[{"name":"str"},{"name":"keysymflags"}],"output":{"name":"keysym"}}],[5,"keysym_to_utf8","","Get the Unicode/UTF-8 representation of a keysym.",null,{"inputs":[{"name":"keysym"}],"output":{"name":"string"}}],[5,"keysym_to_utf32","","Get the Unicode/UTF-32 representation of a keysym.",null,{"inputs":[{"name":"keysym"}],"output":{"name":"u32"}}],[0,"ffi","","",null,null],[3,"xkb_rule_names","xkbcommon::xkb::ffi","",null,null],[12,"rules","","",2,null],[12,"model","","",2,null],[12,"layout","","",2,null],[12,"variant","","",2,null],[12,"options","","",2,null],[4,"xkb_context","","",null,null],[4,"xkb_keymap","","",null,null],[4,"xkb_state","","",null,null],[4,"xkb_log_level","","",null,null],[13,"CRITICAL","","",3,null],[13,"ERROR","","",3,null],[13,"WARNING","","",3,null],[13,"INFO","","",3,null],[13,"DEBUG","","",3,null],[4,"xkb_key_direction","","",null,null],[13,"UP","","",4,null],[13,"DOWN","","",4,null],[5,"xkb_keycode_is_legal_ext","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"xkb_keycode_is_legal_x11","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"xkb_keysym_get_name","","",null,null],[5,"xkb_keysym_from_name","","",null,null],[5,"xkb_keysym_to_utf8","","",null,null],[5,"xkb_keysym_to_utf32","","",null,null],[5,"xkb_context_new","","",null,null],[5,"xkb_context_ref","","",null,null],[5,"xkb_context_unref","","",null,null],[5,"xkb_context_set_user_data","","",null,null],[5,"xkb_context_get_user_data","","",null,null],[5,"xkb_context_include_path_append","","",null,null],[5,"xkb_context_include_path_append_default","","",null,null],[5,"xkb_context_include_path_reset_defaults","","",null,null],[5,"xkb_context_include_path_clear","","",null,null],[5,"xkb_context_num_include_paths","","",null,null],[5,"xkb_context_include_path_get","","",null,null],[5,"xkb_context_set_log_level","","",null,null],[5,"xkb_context_get_log_level","","",null,null],[5,"xkb_context_set_log_verbosity","","",null,null],[5,"xkb_context_get_log_verbosity","","",null,null],[5,"xkb_context_set_log_fn","","",null,null],[5,"xkb_keymap_new_from_names","","",null,null],[5,"xkb_keymap_new_from_file","","",null,null],[5,"xkb_keymap_new_from_string","","",null,null],[5,"xkb_keymap_new_from_buffer","","",null,null],[5,"xkb_keymap_ref","","",null,null],[5,"xkb_keymap_unref","","",null,null],[5,"xkb_keymap_get_as_string","","",null,null],[5,"xkb_keymap_min_keycode","","",null,null],[5,"xkb_keymap_max_keycode","","",null,null],[5,"xkb_keymap_key_for_each","","",null,null],[5,"xkb_keymap_num_mods","","",null,null],[5,"xkb_keymap_mod_get_name","","",null,null],[5,"xkb_keymap_mod_get_index","","",null,null],[5,"xkb_keymap_num_layouts","","",null,null],[5,"xkb_keymap_layout_get_name","","",null,null],[5,"xkb_keymap_layout_get_index","","",null,null],[5,"xkb_keymap_num_leds","","",null,null],[5,"xkb_keymap_led_get_name","","",null,null],[5,"xkb_keymap_led_get_index","","",null,null],[5,"xkb_keymap_num_layouts_for_key","","",null,null],[5,"xkb_keymap_num_levels_for_key","","",null,null],[5,"xkb_keymap_key_get_syms_by_level","","",null,null],[5,"xkb_keymap_key_repeats","","",null,null],[5,"xkb_state_ref","","",null,null],[5,"xkb_state_unref","","",null,null],[5,"xkb_state_new","","",null,null],[5,"xkb_state_get_keymap","","",null,null],[5,"xkb_state_update_key","","",null,null],[5,"xkb_state_update_mask","","",null,null],[5,"xkb_state_key_get_syms","","",null,null],[5,"xkb_state_key_get_utf8","","",null,null],[5,"xkb_state_key_get_utf32","","",null,null],[5,"xkb_state_key_get_one_sym","","",null,null],[5,"xkb_state_key_get_layout","","",null,null],[5,"xkb_state_key_get_level","","",null,null],[5,"xkb_state_serialize_mods","","",null,null],[5,"xkb_state_serialize_layout","","",null,null],[5,"xkb_state_mod_name_is_active","","",null,null],[5,"xkb_state_mod_names_are_active","","",null,null],[5,"xkb_state_mod_index_is_active","","",null,null],[5,"xkb_state_mod_index_are_active","","",null,null],[5,"xkb_state_mod_index_is_consumed","","",null,null],[5,"xkb_state_mod_mask_remove_consumed","","",null,null],[5,"xkb_state_key_get_consumed_mods","","",null,null],[5,"xkb_state_layout_name_is_active","","",null,null],[5,"xkb_state_layout_index_is_active","","",null,null],[5,"xkb_state_led_name_is_active","","",null,null],[5,"xkb_state_led_index_is_active","","",null,null],[6,"xkb_keycode_t","","",null,null],[6,"xkb_keysym_t","","",null,null],[6,"xkb_layout_index_t","","",null,null],[6,"xkb_layout_mask_t","","",null,null],[6,"xkb_level_index_t","","",null,null],[6,"xkb_mod_index_t","","",null,null],[6,"xkb_mod_mask_t","","",null,null],[6,"xkb_led_index_t","","",null,null],[6,"xkb_led_mask_t","","",null,null],[6,"xkb_keysym_flags","","",null,null],[6,"xkb_context_flags","","",null,null],[6,"xkb_keymap_compile_flags","","",null,null],[6,"xkb_keymap_format","","",null,null],[6,"xkb_state_component","","",null,null],[6,"xkb_state_match","","",null,null],[6,"xkb_log_fn_t","","",null,null],[6,"xkb_keymap_key_iter_t","","",null,null],[17,"XKB_KEYCODE_INVALID","","",null,null],[17,"XKB_LAYOUT_INVALID","","",null,null],[17,"XKB_LEVEL_INVALID","","",null,null],[17,"XKB_MOD_INVALID","","",null,null],[17,"XKB_LED_INVALID","","",null,null],[17,"XKB_KEYCODE_MAX","","",null,null],[17,"XKB_KEYSYM_NO_FLAGS","","",null,null],[17,"XKB_KEYSYM_CASE_INSENSITIVE","","",null,null],[17,"XKB_CONTEXT_NO_FLAGS","","",null,null],[17,"XKB_CONTEXT_NO_DEFAULT_INCLUDES","","",null,null],[17,"XKB_CONTEXT_NO_ENVIRONMENT_NAMES","","",null,null],[17,"XKB_KEYMAP_COMPILE_NO_FLAGS","","",null,null],[17,"XKB_KEYMAP_FORMAT_TEXT_V1","","",null,null],[17,"XKB_KEYMAP_FORMAT_USE_ORIGINAL","","",null,null],[17,"XKB_STATE_MODS_DEPRESSED","","",null,null],[17,"XKB_STATE_MODS_LATCHED","","",null,null],[17,"XKB_STATE_MODS_LOCKED","","",null,null],[17,"XKB_STATE_MODS_EFFECTIVE","","",null,null],[17,"XKB_STATE_LAYOUT_DEPRESSED","","",null,null],[17,"XKB_STATE_LAYOUT_LATCHED","","",null,null],[17,"XKB_STATE_LAYOUT_LOCKED","","",null,null],[17,"XKB_STATE_LAYOUT_EFFECTIVE","","",null,null],[17,"XKB_STATE_LEDS","","",null,null],[17,"XKB_STATE_MATCH_ANY","","",null,null],[17,"XKB_STATE_MATCH_ALL","","",null,null],[17,"XKB_STATE_MATCH_NON_EXCLUSIVE","","",null,null],[0,"keysyms","xkbcommon::xkb","",null,null],[17,"KEY_NoSymbol","xkbcommon::xkb::keysyms","",null,null],[17,"KEY_VoidSymbol","","",null,null],[17,"KEY_BackSpace","","",null,null],[17,"KEY_Tab","","",null,null],[17,"KEY_Linefeed","","",null,null],[17,"KEY_Clear","","",null,null],[17,"KEY_Return","","",null,null],[17,"KEY_Pause","","",null,null],[17,"KEY_Scroll_Lock","","",null,null],[17,"KEY_Sys_Req","","",null,null],[17,"KEY_Escape","","",null,null],[17,"KEY_Delete","","",null,null],[17,"KEY_Multi_key","","",null,null],[17,"KEY_Codeinput","","",null,null],[17,"KEY_SingleCandidate","","",null,null],[17,"KEY_MultipleCandidate","","",null,null],[17,"KEY_PreviousCandidate","","",null,null],[17,"KEY_Kanji","","",null,null],[17,"KEY_Muhenkan","","",null,null],[17,"KEY_Henkan_Mode","","",null,null],[17,"KEY_Henkan","","",null,null],[17,"KEY_Romaji","","",null,null],[17,"KEY_Hiragana","","",null,null],[17,"KEY_Katakana","","",null,null],[17,"KEY_Hiragana_Katakana","","",null,null],[17,"KEY_Zenkaku","","",null,null],[17,"KEY_Hankaku","","",null,null],[17,"KEY_Zenkaku_Hankaku","","",null,null],[17,"KEY_Touroku","","",null,null],[17,"KEY_Massyo","","",null,null],[17,"KEY_Kana_Lock","","",null,null],[17,"KEY_Kana_Shift","","",null,null],[17,"KEY_Eisu_Shift","","",null,null],[17,"KEY_Eisu_toggle","","",null,null],[17,"KEY_Kanji_Bangou","","",null,null],[17,"KEY_Zen_Koho","","",null,null],[17,"KEY_Mae_Koho","","",null,null],[17,"KEY_Home","","",null,null],[17,"KEY_Left","","",null,null],[17,"KEY_Up","","",null,null],[17,"KEY_Right","","",null,null],[17,"KEY_Down","","",null,null],[17,"KEY_Prior","","",null,null],[17,"KEY_Page_Up","","",null,null],[17,"KEY_Next","","",null,null],[17,"KEY_Page_Down","","",null,null],[17,"KEY_End","","",null,null],[17,"KEY_Begin","","",null,null],[17,"KEY_Select","","",null,null],[17,"KEY_Print","","",null,null],[17,"KEY_Execute","","",null,null],[17,"KEY_Insert","","",null,null],[17,"KEY_Undo","","",null,null],[17,"KEY_Redo","","",null,null],[17,"KEY_Menu","","",null,null],[17,"KEY_Find","","",null,null],[17,"KEY_Cancel","","",null,null],[17,"KEY_Help","","",null,null],[17,"KEY_Break","","",null,null],[17,"KEY_Mode_switch","","",null,null],[17,"KEY_script_switch","","",null,null],[17,"KEY_Num_Lock","","",null,null],[17,"KEY_KP_Space","","",null,null],[17,"KEY_KP_Tab","","",null,null],[17,"KEY_KP_Enter","","",null,null],[17,"KEY_KP_F1","","",null,null],[17,"KEY_KP_F2","","",null,null],[17,"KEY_KP_F3","","",null,null],[17,"KEY_KP_F4","","",null,null],[17,"KEY_KP_Home","","",null,null],[17,"KEY_KP_Left","","",null,null],[17,"KEY_KP_Up","","",null,null],[17,"KEY_KP_Right","","",null,null],[17,"KEY_KP_Down","","",null,null],[17,"KEY_KP_Prior","","",null,null],[17,"KEY_KP_Page_Up","","",null,null],[17,"KEY_KP_Next","","",null,null],[17,"KEY_KP_Page_Down","","",null,null],[17,"KEY_KP_End","","",null,null],[17,"KEY_KP_Begin","","",null,null],[17,"KEY_KP_Insert","","",null,null],[17,"KEY_KP_Delete","","",null,null],[17,"KEY_KP_Equal","","",null,null],[17,"KEY_KP_Multiply","","",null,null],[17,"KEY_KP_Add","","",null,null],[17,"KEY_KP_Separator","","",null,null],[17,"KEY_KP_Subtract","","",null,null],[17,"KEY_KP_Decimal","","",null,null],[17,"KEY_KP_Divide","","",null,null],[17,"KEY_KP_0","","",null,null],[17,"KEY_KP_1","","",null,null],[17,"KEY_KP_2","","",null,null],[17,"KEY_KP_3","","",null,null],[17,"KEY_KP_4","","",null,null],[17,"KEY_KP_5","","",null,null],[17,"KEY_KP_6","","",null,null],[17,"KEY_KP_7","","",null,null],[17,"KEY_KP_8","","",null,null],[17,"KEY_KP_9","","",null,null],[17,"KEY_F1","","",null,null],[17,"KEY_F2","","",null,null],[17,"KEY_F3","","",null,null],[17,"KEY_F4","","",null,null],[17,"KEY_F5","","",null,null],[17,"KEY_F6","","",null,null],[17,"KEY_F7","","",null,null],[17,"KEY_F8","","",null,null],[17,"KEY_F9","","",null,null],[17,"KEY_F10","","",null,null],[17,"KEY_F11","","",null,null],[17,"KEY_L1","","",null,null],[17,"KEY_F12","","",null,null],[17,"KEY_L2","","",null,null],[17,"KEY_F13","","",null,null],[17,"KEY_L3","","",null,null],[17,"KEY_F14","","",null,null],[17,"KEY_L4","","",null,null],[17,"KEY_F15","","",null,null],[17,"KEY_L5","","",null,null],[17,"KEY_F16","","",null,null],[17,"KEY_L6","","",null,null],[17,"KEY_F17","","",null,null],[17,"KEY_L7","","",null,null],[17,"KEY_F18","","",null,null],[17,"KEY_L8","","",null,null],[17,"KEY_F19","","",null,null],[17,"KEY_L9","","",null,null],[17,"KEY_F20","","",null,null],[17,"KEY_L10","","",null,null],[17,"KEY_F21","","",null,null],[17,"KEY_R1","","",null,null],[17,"KEY_F22","","",null,null],[17,"KEY_R2","","",null,null],[17,"KEY_F23","","",null,null],[17,"KEY_R3","","",null,null],[17,"KEY_F24","","",null,null],[17,"KEY_R4","","",null,null],[17,"KEY_F25","","",null,null],[17,"KEY_R5","","",null,null],[17,"KEY_F26","","",null,null],[17,"KEY_R6","","",null,null],[17,"KEY_F27","","",null,null],[17,"KEY_R7","","",null,null],[17,"KEY_F28","","",null,null],[17,"KEY_R8","","",null,null],[17,"KEY_F29","","",null,null],[17,"KEY_R9","","",null,null],[17,"KEY_F30","","",null,null],[17,"KEY_R10","","",null,null],[17,"KEY_F31","","",null,null],[17,"KEY_R11","","",null,null],[17,"KEY_F32","","",null,null],[17,"KEY_R12","","",null,null],[17,"KEY_F33","","",null,null],[17,"KEY_R13","","",null,null],[17,"KEY_F34","","",null,null],[17,"KEY_R14","","",null,null],[17,"KEY_F35","","",null,null],[17,"KEY_R15","","",null,null],[17,"KEY_Shift_L","","",null,null],[17,"KEY_Shift_R","","",null,null],[17,"KEY_Control_L","","",null,null],[17,"KEY_Control_R","","",null,null],[17,"KEY_Caps_Lock","","",null,null],[17,"KEY_Shift_Lock","","",null,null],[17,"KEY_Meta_L","","",null,null],[17,"KEY_Meta_R","","",null,null],[17,"KEY_Alt_L","","",null,null],[17,"KEY_Alt_R","","",null,null],[17,"KEY_Super_L","","",null,null],[17,"KEY_Super_R","","",null,null],[17,"KEY_Hyper_L","","",null,null],[17,"KEY_Hyper_R","","",null,null],[17,"KEY_ISO_Lock","","",null,null],[17,"KEY_ISO_Level2_Latch","","",null,null],[17,"KEY_ISO_Level3_Shift","","",null,null],[17,"KEY_ISO_Level3_Latch","","",null,null],[17,"KEY_ISO_Level3_Lock","","",null,null],[17,"KEY_ISO_Level5_Shift","","",null,null],[17,"KEY_ISO_Level5_Latch","","",null,null],[17,"KEY_ISO_Level5_Lock","","",null,null],[17,"KEY_ISO_Group_Shift","","",null,null],[17,"KEY_ISO_Group_Latch","","",null,null],[17,"KEY_ISO_Group_Lock","","",null,null],[17,"KEY_ISO_Next_Group","","",null,null],[17,"KEY_ISO_Next_Group_Lock","","",null,null],[17,"KEY_ISO_Prev_Group","","",null,null],[17,"KEY_ISO_Prev_Group_Lock","","",null,null],[17,"KEY_ISO_First_Group","","",null,null],[17,"KEY_ISO_First_Group_Lock","","",null,null],[17,"KEY_ISO_Last_Group","","",null,null],[17,"KEY_ISO_Last_Group_Lock","","",null,null],[17,"KEY_ISO_Left_Tab","","",null,null],[17,"KEY_ISO_Move_Line_Up","","",null,null],[17,"KEY_ISO_Move_Line_Down","","",null,null],[17,"KEY_ISO_Partial_Line_Up","","",null,null],[17,"KEY_ISO_Partial_Line_Down","","",null,null],[17,"KEY_ISO_Partial_Space_Left","","",null,null],[17,"KEY_ISO_Partial_Space_Right","","",null,null],[17,"KEY_ISO_Set_Margin_Left","","",null,null],[17,"KEY_ISO_Set_Margin_Right","","",null,null],[17,"KEY_ISO_Release_Margin_Left","","",null,null],[17,"KEY_ISO_Release_Margin_Right","","",null,null],[17,"KEY_ISO_Release_Both_Margins","","",null,null],[17,"KEY_ISO_Fast_Cursor_Left","","",null,null],[17,"KEY_ISO_Fast_Cursor_Right","","",null,null],[17,"KEY_ISO_Fast_Cursor_Up","","",null,null],[17,"KEY_ISO_Fast_Cursor_Down","","",null,null],[17,"KEY_ISO_Continuous_Underline","","",null,null],[17,"KEY_ISO_Discontinuous_Underline","","",null,null],[17,"KEY_ISO_Emphasize","","",null,null],[17,"KEY_ISO_Center_Object","","",null,null],[17,"KEY_ISO_Enter","","",null,null],[17,"KEY_dead_grave","","",null,null],[17,"KEY_dead_acute","","",null,null],[17,"KEY_dead_circumflex","","",null,null],[17,"KEY_dead_tilde","","",null,null],[17,"KEY_dead_perispomeni","","",null,null],[17,"KEY_dead_macron","","",null,null],[17,"KEY_dead_breve","","",null,null],[17,"KEY_dead_abovedot","","",null,null],[17,"KEY_dead_diaeresis","","",null,null],[17,"KEY_dead_abovering","","",null,null],[17,"KEY_dead_doubleacute","","",null,null],[17,"KEY_dead_caron","","",null,null],[17,"KEY_dead_cedilla","","",null,null],[17,"KEY_dead_ogonek","","",null,null],[17,"KEY_dead_iota","","",null,null],[17,"KEY_dead_voiced_sound","","",null,null],[17,"KEY_dead_semivoiced_sound","","",null,null],[17,"KEY_dead_belowdot","","",null,null],[17,"KEY_dead_hook","","",null,null],[17,"KEY_dead_horn","","",null,null],[17,"KEY_dead_stroke","","",null,null],[17,"KEY_dead_abovecomma","","",null,null],[17,"KEY_dead_psili","","",null,null],[17,"KEY_dead_abovereversedcomma","","",null,null],[17,"KEY_dead_dasia","","",null,null],[17,"KEY_dead_doublegrave","","",null,null],[17,"KEY_dead_belowring","","",null,null],[17,"KEY_dead_belowmacron","","",null,null],[17,"KEY_dead_belowcircumflex","","",null,null],[17,"KEY_dead_belowtilde","","",null,null],[17,"KEY_dead_belowbreve","","",null,null],[17,"KEY_dead_belowdiaeresis","","",null,null],[17,"KEY_dead_invertedbreve","","",null,null],[17,"KEY_dead_belowcomma","","",null,null],[17,"KEY_dead_currency","","",null,null],[17,"KEY_dead_lowline","","",null,null],[17,"KEY_dead_aboveverticalline","","",null,null],[17,"KEY_dead_belowverticalline","","",null,null],[17,"KEY_dead_longsolidusoverlay","","",null,null],[17,"KEY_dead_a","","",null,null],[17,"KEY_dead_A","","",null,null],[17,"KEY_dead_e","","",null,null],[17,"KEY_dead_E","","",null,null],[17,"KEY_dead_i","","",null,null],[17,"KEY_dead_I","","",null,null],[17,"KEY_dead_o","","",null,null],[17,"KEY_dead_O","","",null,null],[17,"KEY_dead_u","","",null,null],[17,"KEY_dead_U","","",null,null],[17,"KEY_dead_small_schwa","","",null,null],[17,"KEY_dead_capital_schwa","","",null,null],[17,"KEY_dead_greek","","",null,null],[17,"KEY_First_Virtual_Screen","","",null,null],[17,"KEY_Prev_Virtual_Screen","","",null,null],[17,"KEY_Next_Virtual_Screen","","",null,null],[17,"KEY_Last_Virtual_Screen","","",null,null],[17,"KEY_Terminate_Server","","",null,null],[17,"KEY_AccessX_Enable","","",null,null],[17,"KEY_AccessX_Feedback_Enable","","",null,null],[17,"KEY_RepeatKeys_Enable","","",null,null],[17,"KEY_SlowKeys_Enable","","",null,null],[17,"KEY_BounceKeys_Enable","","",null,null],[17,"KEY_StickyKeys_Enable","","",null,null],[17,"KEY_MouseKeys_Enable","","",null,null],[17,"KEY_MouseKeys_Accel_Enable","","",null,null],[17,"KEY_Overlay1_Enable","","",null,null],[17,"KEY_Overlay2_Enable","","",null,null],[17,"KEY_AudibleBell_Enable","","",null,null],[17,"KEY_Pointer_Left","","",null,null],[17,"KEY_Pointer_Right","","",null,null],[17,"KEY_Pointer_Up","","",null,null],[17,"KEY_Pointer_Down","","",null,null],[17,"KEY_Pointer_UpLeft","","",null,null],[17,"KEY_Pointer_UpRight","","",null,null],[17,"KEY_Pointer_DownLeft","","",null,null],[17,"KEY_Pointer_DownRight","","",null,null],[17,"KEY_Pointer_Button_Dflt","","",null,null],[17,"KEY_Pointer_Button1","","",null,null],[17,"KEY_Pointer_Button2","","",null,null],[17,"KEY_Pointer_Button3","","",null,null],[17,"KEY_Pointer_Button4","","",null,null],[17,"KEY_Pointer_Button5","","",null,null],[17,"KEY_Pointer_DblClick_Dflt","","",null,null],[17,"KEY_Pointer_DblClick1","","",null,null],[17,"KEY_Pointer_DblClick2","","",null,null],[17,"KEY_Pointer_DblClick3","","",null,null],[17,"KEY_Pointer_DblClick4","","",null,null],[17,"KEY_Pointer_DblClick5","","",null,null],[17,"KEY_Pointer_Drag_Dflt","","",null,null],[17,"KEY_Pointer_Drag1","","",null,null],[17,"KEY_Pointer_Drag2","","",null,null],[17,"KEY_Pointer_Drag3","","",null,null],[17,"KEY_Pointer_Drag4","","",null,null],[17,"KEY_Pointer_Drag5","","",null,null],[17,"KEY_Pointer_EnableKeys","","",null,null],[17,"KEY_Pointer_Accelerate","","",null,null],[17,"KEY_Pointer_DfltBtnNext","","",null,null],[17,"KEY_Pointer_DfltBtnPrev","","",null,null],[17,"KEY_ch","","",null,null],[17,"KEY_Ch","","",null,null],[17,"KEY_CH","","",null,null],[17,"KEY_c_h","","",null,null],[17,"KEY_C_h","","",null,null],[17,"KEY_C_H","","",null,null],[17,"KEY_3270_Duplicate","","",null,null],[17,"KEY_3270_FieldMark","","",null,null],[17,"KEY_3270_Right2","","",null,null],[17,"KEY_3270_Left2","","",null,null],[17,"KEY_3270_BackTab","","",null,null],[17,"KEY_3270_EraseEOF","","",null,null],[17,"KEY_3270_EraseInput","","",null,null],[17,"KEY_3270_Reset","","",null,null],[17,"KEY_3270_Quit","","",null,null],[17,"KEY_3270_PA1","","",null,null],[17,"KEY_3270_PA2","","",null,null],[17,"KEY_3270_PA3","","",null,null],[17,"KEY_3270_Test","","",null,null],[17,"KEY_3270_Attn","","",null,null],[17,"KEY_3270_CursorBlink","","",null,null],[17,"KEY_3270_AltCursor","","",null,null],[17,"KEY_3270_KeyClick","","",null,null],[17,"KEY_3270_Jump","","",null,null],[17,"KEY_3270_Ident","","",null,null],[17,"KEY_3270_Rule","","",null,null],[17,"KEY_3270_Copy","","",null,null],[17,"KEY_3270_Play","","",null,null],[17,"KEY_3270_Setup","","",null,null],[17,"KEY_3270_Record","","",null,null],[17,"KEY_3270_ChangeScreen","","",null,null],[17,"KEY_3270_DeleteWord","","",null,null],[17,"KEY_3270_ExSelect","","",null,null],[17,"KEY_3270_CursorSelect","","",null,null],[17,"KEY_3270_PrintScreen","","",null,null],[17,"KEY_3270_Enter","","",null,null],[17,"KEY_space","","",null,null],[17,"KEY_exclam","","",null,null],[17,"KEY_quotedbl","","",null,null],[17,"KEY_numbersign","","",null,null],[17,"KEY_dollar","","",null,null],[17,"KEY_percent","","",null,null],[17,"KEY_ampersand","","",null,null],[17,"KEY_apostrophe","","",null,null],[17,"KEY_quoteright","","",null,null],[17,"KEY_parenleft","","",null,null],[17,"KEY_parenright","","",null,null],[17,"KEY_asterisk","","",null,null],[17,"KEY_plus","","",null,null],[17,"KEY_comma","","",null,null],[17,"KEY_minus","","",null,null],[17,"KEY_period","","",null,null],[17,"KEY_slash","","",null,null],[17,"KEY_0","","",null,null],[17,"KEY_1","","",null,null],[17,"KEY_2","","",null,null],[17,"KEY_3","","",null,null],[17,"KEY_4","","",null,null],[17,"KEY_5","","",null,null],[17,"KEY_6","","",null,null],[17,"KEY_7","","",null,null],[17,"KEY_8","","",null,null],[17,"KEY_9","","",null,null],[17,"KEY_colon","","",null,null],[17,"KEY_semicolon","","",null,null],[17,"KEY_less","","",null,null],[17,"KEY_equal","","",null,null],[17,"KEY_greater","","",null,null],[17,"KEY_question","","",null,null],[17,"KEY_at","","",null,null],[17,"KEY_A","","",null,null],[17,"KEY_B","","",null,null],[17,"KEY_C","","",null,null],[17,"KEY_D","","",null,null],[17,"KEY_E","","",null,null],[17,"KEY_F","","",null,null],[17,"KEY_G","","",null,null],[17,"KEY_H","","",null,null],[17,"KEY_I","","",null,null],[17,"KEY_J","","",null,null],[17,"KEY_K","","",null,null],[17,"KEY_L","","",null,null],[17,"KEY_M","","",null,null],[17,"KEY_N","","",null,null],[17,"KEY_O","","",null,null],[17,"KEY_P","","",null,null],[17,"KEY_Q","","",null,null],[17,"KEY_R","","",null,null],[17,"KEY_S","","",null,null],[17,"KEY_T","","",null,null],[17,"KEY_U","","",null,null],[17,"KEY_V","","",null,null],[17,"KEY_W","","",null,null],[17,"KEY_X","","",null,null],[17,"KEY_Y","","",null,null],[17,"KEY_Z","","",null,null],[17,"KEY_bracketleft","","",null,null],[17,"KEY_backslash","","",null,null],[17,"KEY_bracketright","","",null,null],[17,"KEY_asciicircum","","",null,null],[17,"KEY_underscore","","",null,null],[17,"KEY_grave","","",null,null],[17,"KEY_quoteleft","","",null,null],[17,"KEY_a","","",null,null],[17,"KEY_b","","",null,null],[17,"KEY_c","","",null,null],[17,"KEY_d","","",null,null],[17,"KEY_e","","",null,null],[17,"KEY_f","","",null,null],[17,"KEY_g","","",null,null],[17,"KEY_h","","",null,null],[17,"KEY_i","","",null,null],[17,"KEY_j","","",null,null],[17,"KEY_k","","",null,null],[17,"KEY_l","","",null,null],[17,"KEY_m","","",null,null],[17,"KEY_n","","",null,null],[17,"KEY_o","","",null,null],[17,"KEY_p","","",null,null],[17,"KEY_q","","",null,null],[17,"KEY_r","","",null,null],[17,"KEY_s","","",null,null],[17,"KEY_t","","",null,null],[17,"KEY_u","","",null,null],[17,"KEY_v","","",null,null],[17,"KEY_w","","",null,null],[17,"KEY_x","","",null,null],[17,"KEY_y","","",null,null],[17,"KEY_z","","",null,null],[17,"KEY_braceleft","","",null,null],[17,"KEY_bar","","",null,null],[17,"KEY_braceright","","",null,null],[17,"KEY_asciitilde","","",null,null],[17,"KEY_nobreakspace","","",null,null],[17,"KEY_exclamdown","","",null,null],[17,"KEY_cent","","",null,null],[17,"KEY_sterling","","",null,null],[17,"KEY_currency","","",null,null],[17,"KEY_yen","","",null,null],[17,"KEY_brokenbar","","",null,null],[17,"KEY_section","","",null,null],[17,"KEY_diaeresis","","",null,null],[17,"KEY_copyright","","",null,null],[17,"KEY_ordfeminine","","",null,null],[17,"KEY_guillemotleft","","",null,null],[17,"KEY_notsign","","",null,null],[17,"KEY_hyphen","","",null,null],[17,"KEY_registered","","",null,null],[17,"KEY_macron","","",null,null],[17,"KEY_degree","","",null,null],[17,"KEY_plusminus","","",null,null],[17,"KEY_twosuperior","","",null,null],[17,"KEY_threesuperior","","",null,null],[17,"KEY_acute","","",null,null],[17,"KEY_mu","","",null,null],[17,"KEY_paragraph","","",null,null],[17,"KEY_periodcentered","","",null,null],[17,"KEY_cedilla","","",null,null],[17,"KEY_onesuperior","","",null,null],[17,"KEY_masculine","","",null,null],[17,"KEY_guillemotright","","",null,null],[17,"KEY_onequarter","","",null,null],[17,"KEY_onehalf","","",null,null],[17,"KEY_threequarters","","",null,null],[17,"KEY_questiondown","","",null,null],[17,"KEY_Agrave","","",null,null],[17,"KEY_Aacute","","",null,null],[17,"KEY_Acircumflex","","",null,null],[17,"KEY_Atilde","","",null,null],[17,"KEY_Adiaeresis","","",null,null],[17,"KEY_Aring","","",null,null],[17,"KEY_AE","","",null,null],[17,"KEY_Ccedilla","","",null,null],[17,"KEY_Egrave","","",null,null],[17,"KEY_Eacute","","",null,null],[17,"KEY_Ecircumflex","","",null,null],[17,"KEY_Ediaeresis","","",null,null],[17,"KEY_Igrave","","",null,null],[17,"KEY_Iacute","","",null,null],[17,"KEY_Icircumflex","","",null,null],[17,"KEY_Idiaeresis","","",null,null],[17,"KEY_ETH","","",null,null],[17,"KEY_Eth","","",null,null],[17,"KEY_Ntilde","","",null,null],[17,"KEY_Ograve","","",null,null],[17,"KEY_Oacute","","",null,null],[17,"KEY_Ocircumflex","","",null,null],[17,"KEY_Otilde","","",null,null],[17,"KEY_Odiaeresis","","",null,null],[17,"KEY_multiply","","",null,null],[17,"KEY_Oslash","","",null,null],[17,"KEY_Ooblique","","",null,null],[17,"KEY_Ugrave","","",null,null],[17,"KEY_Uacute","","",null,null],[17,"KEY_Ucircumflex","","",null,null],[17,"KEY_Udiaeresis","","",null,null],[17,"KEY_Yacute","","",null,null],[17,"KEY_THORN","","",null,null],[17,"KEY_Thorn","","",null,null],[17,"KEY_ssharp","","",null,null],[17,"KEY_agrave","","",null,null],[17,"KEY_aacute","","",null,null],[17,"KEY_acircumflex","","",null,null],[17,"KEY_atilde","","",null,null],[17,"KEY_adiaeresis","","",null,null],[17,"KEY_aring","","",null,null],[17,"KEY_ae","","",null,null],[17,"KEY_ccedilla","","",null,null],[17,"KEY_egrave","","",null,null],[17,"KEY_eacute","","",null,null],[17,"KEY_ecircumflex","","",null,null],[17,"KEY_ediaeresis","","",null,null],[17,"KEY_igrave","","",null,null],[17,"KEY_iacute","","",null,null],[17,"KEY_icircumflex","","",null,null],[17,"KEY_idiaeresis","","",null,null],[17,"KEY_eth","","",null,null],[17,"KEY_ntilde","","",null,null],[17,"KEY_ograve","","",null,null],[17,"KEY_oacute","","",null,null],[17,"KEY_ocircumflex","","",null,null],[17,"KEY_otilde","","",null,null],[17,"KEY_odiaeresis","","",null,null],[17,"KEY_division","","",null,null],[17,"KEY_oslash","","",null,null],[17,"KEY_ooblique","","",null,null],[17,"KEY_ugrave","","",null,null],[17,"KEY_uacute","","",null,null],[17,"KEY_ucircumflex","","",null,null],[17,"KEY_udiaeresis","","",null,null],[17,"KEY_yacute","","",null,null],[17,"KEY_thorn","","",null,null],[17,"KEY_ydiaeresis","","",null,null],[17,"KEY_Aogonek","","",null,null],[17,"KEY_breve","","",null,null],[17,"KEY_Lstroke","","",null,null],[17,"KEY_Lcaron","","",null,null],[17,"KEY_Sacute","","",null,null],[17,"KEY_Scaron","","",null,null],[17,"KEY_Scedilla","","",null,null],[17,"KEY_Tcaron","","",null,null],[17,"KEY_Zacute","","",null,null],[17,"KEY_Zcaron","","",null,null],[17,"KEY_Zabovedot","","",null,null],[17,"KEY_aogonek","","",null,null],[17,"KEY_ogonek","","",null,null],[17,"KEY_lstroke","","",null,null],[17,"KEY_lcaron","","",null,null],[17,"KEY_sacute","","",null,null],[17,"KEY_caron","","",null,null],[17,"KEY_scaron","","",null,null],[17,"KEY_scedilla","","",null,null],[17,"KEY_tcaron","","",null,null],[17,"KEY_zacute","","",null,null],[17,"KEY_doubleacute","","",null,null],[17,"KEY_zcaron","","",null,null],[17,"KEY_zabovedot","","",null,null],[17,"KEY_Racute","","",null,null],[17,"KEY_Abreve","","",null,null],[17,"KEY_Lacute","","",null,null],[17,"KEY_Cacute","","",null,null],[17,"KEY_Ccaron","","",null,null],[17,"KEY_Eogonek","","",null,null],[17,"KEY_Ecaron","","",null,null],[17,"KEY_Dcaron","","",null,null],[17,"KEY_Dstroke","","",null,null],[17,"KEY_Nacute","","",null,null],[17,"KEY_Ncaron","","",null,null],[17,"KEY_Odoubleacute","","",null,null],[17,"KEY_Rcaron","","",null,null],[17,"KEY_Uring","","",null,null],[17,"KEY_Udoubleacute","","",null,null],[17,"KEY_Tcedilla","","",null,null],[17,"KEY_racute","","",null,null],[17,"KEY_abreve","","",null,null],[17,"KEY_lacute","","",null,null],[17,"KEY_cacute","","",null,null],[17,"KEY_ccaron","","",null,null],[17,"KEY_eogonek","","",null,null],[17,"KEY_ecaron","","",null,null],[17,"KEY_dcaron","","",null,null],[17,"KEY_dstroke","","",null,null],[17,"KEY_nacute","","",null,null],[17,"KEY_ncaron","","",null,null],[17,"KEY_odoubleacute","","",null,null],[17,"KEY_rcaron","","",null,null],[17,"KEY_uring","","",null,null],[17,"KEY_udoubleacute","","",null,null],[17,"KEY_tcedilla","","",null,null],[17,"KEY_abovedot","","",null,null],[17,"KEY_Hstroke","","",null,null],[17,"KEY_Hcircumflex","","",null,null],[17,"KEY_Iabovedot","","",null,null],[17,"KEY_Gbreve","","",null,null],[17,"KEY_Jcircumflex","","",null,null],[17,"KEY_hstroke","","",null,null],[17,"KEY_hcircumflex","","",null,null],[17,"KEY_idotless","","",null,null],[17,"KEY_gbreve","","",null,null],[17,"KEY_jcircumflex","","",null,null],[17,"KEY_Cabovedot","","",null,null],[17,"KEY_Ccircumflex","","",null,null],[17,"KEY_Gabovedot","","",null,null],[17,"KEY_Gcircumflex","","",null,null],[17,"KEY_Ubreve","","",null,null],[17,"KEY_Scircumflex","","",null,null],[17,"KEY_cabovedot","","",null,null],[17,"KEY_ccircumflex","","",null,null],[17,"KEY_gabovedot","","",null,null],[17,"KEY_gcircumflex","","",null,null],[17,"KEY_ubreve","","",null,null],[17,"KEY_scircumflex","","",null,null],[17,"KEY_kra","","",null,null],[17,"KEY_kappa","","",null,null],[17,"KEY_Rcedilla","","",null,null],[17,"KEY_Itilde","","",null,null],[17,"KEY_Lcedilla","","",null,null],[17,"KEY_Emacron","","",null,null],[17,"KEY_Gcedilla","","",null,null],[17,"KEY_Tslash","","",null,null],[17,"KEY_rcedilla","","",null,null],[17,"KEY_itilde","","",null,null],[17,"KEY_lcedilla","","",null,null],[17,"KEY_emacron","","",null,null],[17,"KEY_gcedilla","","",null,null],[17,"KEY_tslash","","",null,null],[17,"KEY_ENG","","",null,null],[17,"KEY_eng","","",null,null],[17,"KEY_Amacron","","",null,null],[17,"KEY_Iogonek","","",null,null],[17,"KEY_Eabovedot","","",null,null],[17,"KEY_Imacron","","",null,null],[17,"KEY_Ncedilla","","",null,null],[17,"KEY_Omacron","","",null,null],[17,"KEY_Kcedilla","","",null,null],[17,"KEY_Uogonek","","",null,null],[17,"KEY_Utilde","","",null,null],[17,"KEY_Umacron","","",null,null],[17,"KEY_amacron","","",null,null],[17,"KEY_iogonek","","",null,null],[17,"KEY_eabovedot","","",null,null],[17,"KEY_imacron","","",null,null],[17,"KEY_ncedilla","","",null,null],[17,"KEY_omacron","","",null,null],[17,"KEY_kcedilla","","",null,null],[17,"KEY_uogonek","","",null,null],[17,"KEY_utilde","","",null,null],[17,"KEY_umacron","","",null,null],[17,"KEY_Wcircumflex","","",null,null],[17,"KEY_wcircumflex","","",null,null],[17,"KEY_Ycircumflex","","",null,null],[17,"KEY_ycircumflex","","",null,null],[17,"KEY_Babovedot","","",null,null],[17,"KEY_babovedot","","",null,null],[17,"KEY_Dabovedot","","",null,null],[17,"KEY_dabovedot","","",null,null],[17,"KEY_Fabovedot","","",null,null],[17,"KEY_fabovedot","","",null,null],[17,"KEY_Mabovedot","","",null,null],[17,"KEY_mabovedot","","",null,null],[17,"KEY_Pabovedot","","",null,null],[17,"KEY_pabovedot","","",null,null],[17,"KEY_Sabovedot","","",null,null],[17,"KEY_sabovedot","","",null,null],[17,"KEY_Tabovedot","","",null,null],[17,"KEY_tabovedot","","",null,null],[17,"KEY_Wgrave","","",null,null],[17,"KEY_wgrave","","",null,null],[17,"KEY_Wacute","","",null,null],[17,"KEY_wacute","","",null,null],[17,"KEY_Wdiaeresis","","",null,null],[17,"KEY_wdiaeresis","","",null,null],[17,"KEY_Ygrave","","",null,null],[17,"KEY_ygrave","","",null,null],[17,"KEY_OE","","",null,null],[17,"KEY_oe","","",null,null],[17,"KEY_Ydiaeresis","","",null,null],[17,"KEY_overline","","",null,null],[17,"KEY_kana_fullstop","","",null,null],[17,"KEY_kana_openingbracket","","",null,null],[17,"KEY_kana_closingbracket","","",null,null],[17,"KEY_kana_comma","","",null,null],[17,"KEY_kana_conjunctive","","",null,null],[17,"KEY_kana_middledot","","",null,null],[17,"KEY_kana_WO","","",null,null],[17,"KEY_kana_a","","",null,null],[17,"KEY_kana_i","","",null,null],[17,"KEY_kana_u","","",null,null],[17,"KEY_kana_e","","",null,null],[17,"KEY_kana_o","","",null,null],[17,"KEY_kana_ya","","",null,null],[17,"KEY_kana_yu","","",null,null],[17,"KEY_kana_yo","","",null,null],[17,"KEY_kana_tsu","","",null,null],[17,"KEY_kana_tu","","",null,null],[17,"KEY_prolongedsound","","",null,null],[17,"KEY_kana_A","","",null,null],[17,"KEY_kana_I","","",null,null],[17,"KEY_kana_U","","",null,null],[17,"KEY_kana_E","","",null,null],[17,"KEY_kana_O","","",null,null],[17,"KEY_kana_KA","","",null,null],[17,"KEY_kana_KI","","",null,null],[17,"KEY_kana_KU","","",null,null],[17,"KEY_kana_KE","","",null,null],[17,"KEY_kana_KO","","",null,null],[17,"KEY_kana_SA","","",null,null],[17,"KEY_kana_SHI","","",null,null],[17,"KEY_kana_SU","","",null,null],[17,"KEY_kana_SE","","",null,null],[17,"KEY_kana_SO","","",null,null],[17,"KEY_kana_TA","","",null,null],[17,"KEY_kana_CHI","","",null,null],[17,"KEY_kana_TI","","",null,null],[17,"KEY_kana_TSU","","",null,null],[17,"KEY_kana_TU","","",null,null],[17,"KEY_kana_TE","","",null,null],[17,"KEY_kana_TO","","",null,null],[17,"KEY_kana_NA","","",null,null],[17,"KEY_kana_NI","","",null,null],[17,"KEY_kana_NU","","",null,null],[17,"KEY_kana_NE","","",null,null],[17,"KEY_kana_NO","","",null,null],[17,"KEY_kana_HA","","",null,null],[17,"KEY_kana_HI","","",null,null],[17,"KEY_kana_FU","","",null,null],[17,"KEY_kana_HU","","",null,null],[17,"KEY_kana_HE","","",null,null],[17,"KEY_kana_HO","","",null,null],[17,"KEY_kana_MA","","",null,null],[17,"KEY_kana_MI","","",null,null],[17,"KEY_kana_MU","","",null,null],[17,"KEY_kana_ME","","",null,null],[17,"KEY_kana_MO","","",null,null],[17,"KEY_kana_YA","","",null,null],[17,"KEY_kana_YU","","",null,null],[17,"KEY_kana_YO","","",null,null],[17,"KEY_kana_RA","","",null,null],[17,"KEY_kana_RI","","",null,null],[17,"KEY_kana_RU","","",null,null],[17,"KEY_kana_RE","","",null,null],[17,"KEY_kana_RO","","",null,null],[17,"KEY_kana_WA","","",null,null],[17,"KEY_kana_N","","",null,null],[17,"KEY_voicedsound","","",null,null],[17,"KEY_semivoicedsound","","",null,null],[17,"KEY_kana_switch","","",null,null],[17,"KEY_Farsi_0","","",null,null],[17,"KEY_Farsi_1","","",null,null],[17,"KEY_Farsi_2","","",null,null],[17,"KEY_Farsi_3","","",null,null],[17,"KEY_Farsi_4","","",null,null],[17,"KEY_Farsi_5","","",null,null],[17,"KEY_Farsi_6","","",null,null],[17,"KEY_Farsi_7","","",null,null],[17,"KEY_Farsi_8","","",null,null],[17,"KEY_Farsi_9","","",null,null],[17,"KEY_Arabic_percent","","",null,null],[17,"KEY_Arabic_superscript_alef","","",null,null],[17,"KEY_Arabic_tteh","","",null,null],[17,"KEY_Arabic_peh","","",null,null],[17,"KEY_Arabic_tcheh","","",null,null],[17,"KEY_Arabic_ddal","","",null,null],[17,"KEY_Arabic_rreh","","",null,null],[17,"KEY_Arabic_comma","","",null,null],[17,"KEY_Arabic_fullstop","","",null,null],[17,"KEY_Arabic_0","","",null,null],[17,"KEY_Arabic_1","","",null,null],[17,"KEY_Arabic_2","","",null,null],[17,"KEY_Arabic_3","","",null,null],[17,"KEY_Arabic_4","","",null,null],[17,"KEY_Arabic_5","","",null,null],[17,"KEY_Arabic_6","","",null,null],[17,"KEY_Arabic_7","","",null,null],[17,"KEY_Arabic_8","","",null,null],[17,"KEY_Arabic_9","","",null,null],[17,"KEY_Arabic_semicolon","","",null,null],[17,"KEY_Arabic_question_mark","","",null,null],[17,"KEY_Arabic_hamza","","",null,null],[17,"KEY_Arabic_maddaonalef","","",null,null],[17,"KEY_Arabic_hamzaonalef","","",null,null],[17,"KEY_Arabic_hamzaonwaw","","",null,null],[17,"KEY_Arabic_hamzaunderalef","","",null,null],[17,"KEY_Arabic_hamzaonyeh","","",null,null],[17,"KEY_Arabic_alef","","",null,null],[17,"KEY_Arabic_beh","","",null,null],[17,"KEY_Arabic_tehmarbuta","","",null,null],[17,"KEY_Arabic_teh","","",null,null],[17,"KEY_Arabic_theh","","",null,null],[17,"KEY_Arabic_jeem","","",null,null],[17,"KEY_Arabic_hah","","",null,null],[17,"KEY_Arabic_khah","","",null,null],[17,"KEY_Arabic_dal","","",null,null],[17,"KEY_Arabic_thal","","",null,null],[17,"KEY_Arabic_ra","","",null,null],[17,"KEY_Arabic_zain","","",null,null],[17,"KEY_Arabic_seen","","",null,null],[17,"KEY_Arabic_sheen","","",null,null],[17,"KEY_Arabic_sad","","",null,null],[17,"KEY_Arabic_dad","","",null,null],[17,"KEY_Arabic_tah","","",null,null],[17,"KEY_Arabic_zah","","",null,null],[17,"KEY_Arabic_ain","","",null,null],[17,"KEY_Arabic_ghain","","",null,null],[17,"KEY_Arabic_tatweel","","",null,null],[17,"KEY_Arabic_feh","","",null,null],[17,"KEY_Arabic_qaf","","",null,null],[17,"KEY_Arabic_kaf","","",null,null],[17,"KEY_Arabic_lam","","",null,null],[17,"KEY_Arabic_meem","","",null,null],[17,"KEY_Arabic_noon","","",null,null],[17,"KEY_Arabic_ha","","",null,null],[17,"KEY_Arabic_heh","","",null,null],[17,"KEY_Arabic_waw","","",null,null],[17,"KEY_Arabic_alefmaksura","","",null,null],[17,"KEY_Arabic_yeh","","",null,null],[17,"KEY_Arabic_fathatan","","",null,null],[17,"KEY_Arabic_dammatan","","",null,null],[17,"KEY_Arabic_kasratan","","",null,null],[17,"KEY_Arabic_fatha","","",null,null],[17,"KEY_Arabic_damma","","",null,null],[17,"KEY_Arabic_kasra","","",null,null],[17,"KEY_Arabic_shadda","","",null,null],[17,"KEY_Arabic_sukun","","",null,null],[17,"KEY_Arabic_madda_above","","",null,null],[17,"KEY_Arabic_hamza_above","","",null,null],[17,"KEY_Arabic_hamza_below","","",null,null],[17,"KEY_Arabic_jeh","","",null,null],[17,"KEY_Arabic_veh","","",null,null],[17,"KEY_Arabic_keheh","","",null,null],[17,"KEY_Arabic_gaf","","",null,null],[17,"KEY_Arabic_noon_ghunna","","",null,null],[17,"KEY_Arabic_heh_doachashmee","","",null,null],[17,"KEY_Farsi_yeh","","",null,null],[17,"KEY_Arabic_farsi_yeh","","",null,null],[17,"KEY_Arabic_yeh_baree","","",null,null],[17,"KEY_Arabic_heh_goal","","",null,null],[17,"KEY_Arabic_switch","","",null,null],[17,"KEY_Cyrillic_GHE_bar","","",null,null],[17,"KEY_Cyrillic_ghe_bar","","",null,null],[17,"KEY_Cyrillic_ZHE_descender","","",null,null],[17,"KEY_Cyrillic_zhe_descender","","",null,null],[17,"KEY_Cyrillic_KA_descender","","",null,null],[17,"KEY_Cyrillic_ka_descender","","",null,null],[17,"KEY_Cyrillic_KA_vertstroke","","",null,null],[17,"KEY_Cyrillic_ka_vertstroke","","",null,null],[17,"KEY_Cyrillic_EN_descender","","",null,null],[17,"KEY_Cyrillic_en_descender","","",null,null],[17,"KEY_Cyrillic_U_straight","","",null,null],[17,"KEY_Cyrillic_u_straight","","",null,null],[17,"KEY_Cyrillic_U_straight_bar","","",null,null],[17,"KEY_Cyrillic_u_straight_bar","","",null,null],[17,"KEY_Cyrillic_HA_descender","","",null,null],[17,"KEY_Cyrillic_ha_descender","","",null,null],[17,"KEY_Cyrillic_CHE_descender","","",null,null],[17,"KEY_Cyrillic_che_descender","","",null,null],[17,"KEY_Cyrillic_CHE_vertstroke","","",null,null],[17,"KEY_Cyrillic_che_vertstroke","","",null,null],[17,"KEY_Cyrillic_SHHA","","",null,null],[17,"KEY_Cyrillic_shha","","",null,null],[17,"KEY_Cyrillic_SCHWA","","",null,null],[17,"KEY_Cyrillic_schwa","","",null,null],[17,"KEY_Cyrillic_I_macron","","",null,null],[17,"KEY_Cyrillic_i_macron","","",null,null],[17,"KEY_Cyrillic_O_bar","","",null,null],[17,"KEY_Cyrillic_o_bar","","",null,null],[17,"KEY_Cyrillic_U_macron","","",null,null],[17,"KEY_Cyrillic_u_macron","","",null,null],[17,"KEY_Serbian_dje","","",null,null],[17,"KEY_Macedonia_gje","","",null,null],[17,"KEY_Cyrillic_io","","",null,null],[17,"KEY_Ukrainian_ie","","",null,null],[17,"KEY_Ukranian_je","","",null,null],[17,"KEY_Macedonia_dse","","",null,null],[17,"KEY_Ukrainian_i","","",null,null],[17,"KEY_Ukranian_i","","",null,null],[17,"KEY_Ukrainian_yi","","",null,null],[17,"KEY_Ukranian_yi","","",null,null],[17,"KEY_Cyrillic_je","","",null,null],[17,"KEY_Serbian_je","","",null,null],[17,"KEY_Cyrillic_lje","","",null,null],[17,"KEY_Serbian_lje","","",null,null],[17,"KEY_Cyrillic_nje","","",null,null],[17,"KEY_Serbian_nje","","",null,null],[17,"KEY_Serbian_tshe","","",null,null],[17,"KEY_Macedonia_kje","","",null,null],[17,"KEY_Ukrainian_ghe_with_upturn","","",null,null],[17,"KEY_Byelorussian_shortu","","",null,null],[17,"KEY_Cyrillic_dzhe","","",null,null],[17,"KEY_Serbian_dze","","",null,null],[17,"KEY_numerosign","","",null,null],[17,"KEY_Serbian_DJE","","",null,null],[17,"KEY_Macedonia_GJE","","",null,null],[17,"KEY_Cyrillic_IO","","",null,null],[17,"KEY_Ukrainian_IE","","",null,null],[17,"KEY_Ukranian_JE","","",null,null],[17,"KEY_Macedonia_DSE","","",null,null],[17,"KEY_Ukrainian_I","","",null,null],[17,"KEY_Ukranian_I","","",null,null],[17,"KEY_Ukrainian_YI","","",null,null],[17,"KEY_Ukranian_YI","","",null,null],[17,"KEY_Cyrillic_JE","","",null,null],[17,"KEY_Serbian_JE","","",null,null],[17,"KEY_Cyrillic_LJE","","",null,null],[17,"KEY_Serbian_LJE","","",null,null],[17,"KEY_Cyrillic_NJE","","",null,null],[17,"KEY_Serbian_NJE","","",null,null],[17,"KEY_Serbian_TSHE","","",null,null],[17,"KEY_Macedonia_KJE","","",null,null],[17,"KEY_Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"KEY_Byelorussian_SHORTU","","",null,null],[17,"KEY_Cyrillic_DZHE","","",null,null],[17,"KEY_Serbian_DZE","","",null,null],[17,"KEY_Cyrillic_yu","","",null,null],[17,"KEY_Cyrillic_a","","",null,null],[17,"KEY_Cyrillic_be","","",null,null],[17,"KEY_Cyrillic_tse","","",null,null],[17,"KEY_Cyrillic_de","","",null,null],[17,"KEY_Cyrillic_ie","","",null,null],[17,"KEY_Cyrillic_ef","","",null,null],[17,"KEY_Cyrillic_ghe","","",null,null],[17,"KEY_Cyrillic_ha","","",null,null],[17,"KEY_Cyrillic_i","","",null,null],[17,"KEY_Cyrillic_shorti","","",null,null],[17,"KEY_Cyrillic_ka","","",null,null],[17,"KEY_Cyrillic_el","","",null,null],[17,"KEY_Cyrillic_em","","",null,null],[17,"KEY_Cyrillic_en","","",null,null],[17,"KEY_Cyrillic_o","","",null,null],[17,"KEY_Cyrillic_pe","","",null,null],[17,"KEY_Cyrillic_ya","","",null,null],[17,"KEY_Cyrillic_er","","",null,null],[17,"KEY_Cyrillic_es","","",null,null],[17,"KEY_Cyrillic_te","","",null,null],[17,"KEY_Cyrillic_u","","",null,null],[17,"KEY_Cyrillic_zhe","","",null,null],[17,"KEY_Cyrillic_ve","","",null,null],[17,"KEY_Cyrillic_softsign","","",null,null],[17,"KEY_Cyrillic_yeru","","",null,null],[17,"KEY_Cyrillic_ze","","",null,null],[17,"KEY_Cyrillic_sha","","",null,null],[17,"KEY_Cyrillic_e","","",null,null],[17,"KEY_Cyrillic_shcha","","",null,null],[17,"KEY_Cyrillic_che","","",null,null],[17,"KEY_Cyrillic_hardsign","","",null,null],[17,"KEY_Cyrillic_YU","","",null,null],[17,"KEY_Cyrillic_A","","",null,null],[17,"KEY_Cyrillic_BE","","",null,null],[17,"KEY_Cyrillic_TSE","","",null,null],[17,"KEY_Cyrillic_DE","","",null,null],[17,"KEY_Cyrillic_IE","","",null,null],[17,"KEY_Cyrillic_EF","","",null,null],[17,"KEY_Cyrillic_GHE","","",null,null],[17,"KEY_Cyrillic_HA","","",null,null],[17,"KEY_Cyrillic_I","","",null,null],[17,"KEY_Cyrillic_SHORTI","","",null,null],[17,"KEY_Cyrillic_KA","","",null,null],[17,"KEY_Cyrillic_EL","","",null,null],[17,"KEY_Cyrillic_EM","","",null,null],[17,"KEY_Cyrillic_EN","","",null,null],[17,"KEY_Cyrillic_O","","",null,null],[17,"KEY_Cyrillic_PE","","",null,null],[17,"KEY_Cyrillic_YA","","",null,null],[17,"KEY_Cyrillic_ER","","",null,null],[17,"KEY_Cyrillic_ES","","",null,null],[17,"KEY_Cyrillic_TE","","",null,null],[17,"KEY_Cyrillic_U","","",null,null],[17,"KEY_Cyrillic_ZHE","","",null,null],[17,"KEY_Cyrillic_VE","","",null,null],[17,"KEY_Cyrillic_SOFTSIGN","","",null,null],[17,"KEY_Cyrillic_YERU","","",null,null],[17,"KEY_Cyrillic_ZE","","",null,null],[17,"KEY_Cyrillic_SHA","","",null,null],[17,"KEY_Cyrillic_E","","",null,null],[17,"KEY_Cyrillic_SHCHA","","",null,null],[17,"KEY_Cyrillic_CHE","","",null,null],[17,"KEY_Cyrillic_HARDSIGN","","",null,null],[17,"KEY_Greek_ALPHAaccent","","",null,null],[17,"KEY_Greek_EPSILONaccent","","",null,null],[17,"KEY_Greek_ETAaccent","","",null,null],[17,"KEY_Greek_IOTAaccent","","",null,null],[17,"KEY_Greek_IOTAdieresis","","",null,null],[17,"KEY_Greek_IOTAdiaeresis","","",null,null],[17,"KEY_Greek_OMICRONaccent","","",null,null],[17,"KEY_Greek_UPSILONaccent","","",null,null],[17,"KEY_Greek_UPSILONdieresis","","",null,null],[17,"KEY_Greek_OMEGAaccent","","",null,null],[17,"KEY_Greek_accentdieresis","","",null,null],[17,"KEY_Greek_horizbar","","",null,null],[17,"KEY_Greek_alphaaccent","","",null,null],[17,"KEY_Greek_epsilonaccent","","",null,null],[17,"KEY_Greek_etaaccent","","",null,null],[17,"KEY_Greek_iotaaccent","","",null,null],[17,"KEY_Greek_iotadieresis","","",null,null],[17,"KEY_Greek_iotaaccentdieresis","","",null,null],[17,"KEY_Greek_omicronaccent","","",null,null],[17,"KEY_Greek_upsilonaccent","","",null,null],[17,"KEY_Greek_upsilondieresis","","",null,null],[17,"KEY_Greek_upsilonaccentdieresis","","",null,null],[17,"KEY_Greek_omegaaccent","","",null,null],[17,"KEY_Greek_ALPHA","","",null,null],[17,"KEY_Greek_BETA","","",null,null],[17,"KEY_Greek_GAMMA","","",null,null],[17,"KEY_Greek_DELTA","","",null,null],[17,"KEY_Greek_EPSILON","","",null,null],[17,"KEY_Greek_ZETA","","",null,null],[17,"KEY_Greek_ETA","","",null,null],[17,"KEY_Greek_THETA","","",null,null],[17,"KEY_Greek_IOTA","","",null,null],[17,"KEY_Greek_KAPPA","","",null,null],[17,"KEY_Greek_LAMDA","","",null,null],[17,"KEY_Greek_LAMBDA","","",null,null],[17,"KEY_Greek_MU","","",null,null],[17,"KEY_Greek_NU","","",null,null],[17,"KEY_Greek_XI","","",null,null],[17,"KEY_Greek_OMICRON","","",null,null],[17,"KEY_Greek_PI","","",null,null],[17,"KEY_Greek_RHO","","",null,null],[17,"KEY_Greek_SIGMA","","",null,null],[17,"KEY_Greek_TAU","","",null,null],[17,"KEY_Greek_UPSILON","","",null,null],[17,"KEY_Greek_PHI","","",null,null],[17,"KEY_Greek_CHI","","",null,null],[17,"KEY_Greek_PSI","","",null,null],[17,"KEY_Greek_OMEGA","","",null,null],[17,"KEY_Greek_alpha","","",null,null],[17,"KEY_Greek_beta","","",null,null],[17,"KEY_Greek_gamma","","",null,null],[17,"KEY_Greek_delta","","",null,null],[17,"KEY_Greek_epsilon","","",null,null],[17,"KEY_Greek_zeta","","",null,null],[17,"KEY_Greek_eta","","",null,null],[17,"KEY_Greek_theta","","",null,null],[17,"KEY_Greek_iota","","",null,null],[17,"KEY_Greek_kappa","","",null,null],[17,"KEY_Greek_lamda","","",null,null],[17,"KEY_Greek_lambda","","",null,null],[17,"KEY_Greek_mu","","",null,null],[17,"KEY_Greek_nu","","",null,null],[17,"KEY_Greek_xi","","",null,null],[17,"KEY_Greek_omicron","","",null,null],[17,"KEY_Greek_pi","","",null,null],[17,"KEY_Greek_rho","","",null,null],[17,"KEY_Greek_sigma","","",null,null],[17,"KEY_Greek_finalsmallsigma","","",null,null],[17,"KEY_Greek_tau","","",null,null],[17,"KEY_Greek_upsilon","","",null,null],[17,"KEY_Greek_phi","","",null,null],[17,"KEY_Greek_chi","","",null,null],[17,"KEY_Greek_psi","","",null,null],[17,"KEY_Greek_omega","","",null,null],[17,"KEY_Greek_switch","","",null,null],[17,"KEY_leftradical","","",null,null],[17,"KEY_topleftradical","","",null,null],[17,"KEY_horizconnector","","",null,null],[17,"KEY_topintegral","","",null,null],[17,"KEY_botintegral","","",null,null],[17,"KEY_vertconnector","","",null,null],[17,"KEY_topleftsqbracket","","",null,null],[17,"KEY_botleftsqbracket","","",null,null],[17,"KEY_toprightsqbracket","","",null,null],[17,"KEY_botrightsqbracket","","",null,null],[17,"KEY_topleftparens","","",null,null],[17,"KEY_botleftparens","","",null,null],[17,"KEY_toprightparens","","",null,null],[17,"KEY_botrightparens","","",null,null],[17,"KEY_leftmiddlecurlybrace","","",null,null],[17,"KEY_rightmiddlecurlybrace","","",null,null],[17,"KEY_topleftsummation","","",null,null],[17,"KEY_botleftsummation","","",null,null],[17,"KEY_topvertsummationconnector","","",null,null],[17,"KEY_botvertsummationconnector","","",null,null],[17,"KEY_toprightsummation","","",null,null],[17,"KEY_botrightsummation","","",null,null],[17,"KEY_rightmiddlesummation","","",null,null],[17,"KEY_lessthanequal","","",null,null],[17,"KEY_notequal","","",null,null],[17,"KEY_greaterthanequal","","",null,null],[17,"KEY_integral","","",null,null],[17,"KEY_therefore","","",null,null],[17,"KEY_variation","","",null,null],[17,"KEY_infinity","","",null,null],[17,"KEY_nabla","","",null,null],[17,"KEY_approximate","","",null,null],[17,"KEY_similarequal","","",null,null],[17,"KEY_ifonlyif","","",null,null],[17,"KEY_implies","","",null,null],[17,"KEY_identical","","",null,null],[17,"KEY_radical","","",null,null],[17,"KEY_includedin","","",null,null],[17,"KEY_includes","","",null,null],[17,"KEY_intersection","","",null,null],[17,"KEY_union","","",null,null],[17,"KEY_logicaland","","",null,null],[17,"KEY_logicalor","","",null,null],[17,"KEY_partialderivative","","",null,null],[17,"KEY_function","","",null,null],[17,"KEY_leftarrow","","",null,null],[17,"KEY_uparrow","","",null,null],[17,"KEY_rightarrow","","",null,null],[17,"KEY_downarrow","","",null,null],[17,"KEY_blank","","",null,null],[17,"KEY_soliddiamond","","",null,null],[17,"KEY_checkerboard","","",null,null],[17,"KEY_ht","","",null,null],[17,"KEY_ff","","",null,null],[17,"KEY_cr","","",null,null],[17,"KEY_lf","","",null,null],[17,"KEY_nl","","",null,null],[17,"KEY_vt","","",null,null],[17,"KEY_lowrightcorner","","",null,null],[17,"KEY_uprightcorner","","",null,null],[17,"KEY_upleftcorner","","",null,null],[17,"KEY_lowleftcorner","","",null,null],[17,"KEY_crossinglines","","",null,null],[17,"KEY_horizlinescan1","","",null,null],[17,"KEY_horizlinescan3","","",null,null],[17,"KEY_horizlinescan5","","",null,null],[17,"KEY_horizlinescan7","","",null,null],[17,"KEY_horizlinescan9","","",null,null],[17,"KEY_leftt","","",null,null],[17,"KEY_rightt","","",null,null],[17,"KEY_bott","","",null,null],[17,"KEY_topt","","",null,null],[17,"KEY_vertbar","","",null,null],[17,"KEY_emspace","","",null,null],[17,"KEY_enspace","","",null,null],[17,"KEY_em3space","","",null,null],[17,"KEY_em4space","","",null,null],[17,"KEY_digitspace","","",null,null],[17,"KEY_punctspace","","",null,null],[17,"KEY_thinspace","","",null,null],[17,"KEY_hairspace","","",null,null],[17,"KEY_emdash","","",null,null],[17,"KEY_endash","","",null,null],[17,"KEY_signifblank","","",null,null],[17,"KEY_ellipsis","","",null,null],[17,"KEY_doubbaselinedot","","",null,null],[17,"KEY_onethird","","",null,null],[17,"KEY_twothirds","","",null,null],[17,"KEY_onefifth","","",null,null],[17,"KEY_twofifths","","",null,null],[17,"KEY_threefifths","","",null,null],[17,"KEY_fourfifths","","",null,null],[17,"KEY_onesixth","","",null,null],[17,"KEY_fivesixths","","",null,null],[17,"KEY_careof","","",null,null],[17,"KEY_figdash","","",null,null],[17,"KEY_leftanglebracket","","",null,null],[17,"KEY_decimalpoint","","",null,null],[17,"KEY_rightanglebracket","","",null,null],[17,"KEY_marker","","",null,null],[17,"KEY_oneeighth","","",null,null],[17,"KEY_threeeighths","","",null,null],[17,"KEY_fiveeighths","","",null,null],[17,"KEY_seveneighths","","",null,null],[17,"KEY_trademark","","",null,null],[17,"KEY_signaturemark","","",null,null],[17,"KEY_trademarkincircle","","",null,null],[17,"KEY_leftopentriangle","","",null,null],[17,"KEY_rightopentriangle","","",null,null],[17,"KEY_emopencircle","","",null,null],[17,"KEY_emopenrectangle","","",null,null],[17,"KEY_leftsinglequotemark","","",null,null],[17,"KEY_rightsinglequotemark","","",null,null],[17,"KEY_leftdoublequotemark","","",null,null],[17,"KEY_rightdoublequotemark","","",null,null],[17,"KEY_prescription","","",null,null],[17,"KEY_permille","","",null,null],[17,"KEY_minutes","","",null,null],[17,"KEY_seconds","","",null,null],[17,"KEY_latincross","","",null,null],[17,"KEY_hexagram","","",null,null],[17,"KEY_filledrectbullet","","",null,null],[17,"KEY_filledlefttribullet","","",null,null],[17,"KEY_filledrighttribullet","","",null,null],[17,"KEY_emfilledcircle","","",null,null],[17,"KEY_emfilledrect","","",null,null],[17,"KEY_enopencircbullet","","",null,null],[17,"KEY_enopensquarebullet","","",null,null],[17,"KEY_openrectbullet","","",null,null],[17,"KEY_opentribulletup","","",null,null],[17,"KEY_opentribulletdown","","",null,null],[17,"KEY_openstar","","",null,null],[17,"KEY_enfilledcircbullet","","",null,null],[17,"KEY_enfilledsqbullet","","",null,null],[17,"KEY_filledtribulletup","","",null,null],[17,"KEY_filledtribulletdown","","",null,null],[17,"KEY_leftpointer","","",null,null],[17,"KEY_rightpointer","","",null,null],[17,"KEY_club","","",null,null],[17,"KEY_diamond","","",null,null],[17,"KEY_heart","","",null,null],[17,"KEY_maltesecross","","",null,null],[17,"KEY_dagger","","",null,null],[17,"KEY_doubledagger","","",null,null],[17,"KEY_checkmark","","",null,null],[17,"KEY_ballotcross","","",null,null],[17,"KEY_musicalsharp","","",null,null],[17,"KEY_musicalflat","","",null,null],[17,"KEY_malesymbol","","",null,null],[17,"KEY_femalesymbol","","",null,null],[17,"KEY_telephone","","",null,null],[17,"KEY_telephonerecorder","","",null,null],[17,"KEY_phonographcopyright","","",null,null],[17,"KEY_caret","","",null,null],[17,"KEY_singlelowquotemark","","",null,null],[17,"KEY_doublelowquotemark","","",null,null],[17,"KEY_cursor","","",null,null],[17,"KEY_leftcaret","","",null,null],[17,"KEY_rightcaret","","",null,null],[17,"KEY_downcaret","","",null,null],[17,"KEY_upcaret","","",null,null],[17,"KEY_overbar","","",null,null],[17,"KEY_downtack","","",null,null],[17,"KEY_upshoe","","",null,null],[17,"KEY_downstile","","",null,null],[17,"KEY_underbar","","",null,null],[17,"KEY_jot","","",null,null],[17,"KEY_quad","","",null,null],[17,"KEY_uptack","","",null,null],[17,"KEY_circle","","",null,null],[17,"KEY_upstile","","",null,null],[17,"KEY_downshoe","","",null,null],[17,"KEY_rightshoe","","",null,null],[17,"KEY_leftshoe","","",null,null],[17,"KEY_lefttack","","",null,null],[17,"KEY_righttack","","",null,null],[17,"KEY_hebrew_doublelowline","","",null,null],[17,"KEY_hebrew_aleph","","",null,null],[17,"KEY_hebrew_bet","","",null,null],[17,"KEY_hebrew_beth","","",null,null],[17,"KEY_hebrew_gimel","","",null,null],[17,"KEY_hebrew_gimmel","","",null,null],[17,"KEY_hebrew_dalet","","",null,null],[17,"KEY_hebrew_daleth","","",null,null],[17,"KEY_hebrew_he","","",null,null],[17,"KEY_hebrew_waw","","",null,null],[17,"KEY_hebrew_zain","","",null,null],[17,"KEY_hebrew_zayin","","",null,null],[17,"KEY_hebrew_chet","","",null,null],[17,"KEY_hebrew_het","","",null,null],[17,"KEY_hebrew_tet","","",null,null],[17,"KEY_hebrew_teth","","",null,null],[17,"KEY_hebrew_yod","","",null,null],[17,"KEY_hebrew_finalkaph","","",null,null],[17,"KEY_hebrew_kaph","","",null,null],[17,"KEY_hebrew_lamed","","",null,null],[17,"KEY_hebrew_finalmem","","",null,null],[17,"KEY_hebrew_mem","","",null,null],[17,"KEY_hebrew_finalnun","","",null,null],[17,"KEY_hebrew_nun","","",null,null],[17,"KEY_hebrew_samech","","",null,null],[17,"KEY_hebrew_samekh","","",null,null],[17,"KEY_hebrew_ayin","","",null,null],[17,"KEY_hebrew_finalpe","","",null,null],[17,"KEY_hebrew_pe","","",null,null],[17,"KEY_hebrew_finalzade","","",null,null],[17,"KEY_hebrew_finalzadi","","",null,null],[17,"KEY_hebrew_zade","","",null,null],[17,"KEY_hebrew_zadi","","",null,null],[17,"KEY_hebrew_qoph","","",null,null],[17,"KEY_hebrew_kuf","","",null,null],[17,"KEY_hebrew_resh","","",null,null],[17,"KEY_hebrew_shin","","",null,null],[17,"KEY_hebrew_taw","","",null,null],[17,"KEY_hebrew_taf","","",null,null],[17,"KEY_Hebrew_switch","","",null,null],[17,"KEY_Thai_kokai","","",null,null],[17,"KEY_Thai_khokhai","","",null,null],[17,"KEY_Thai_khokhuat","","",null,null],[17,"KEY_Thai_khokhwai","","",null,null],[17,"KEY_Thai_khokhon","","",null,null],[17,"KEY_Thai_khorakhang","","",null,null],[17,"KEY_Thai_ngongu","","",null,null],[17,"KEY_Thai_chochan","","",null,null],[17,"KEY_Thai_choching","","",null,null],[17,"KEY_Thai_chochang","","",null,null],[17,"KEY_Thai_soso","","",null,null],[17,"KEY_Thai_chochoe","","",null,null],[17,"KEY_Thai_yoying","","",null,null],[17,"KEY_Thai_dochada","","",null,null],[17,"KEY_Thai_topatak","","",null,null],[17,"KEY_Thai_thothan","","",null,null],[17,"KEY_Thai_thonangmontho","","",null,null],[17,"KEY_Thai_thophuthao","","",null,null],[17,"KEY_Thai_nonen","","",null,null],[17,"KEY_Thai_dodek","","",null,null],[17,"KEY_Thai_totao","","",null,null],[17,"KEY_Thai_thothung","","",null,null],[17,"KEY_Thai_thothahan","","",null,null],[17,"KEY_Thai_thothong","","",null,null],[17,"KEY_Thai_nonu","","",null,null],[17,"KEY_Thai_bobaimai","","",null,null],[17,"KEY_Thai_popla","","",null,null],[17,"KEY_Thai_phophung","","",null,null],[17,"KEY_Thai_fofa","","",null,null],[17,"KEY_Thai_phophan","","",null,null],[17,"KEY_Thai_fofan","","",null,null],[17,"KEY_Thai_phosamphao","","",null,null],[17,"KEY_Thai_moma","","",null,null],[17,"KEY_Thai_yoyak","","",null,null],[17,"KEY_Thai_rorua","","",null,null],[17,"KEY_Thai_ru","","",null,null],[17,"KEY_Thai_loling","","",null,null],[17,"KEY_Thai_lu","","",null,null],[17,"KEY_Thai_wowaen","","",null,null],[17,"KEY_Thai_sosala","","",null,null],[17,"KEY_Thai_sorusi","","",null,null],[17,"KEY_Thai_sosua","","",null,null],[17,"KEY_Thai_hohip","","",null,null],[17,"KEY_Thai_lochula","","",null,null],[17,"KEY_Thai_oang","","",null,null],[17,"KEY_Thai_honokhuk","","",null,null],[17,"KEY_Thai_paiyannoi","","",null,null],[17,"KEY_Thai_saraa","","",null,null],[17,"KEY_Thai_maihanakat","","",null,null],[17,"KEY_Thai_saraaa","","",null,null],[17,"KEY_Thai_saraam","","",null,null],[17,"KEY_Thai_sarai","","",null,null],[17,"KEY_Thai_saraii","","",null,null],[17,"KEY_Thai_saraue","","",null,null],[17,"KEY_Thai_sarauee","","",null,null],[17,"KEY_Thai_sarau","","",null,null],[17,"KEY_Thai_sarauu","","",null,null],[17,"KEY_Thai_phinthu","","",null,null],[17,"KEY_Thai_maihanakat_maitho","","",null,null],[17,"KEY_Thai_baht","","",null,null],[17,"KEY_Thai_sarae","","",null,null],[17,"KEY_Thai_saraae","","",null,null],[17,"KEY_Thai_sarao","","",null,null],[17,"KEY_Thai_saraaimaimuan","","",null,null],[17,"KEY_Thai_saraaimaimalai","","",null,null],[17,"KEY_Thai_lakkhangyao","","",null,null],[17,"KEY_Thai_maiyamok","","",null,null],[17,"KEY_Thai_maitaikhu","","",null,null],[17,"KEY_Thai_maiek","","",null,null],[17,"KEY_Thai_maitho","","",null,null],[17,"KEY_Thai_maitri","","",null,null],[17,"KEY_Thai_maichattawa","","",null,null],[17,"KEY_Thai_thanthakhat","","",null,null],[17,"KEY_Thai_nikhahit","","",null,null],[17,"KEY_Thai_leksun","","",null,null],[17,"KEY_Thai_leknung","","",null,null],[17,"KEY_Thai_leksong","","",null,null],[17,"KEY_Thai_leksam","","",null,null],[17,"KEY_Thai_leksi","","",null,null],[17,"KEY_Thai_lekha","","",null,null],[17,"KEY_Thai_lekhok","","",null,null],[17,"KEY_Thai_lekchet","","",null,null],[17,"KEY_Thai_lekpaet","","",null,null],[17,"KEY_Thai_lekkao","","",null,null],[17,"KEY_Hangul","","",null,null],[17,"KEY_Hangul_Start","","",null,null],[17,"KEY_Hangul_End","","",null,null],[17,"KEY_Hangul_Hanja","","",null,null],[17,"KEY_Hangul_Jamo","","",null,null],[17,"KEY_Hangul_Romaja","","",null,null],[17,"KEY_Hangul_Codeinput","","",null,null],[17,"KEY_Hangul_Jeonja","","",null,null],[17,"KEY_Hangul_Banja","","",null,null],[17,"KEY_Hangul_PreHanja","","",null,null],[17,"KEY_Hangul_PostHanja","","",null,null],[17,"KEY_Hangul_SingleCandidate","","",null,null],[17,"KEY_Hangul_MultipleCandidate","","",null,null],[17,"KEY_Hangul_PreviousCandidate","","",null,null],[17,"KEY_Hangul_Special","","",null,null],[17,"KEY_Hangul_switch","","",null,null],[17,"KEY_Hangul_Kiyeog","","",null,null],[17,"KEY_Hangul_SsangKiyeog","","",null,null],[17,"KEY_Hangul_KiyeogSios","","",null,null],[17,"KEY_Hangul_Nieun","","",null,null],[17,"KEY_Hangul_NieunJieuj","","",null,null],[17,"KEY_Hangul_NieunHieuh","","",null,null],[17,"KEY_Hangul_Dikeud","","",null,null],[17,"KEY_Hangul_SsangDikeud","","",null,null],[17,"KEY_Hangul_Rieul","","",null,null],[17,"KEY_Hangul_RieulKiyeog","","",null,null],[17,"KEY_Hangul_RieulMieum","","",null,null],[17,"KEY_Hangul_RieulPieub","","",null,null],[17,"KEY_Hangul_RieulSios","","",null,null],[17,"KEY_Hangul_RieulTieut","","",null,null],[17,"KEY_Hangul_RieulPhieuf","","",null,null],[17,"KEY_Hangul_RieulHieuh","","",null,null],[17,"KEY_Hangul_Mieum","","",null,null],[17,"KEY_Hangul_Pieub","","",null,null],[17,"KEY_Hangul_SsangPieub","","",null,null],[17,"KEY_Hangul_PieubSios","","",null,null],[17,"KEY_Hangul_Sios","","",null,null],[17,"KEY_Hangul_SsangSios","","",null,null],[17,"KEY_Hangul_Ieung","","",null,null],[17,"KEY_Hangul_Jieuj","","",null,null],[17,"KEY_Hangul_SsangJieuj","","",null,null],[17,"KEY_Hangul_Cieuc","","",null,null],[17,"KEY_Hangul_Khieuq","","",null,null],[17,"KEY_Hangul_Tieut","","",null,null],[17,"KEY_Hangul_Phieuf","","",null,null],[17,"KEY_Hangul_Hieuh","","",null,null],[17,"KEY_Hangul_A","","",null,null],[17,"KEY_Hangul_AE","","",null,null],[17,"KEY_Hangul_YA","","",null,null],[17,"KEY_Hangul_YAE","","",null,null],[17,"KEY_Hangul_EO","","",null,null],[17,"KEY_Hangul_E","","",null,null],[17,"KEY_Hangul_YEO","","",null,null],[17,"KEY_Hangul_YE","","",null,null],[17,"KEY_Hangul_O","","",null,null],[17,"KEY_Hangul_WA","","",null,null],[17,"KEY_Hangul_WAE","","",null,null],[17,"KEY_Hangul_OE","","",null,null],[17,"KEY_Hangul_YO","","",null,null],[17,"KEY_Hangul_U","","",null,null],[17,"KEY_Hangul_WEO","","",null,null],[17,"KEY_Hangul_WE","","",null,null],[17,"KEY_Hangul_WI","","",null,null],[17,"KEY_Hangul_YU","","",null,null],[17,"KEY_Hangul_EU","","",null,null],[17,"KEY_Hangul_YI","","",null,null],[17,"KEY_Hangul_I","","",null,null],[17,"KEY_Hangul_J_Kiyeog","","",null,null],[17,"KEY_Hangul_J_SsangKiyeog","","",null,null],[17,"KEY_Hangul_J_KiyeogSios","","",null,null],[17,"KEY_Hangul_J_Nieun","","",null,null],[17,"KEY_Hangul_J_NieunJieuj","","",null,null],[17,"KEY_Hangul_J_NieunHieuh","","",null,null],[17,"KEY_Hangul_J_Dikeud","","",null,null],[17,"KEY_Hangul_J_Rieul","","",null,null],[17,"KEY_Hangul_J_RieulKiyeog","","",null,null],[17,"KEY_Hangul_J_RieulMieum","","",null,null],[17,"KEY_Hangul_J_RieulPieub","","",null,null],[17,"KEY_Hangul_J_RieulSios","","",null,null],[17,"KEY_Hangul_J_RieulTieut","","",null,null],[17,"KEY_Hangul_J_RieulPhieuf","","",null,null],[17,"KEY_Hangul_J_RieulHieuh","","",null,null],[17,"KEY_Hangul_J_Mieum","","",null,null],[17,"KEY_Hangul_J_Pieub","","",null,null],[17,"KEY_Hangul_J_PieubSios","","",null,null],[17,"KEY_Hangul_J_Sios","","",null,null],[17,"KEY_Hangul_J_SsangSios","","",null,null],[17,"KEY_Hangul_J_Ieung","","",null,null],[17,"KEY_Hangul_J_Jieuj","","",null,null],[17,"KEY_Hangul_J_Cieuc","","",null,null],[17,"KEY_Hangul_J_Khieuq","","",null,null],[17,"KEY_Hangul_J_Tieut","","",null,null],[17,"KEY_Hangul_J_Phieuf","","",null,null],[17,"KEY_Hangul_J_Hieuh","","",null,null],[17,"KEY_Hangul_RieulYeorinHieuh","","",null,null],[17,"KEY_Hangul_SunkyeongeumMieum","","",null,null],[17,"KEY_Hangul_SunkyeongeumPieub","","",null,null],[17,"KEY_Hangul_PanSios","","",null,null],[17,"KEY_Hangul_KkogjiDalrinIeung","","",null,null],[17,"KEY_Hangul_SunkyeongeumPhieuf","","",null,null],[17,"KEY_Hangul_YeorinHieuh","","",null,null],[17,"KEY_Hangul_AraeA","","",null,null],[17,"KEY_Hangul_AraeAE","","",null,null],[17,"KEY_Hangul_J_PanSios","","",null,null],[17,"KEY_Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"KEY_Hangul_J_YeorinHieuh","","",null,null],[17,"KEY_Korean_Won","","",null,null],[17,"KEY_Armenian_ligature_ew","","",null,null],[17,"KEY_Armenian_full_stop","","",null,null],[17,"KEY_Armenian_verjaket","","",null,null],[17,"KEY_Armenian_separation_mark","","",null,null],[17,"KEY_Armenian_but","","",null,null],[17,"KEY_Armenian_hyphen","","",null,null],[17,"KEY_Armenian_yentamna","","",null,null],[17,"KEY_Armenian_exclam","","",null,null],[17,"KEY_Armenian_amanak","","",null,null],[17,"KEY_Armenian_accent","","",null,null],[17,"KEY_Armenian_shesht","","",null,null],[17,"KEY_Armenian_question","","",null,null],[17,"KEY_Armenian_paruyk","","",null,null],[17,"KEY_Armenian_AYB","","",null,null],[17,"KEY_Armenian_ayb","","",null,null],[17,"KEY_Armenian_BEN","","",null,null],[17,"KEY_Armenian_ben","","",null,null],[17,"KEY_Armenian_GIM","","",null,null],[17,"KEY_Armenian_gim","","",null,null],[17,"KEY_Armenian_DA","","",null,null],[17,"KEY_Armenian_da","","",null,null],[17,"KEY_Armenian_YECH","","",null,null],[17,"KEY_Armenian_yech","","",null,null],[17,"KEY_Armenian_ZA","","",null,null],[17,"KEY_Armenian_za","","",null,null],[17,"KEY_Armenian_E","","",null,null],[17,"KEY_Armenian_e","","",null,null],[17,"KEY_Armenian_AT","","",null,null],[17,"KEY_Armenian_at","","",null,null],[17,"KEY_Armenian_TO","","",null,null],[17,"KEY_Armenian_to","","",null,null],[17,"KEY_Armenian_ZHE","","",null,null],[17,"KEY_Armenian_zhe","","",null,null],[17,"KEY_Armenian_INI","","",null,null],[17,"KEY_Armenian_ini","","",null,null],[17,"KEY_Armenian_LYUN","","",null,null],[17,"KEY_Armenian_lyun","","",null,null],[17,"KEY_Armenian_KHE","","",null,null],[17,"KEY_Armenian_khe","","",null,null],[17,"KEY_Armenian_TSA","","",null,null],[17,"KEY_Armenian_tsa","","",null,null],[17,"KEY_Armenian_KEN","","",null,null],[17,"KEY_Armenian_ken","","",null,null],[17,"KEY_Armenian_HO","","",null,null],[17,"KEY_Armenian_ho","","",null,null],[17,"KEY_Armenian_DZA","","",null,null],[17,"KEY_Armenian_dza","","",null,null],[17,"KEY_Armenian_GHAT","","",null,null],[17,"KEY_Armenian_ghat","","",null,null],[17,"KEY_Armenian_TCHE","","",null,null],[17,"KEY_Armenian_tche","","",null,null],[17,"KEY_Armenian_MEN","","",null,null],[17,"KEY_Armenian_men","","",null,null],[17,"KEY_Armenian_HI","","",null,null],[17,"KEY_Armenian_hi","","",null,null],[17,"KEY_Armenian_NU","","",null,null],[17,"KEY_Armenian_nu","","",null,null],[17,"KEY_Armenian_SHA","","",null,null],[17,"KEY_Armenian_sha","","",null,null],[17,"KEY_Armenian_VO","","",null,null],[17,"KEY_Armenian_vo","","",null,null],[17,"KEY_Armenian_CHA","","",null,null],[17,"KEY_Armenian_cha","","",null,null],[17,"KEY_Armenian_PE","","",null,null],[17,"KEY_Armenian_pe","","",null,null],[17,"KEY_Armenian_JE","","",null,null],[17,"KEY_Armenian_je","","",null,null],[17,"KEY_Armenian_RA","","",null,null],[17,"KEY_Armenian_ra","","",null,null],[17,"KEY_Armenian_SE","","",null,null],[17,"KEY_Armenian_se","","",null,null],[17,"KEY_Armenian_VEV","","",null,null],[17,"KEY_Armenian_vev","","",null,null],[17,"KEY_Armenian_TYUN","","",null,null],[17,"KEY_Armenian_tyun","","",null,null],[17,"KEY_Armenian_RE","","",null,null],[17,"KEY_Armenian_re","","",null,null],[17,"KEY_Armenian_TSO","","",null,null],[17,"KEY_Armenian_tso","","",null,null],[17,"KEY_Armenian_VYUN","","",null,null],[17,"KEY_Armenian_vyun","","",null,null],[17,"KEY_Armenian_PYUR","","",null,null],[17,"KEY_Armenian_pyur","","",null,null],[17,"KEY_Armenian_KE","","",null,null],[17,"KEY_Armenian_ke","","",null,null],[17,"KEY_Armenian_O","","",null,null],[17,"KEY_Armenian_o","","",null,null],[17,"KEY_Armenian_FE","","",null,null],[17,"KEY_Armenian_fe","","",null,null],[17,"KEY_Armenian_apostrophe","","",null,null],[17,"KEY_Georgian_an","","",null,null],[17,"KEY_Georgian_ban","","",null,null],[17,"KEY_Georgian_gan","","",null,null],[17,"KEY_Georgian_don","","",null,null],[17,"KEY_Georgian_en","","",null,null],[17,"KEY_Georgian_vin","","",null,null],[17,"KEY_Georgian_zen","","",null,null],[17,"KEY_Georgian_tan","","",null,null],[17,"KEY_Georgian_in","","",null,null],[17,"KEY_Georgian_kan","","",null,null],[17,"KEY_Georgian_las","","",null,null],[17,"KEY_Georgian_man","","",null,null],[17,"KEY_Georgian_nar","","",null,null],[17,"KEY_Georgian_on","","",null,null],[17,"KEY_Georgian_par","","",null,null],[17,"KEY_Georgian_zhar","","",null,null],[17,"KEY_Georgian_rae","","",null,null],[17,"KEY_Georgian_san","","",null,null],[17,"KEY_Georgian_tar","","",null,null],[17,"KEY_Georgian_un","","",null,null],[17,"KEY_Georgian_phar","","",null,null],[17,"KEY_Georgian_khar","","",null,null],[17,"KEY_Georgian_ghan","","",null,null],[17,"KEY_Georgian_qar","","",null,null],[17,"KEY_Georgian_shin","","",null,null],[17,"KEY_Georgian_chin","","",null,null],[17,"KEY_Georgian_can","","",null,null],[17,"KEY_Georgian_jil","","",null,null],[17,"KEY_Georgian_cil","","",null,null],[17,"KEY_Georgian_char","","",null,null],[17,"KEY_Georgian_xan","","",null,null],[17,"KEY_Georgian_jhan","","",null,null],[17,"KEY_Georgian_hae","","",null,null],[17,"KEY_Georgian_he","","",null,null],[17,"KEY_Georgian_hie","","",null,null],[17,"KEY_Georgian_we","","",null,null],[17,"KEY_Georgian_har","","",null,null],[17,"KEY_Georgian_hoe","","",null,null],[17,"KEY_Georgian_fi","","",null,null],[17,"KEY_Xabovedot","","",null,null],[17,"KEY_Ibreve","","",null,null],[17,"KEY_Zstroke","","",null,null],[17,"KEY_Gcaron","","",null,null],[17,"KEY_Ocaron","","",null,null],[17,"KEY_Obarred","","",null,null],[17,"KEY_xabovedot","","",null,null],[17,"KEY_ibreve","","",null,null],[17,"KEY_zstroke","","",null,null],[17,"KEY_gcaron","","",null,null],[17,"KEY_ocaron","","",null,null],[17,"KEY_obarred","","",null,null],[17,"KEY_SCHWA","","",null,null],[17,"KEY_schwa","","",null,null],[17,"KEY_EZH","","",null,null],[17,"KEY_ezh","","",null,null],[17,"KEY_Lbelowdot","","",null,null],[17,"KEY_lbelowdot","","",null,null],[17,"KEY_Abelowdot","","",null,null],[17,"KEY_abelowdot","","",null,null],[17,"KEY_Ahook","","",null,null],[17,"KEY_ahook","","",null,null],[17,"KEY_Acircumflexacute","","",null,null],[17,"KEY_acircumflexacute","","",null,null],[17,"KEY_Acircumflexgrave","","",null,null],[17,"KEY_acircumflexgrave","","",null,null],[17,"KEY_Acircumflexhook","","",null,null],[17,"KEY_acircumflexhook","","",null,null],[17,"KEY_Acircumflextilde","","",null,null],[17,"KEY_acircumflextilde","","",null,null],[17,"KEY_Acircumflexbelowdot","","",null,null],[17,"KEY_acircumflexbelowdot","","",null,null],[17,"KEY_Abreveacute","","",null,null],[17,"KEY_abreveacute","","",null,null],[17,"KEY_Abrevegrave","","",null,null],[17,"KEY_abrevegrave","","",null,null],[17,"KEY_Abrevehook","","",null,null],[17,"KEY_abrevehook","","",null,null],[17,"KEY_Abrevetilde","","",null,null],[17,"KEY_abrevetilde","","",null,null],[17,"KEY_Abrevebelowdot","","",null,null],[17,"KEY_abrevebelowdot","","",null,null],[17,"KEY_Ebelowdot","","",null,null],[17,"KEY_ebelowdot","","",null,null],[17,"KEY_Ehook","","",null,null],[17,"KEY_ehook","","",null,null],[17,"KEY_Etilde","","",null,null],[17,"KEY_etilde","","",null,null],[17,"KEY_Ecircumflexacute","","",null,null],[17,"KEY_ecircumflexacute","","",null,null],[17,"KEY_Ecircumflexgrave","","",null,null],[17,"KEY_ecircumflexgrave","","",null,null],[17,"KEY_Ecircumflexhook","","",null,null],[17,"KEY_ecircumflexhook","","",null,null],[17,"KEY_Ecircumflextilde","","",null,null],[17,"KEY_ecircumflextilde","","",null,null],[17,"KEY_Ecircumflexbelowdot","","",null,null],[17,"KEY_ecircumflexbelowdot","","",null,null],[17,"KEY_Ihook","","",null,null],[17,"KEY_ihook","","",null,null],[17,"KEY_Ibelowdot","","",null,null],[17,"KEY_ibelowdot","","",null,null],[17,"KEY_Obelowdot","","",null,null],[17,"KEY_obelowdot","","",null,null],[17,"KEY_Ohook","","",null,null],[17,"KEY_ohook","","",null,null],[17,"KEY_Ocircumflexacute","","",null,null],[17,"KEY_ocircumflexacute","","",null,null],[17,"KEY_Ocircumflexgrave","","",null,null],[17,"KEY_ocircumflexgrave","","",null,null],[17,"KEY_Ocircumflexhook","","",null,null],[17,"KEY_ocircumflexhook","","",null,null],[17,"KEY_Ocircumflextilde","","",null,null],[17,"KEY_ocircumflextilde","","",null,null],[17,"KEY_Ocircumflexbelowdot","","",null,null],[17,"KEY_ocircumflexbelowdot","","",null,null],[17,"KEY_Ohornacute","","",null,null],[17,"KEY_ohornacute","","",null,null],[17,"KEY_Ohorngrave","","",null,null],[17,"KEY_ohorngrave","","",null,null],[17,"KEY_Ohornhook","","",null,null],[17,"KEY_ohornhook","","",null,null],[17,"KEY_Ohorntilde","","",null,null],[17,"KEY_ohorntilde","","",null,null],[17,"KEY_Ohornbelowdot","","",null,null],[17,"KEY_ohornbelowdot","","",null,null],[17,"KEY_Ubelowdot","","",null,null],[17,"KEY_ubelowdot","","",null,null],[17,"KEY_Uhook","","",null,null],[17,"KEY_uhook","","",null,null],[17,"KEY_Uhornacute","","",null,null],[17,"KEY_uhornacute","","",null,null],[17,"KEY_Uhorngrave","","",null,null],[17,"KEY_uhorngrave","","",null,null],[17,"KEY_Uhornhook","","",null,null],[17,"KEY_uhornhook","","",null,null],[17,"KEY_Uhorntilde","","",null,null],[17,"KEY_uhorntilde","","",null,null],[17,"KEY_Uhornbelowdot","","",null,null],[17,"KEY_uhornbelowdot","","",null,null],[17,"KEY_Ybelowdot","","",null,null],[17,"KEY_ybelowdot","","",null,null],[17,"KEY_Yhook","","",null,null],[17,"KEY_yhook","","",null,null],[17,"KEY_Ytilde","","",null,null],[17,"KEY_ytilde","","",null,null],[17,"KEY_Ohorn","","",null,null],[17,"KEY_ohorn","","",null,null],[17,"KEY_Uhorn","","",null,null],[17,"KEY_uhorn","","",null,null],[17,"KEY_EcuSign","","",null,null],[17,"KEY_ColonSign","","",null,null],[17,"KEY_CruzeiroSign","","",null,null],[17,"KEY_FFrancSign","","",null,null],[17,"KEY_LiraSign","","",null,null],[17,"KEY_MillSign","","",null,null],[17,"KEY_NairaSign","","",null,null],[17,"KEY_PesetaSign","","",null,null],[17,"KEY_RupeeSign","","",null,null],[17,"KEY_WonSign","","",null,null],[17,"KEY_NewSheqelSign","","",null,null],[17,"KEY_DongSign","","",null,null],[17,"KEY_EuroSign","","",null,null],[17,"KEY_zerosuperior","","",null,null],[17,"KEY_foursuperior","","",null,null],[17,"KEY_fivesuperior","","",null,null],[17,"KEY_sixsuperior","","",null,null],[17,"KEY_sevensuperior","","",null,null],[17,"KEY_eightsuperior","","",null,null],[17,"KEY_ninesuperior","","",null,null],[17,"KEY_zerosubscript","","",null,null],[17,"KEY_onesubscript","","",null,null],[17,"KEY_twosubscript","","",null,null],[17,"KEY_threesubscript","","",null,null],[17,"KEY_foursubscript","","",null,null],[17,"KEY_fivesubscript","","",null,null],[17,"KEY_sixsubscript","","",null,null],[17,"KEY_sevensubscript","","",null,null],[17,"KEY_eightsubscript","","",null,null],[17,"KEY_ninesubscript","","",null,null],[17,"KEY_partdifferential","","",null,null],[17,"KEY_emptyset","","",null,null],[17,"KEY_elementof","","",null,null],[17,"KEY_notelementof","","",null,null],[17,"KEY_containsas","","",null,null],[17,"KEY_squareroot","","",null,null],[17,"KEY_cuberoot","","",null,null],[17,"KEY_fourthroot","","",null,null],[17,"KEY_dintegral","","",null,null],[17,"KEY_tintegral","","",null,null],[17,"KEY_because","","",null,null],[17,"KEY_approxeq","","",null,null],[17,"KEY_notapproxeq","","",null,null],[17,"KEY_notidentical","","",null,null],[17,"KEY_stricteq","","",null,null],[17,"KEY_braille_dot_1","","",null,null],[17,"KEY_braille_dot_2","","",null,null],[17,"KEY_braille_dot_3","","",null,null],[17,"KEY_braille_dot_4","","",null,null],[17,"KEY_braille_dot_5","","",null,null],[17,"KEY_braille_dot_6","","",null,null],[17,"KEY_braille_dot_7","","",null,null],[17,"KEY_braille_dot_8","","",null,null],[17,"KEY_braille_dot_9","","",null,null],[17,"KEY_braille_dot_10","","",null,null],[17,"KEY_braille_blank","","",null,null],[17,"KEY_braille_dots_1","","",null,null],[17,"KEY_braille_dots_2","","",null,null],[17,"KEY_braille_dots_12","","",null,null],[17,"KEY_braille_dots_3","","",null,null],[17,"KEY_braille_dots_13","","",null,null],[17,"KEY_braille_dots_23","","",null,null],[17,"KEY_braille_dots_123","","",null,null],[17,"KEY_braille_dots_4","","",null,null],[17,"KEY_braille_dots_14","","",null,null],[17,"KEY_braille_dots_24","","",null,null],[17,"KEY_braille_dots_124","","",null,null],[17,"KEY_braille_dots_34","","",null,null],[17,"KEY_braille_dots_134","","",null,null],[17,"KEY_braille_dots_234","","",null,null],[17,"KEY_braille_dots_1234","","",null,null],[17,"KEY_braille_dots_5","","",null,null],[17,"KEY_braille_dots_15","","",null,null],[17,"KEY_braille_dots_25","","",null,null],[17,"KEY_braille_dots_125","","",null,null],[17,"KEY_braille_dots_35","","",null,null],[17,"KEY_braille_dots_135","","",null,null],[17,"KEY_braille_dots_235","","",null,null],[17,"KEY_braille_dots_1235","","",null,null],[17,"KEY_braille_dots_45","","",null,null],[17,"KEY_braille_dots_145","","",null,null],[17,"KEY_braille_dots_245","","",null,null],[17,"KEY_braille_dots_1245","","",null,null],[17,"KEY_braille_dots_345","","",null,null],[17,"KEY_braille_dots_1345","","",null,null],[17,"KEY_braille_dots_2345","","",null,null],[17,"KEY_braille_dots_12345","","",null,null],[17,"KEY_braille_dots_6","","",null,null],[17,"KEY_braille_dots_16","","",null,null],[17,"KEY_braille_dots_26","","",null,null],[17,"KEY_braille_dots_126","","",null,null],[17,"KEY_braille_dots_36","","",null,null],[17,"KEY_braille_dots_136","","",null,null],[17,"KEY_braille_dots_236","","",null,null],[17,"KEY_braille_dots_1236","","",null,null],[17,"KEY_braille_dots_46","","",null,null],[17,"KEY_braille_dots_146","","",null,null],[17,"KEY_braille_dots_246","","",null,null],[17,"KEY_braille_dots_1246","","",null,null],[17,"KEY_braille_dots_346","","",null,null],[17,"KEY_braille_dots_1346","","",null,null],[17,"KEY_braille_dots_2346","","",null,null],[17,"KEY_braille_dots_12346","","",null,null],[17,"KEY_braille_dots_56","","",null,null],[17,"KEY_braille_dots_156","","",null,null],[17,"KEY_braille_dots_256","","",null,null],[17,"KEY_braille_dots_1256","","",null,null],[17,"KEY_braille_dots_356","","",null,null],[17,"KEY_braille_dots_1356","","",null,null],[17,"KEY_braille_dots_2356","","",null,null],[17,"KEY_braille_dots_12356","","",null,null],[17,"KEY_braille_dots_456","","",null,null],[17,"KEY_braille_dots_1456","","",null,null],[17,"KEY_braille_dots_2456","","",null,null],[17,"KEY_braille_dots_12456","","",null,null],[17,"KEY_braille_dots_3456","","",null,null],[17,"KEY_braille_dots_13456","","",null,null],[17,"KEY_braille_dots_23456","","",null,null],[17,"KEY_braille_dots_123456","","",null,null],[17,"KEY_braille_dots_7","","",null,null],[17,"KEY_braille_dots_17","","",null,null],[17,"KEY_braille_dots_27","","",null,null],[17,"KEY_braille_dots_127","","",null,null],[17,"KEY_braille_dots_37","","",null,null],[17,"KEY_braille_dots_137","","",null,null],[17,"KEY_braille_dots_237","","",null,null],[17,"KEY_braille_dots_1237","","",null,null],[17,"KEY_braille_dots_47","","",null,null],[17,"KEY_braille_dots_147","","",null,null],[17,"KEY_braille_dots_247","","",null,null],[17,"KEY_braille_dots_1247","","",null,null],[17,"KEY_braille_dots_347","","",null,null],[17,"KEY_braille_dots_1347","","",null,null],[17,"KEY_braille_dots_2347","","",null,null],[17,"KEY_braille_dots_12347","","",null,null],[17,"KEY_braille_dots_57","","",null,null],[17,"KEY_braille_dots_157","","",null,null],[17,"KEY_braille_dots_257","","",null,null],[17,"KEY_braille_dots_1257","","",null,null],[17,"KEY_braille_dots_357","","",null,null],[17,"KEY_braille_dots_1357","","",null,null],[17,"KEY_braille_dots_2357","","",null,null],[17,"KEY_braille_dots_12357","","",null,null],[17,"KEY_braille_dots_457","","",null,null],[17,"KEY_braille_dots_1457","","",null,null],[17,"KEY_braille_dots_2457","","",null,null],[17,"KEY_braille_dots_12457","","",null,null],[17,"KEY_braille_dots_3457","","",null,null],[17,"KEY_braille_dots_13457","","",null,null],[17,"KEY_braille_dots_23457","","",null,null],[17,"KEY_braille_dots_123457","","",null,null],[17,"KEY_braille_dots_67","","",null,null],[17,"KEY_braille_dots_167","","",null,null],[17,"KEY_braille_dots_267","","",null,null],[17,"KEY_braille_dots_1267","","",null,null],[17,"KEY_braille_dots_367","","",null,null],[17,"KEY_braille_dots_1367","","",null,null],[17,"KEY_braille_dots_2367","","",null,null],[17,"KEY_braille_dots_12367","","",null,null],[17,"KEY_braille_dots_467","","",null,null],[17,"KEY_braille_dots_1467","","",null,null],[17,"KEY_braille_dots_2467","","",null,null],[17,"KEY_braille_dots_12467","","",null,null],[17,"KEY_braille_dots_3467","","",null,null],[17,"KEY_braille_dots_13467","","",null,null],[17,"KEY_braille_dots_23467","","",null,null],[17,"KEY_braille_dots_123467","","",null,null],[17,"KEY_braille_dots_567","","",null,null],[17,"KEY_braille_dots_1567","","",null,null],[17,"KEY_braille_dots_2567","","",null,null],[17,"KEY_braille_dots_12567","","",null,null],[17,"KEY_braille_dots_3567","","",null,null],[17,"KEY_braille_dots_13567","","",null,null],[17,"KEY_braille_dots_23567","","",null,null],[17,"KEY_braille_dots_123567","","",null,null],[17,"KEY_braille_dots_4567","","",null,null],[17,"KEY_braille_dots_14567","","",null,null],[17,"KEY_braille_dots_24567","","",null,null],[17,"KEY_braille_dots_124567","","",null,null],[17,"KEY_braille_dots_34567","","",null,null],[17,"KEY_braille_dots_134567","","",null,null],[17,"KEY_braille_dots_234567","","",null,null],[17,"KEY_braille_dots_1234567","","",null,null],[17,"KEY_braille_dots_8","","",null,null],[17,"KEY_braille_dots_18","","",null,null],[17,"KEY_braille_dots_28","","",null,null],[17,"KEY_braille_dots_128","","",null,null],[17,"KEY_braille_dots_38","","",null,null],[17,"KEY_braille_dots_138","","",null,null],[17,"KEY_braille_dots_238","","",null,null],[17,"KEY_braille_dots_1238","","",null,null],[17,"KEY_braille_dots_48","","",null,null],[17,"KEY_braille_dots_148","","",null,null],[17,"KEY_braille_dots_248","","",null,null],[17,"KEY_braille_dots_1248","","",null,null],[17,"KEY_braille_dots_348","","",null,null],[17,"KEY_braille_dots_1348","","",null,null],[17,"KEY_braille_dots_2348","","",null,null],[17,"KEY_braille_dots_12348","","",null,null],[17,"KEY_braille_dots_58","","",null,null],[17,"KEY_braille_dots_158","","",null,null],[17,"KEY_braille_dots_258","","",null,null],[17,"KEY_braille_dots_1258","","",null,null],[17,"KEY_braille_dots_358","","",null,null],[17,"KEY_braille_dots_1358","","",null,null],[17,"KEY_braille_dots_2358","","",null,null],[17,"KEY_braille_dots_12358","","",null,null],[17,"KEY_braille_dots_458","","",null,null],[17,"KEY_braille_dots_1458","","",null,null],[17,"KEY_braille_dots_2458","","",null,null],[17,"KEY_braille_dots_12458","","",null,null],[17,"KEY_braille_dots_3458","","",null,null],[17,"KEY_braille_dots_13458","","",null,null],[17,"KEY_braille_dots_23458","","",null,null],[17,"KEY_braille_dots_123458","","",null,null],[17,"KEY_braille_dots_68","","",null,null],[17,"KEY_braille_dots_168","","",null,null],[17,"KEY_braille_dots_268","","",null,null],[17,"KEY_braille_dots_1268","","",null,null],[17,"KEY_braille_dots_368","","",null,null],[17,"KEY_braille_dots_1368","","",null,null],[17,"KEY_braille_dots_2368","","",null,null],[17,"KEY_braille_dots_12368","","",null,null],[17,"KEY_braille_dots_468","","",null,null],[17,"KEY_braille_dots_1468","","",null,null],[17,"KEY_braille_dots_2468","","",null,null],[17,"KEY_braille_dots_12468","","",null,null],[17,"KEY_braille_dots_3468","","",null,null],[17,"KEY_braille_dots_13468","","",null,null],[17,"KEY_braille_dots_23468","","",null,null],[17,"KEY_braille_dots_123468","","",null,null],[17,"KEY_braille_dots_568","","",null,null],[17,"KEY_braille_dots_1568","","",null,null],[17,"KEY_braille_dots_2568","","",null,null],[17,"KEY_braille_dots_12568","","",null,null],[17,"KEY_braille_dots_3568","","",null,null],[17,"KEY_braille_dots_13568","","",null,null],[17,"KEY_braille_dots_23568","","",null,null],[17,"KEY_braille_dots_123568","","",null,null],[17,"KEY_braille_dots_4568","","",null,null],[17,"KEY_braille_dots_14568","","",null,null],[17,"KEY_braille_dots_24568","","",null,null],[17,"KEY_braille_dots_124568","","",null,null],[17,"KEY_braille_dots_34568","","",null,null],[17,"KEY_braille_dots_134568","","",null,null],[17,"KEY_braille_dots_234568","","",null,null],[17,"KEY_braille_dots_1234568","","",null,null],[17,"KEY_braille_dots_78","","",null,null],[17,"KEY_braille_dots_178","","",null,null],[17,"KEY_braille_dots_278","","",null,null],[17,"KEY_braille_dots_1278","","",null,null],[17,"KEY_braille_dots_378","","",null,null],[17,"KEY_braille_dots_1378","","",null,null],[17,"KEY_braille_dots_2378","","",null,null],[17,"KEY_braille_dots_12378","","",null,null],[17,"KEY_braille_dots_478","","",null,null],[17,"KEY_braille_dots_1478","","",null,null],[17,"KEY_braille_dots_2478","","",null,null],[17,"KEY_braille_dots_12478","","",null,null],[17,"KEY_braille_dots_3478","","",null,null],[17,"KEY_braille_dots_13478","","",null,null],[17,"KEY_braille_dots_23478","","",null,null],[17,"KEY_braille_dots_123478","","",null,null],[17,"KEY_braille_dots_578","","",null,null],[17,"KEY_braille_dots_1578","","",null,null],[17,"KEY_braille_dots_2578","","",null,null],[17,"KEY_braille_dots_12578","","",null,null],[17,"KEY_braille_dots_3578","","",null,null],[17,"KEY_braille_dots_13578","","",null,null],[17,"KEY_braille_dots_23578","","",null,null],[17,"KEY_braille_dots_123578","","",null,null],[17,"KEY_braille_dots_4578","","",null,null],[17,"KEY_braille_dots_14578","","",null,null],[17,"KEY_braille_dots_24578","","",null,null],[17,"KEY_braille_dots_124578","","",null,null],[17,"KEY_braille_dots_34578","","",null,null],[17,"KEY_braille_dots_134578","","",null,null],[17,"KEY_braille_dots_234578","","",null,null],[17,"KEY_braille_dots_1234578","","",null,null],[17,"KEY_braille_dots_678","","",null,null],[17,"KEY_braille_dots_1678","","",null,null],[17,"KEY_braille_dots_2678","","",null,null],[17,"KEY_braille_dots_12678","","",null,null],[17,"KEY_braille_dots_3678","","",null,null],[17,"KEY_braille_dots_13678","","",null,null],[17,"KEY_braille_dots_23678","","",null,null],[17,"KEY_braille_dots_123678","","",null,null],[17,"KEY_braille_dots_4678","","",null,null],[17,"KEY_braille_dots_14678","","",null,null],[17,"KEY_braille_dots_24678","","",null,null],[17,"KEY_braille_dots_124678","","",null,null],[17,"KEY_braille_dots_34678","","",null,null],[17,"KEY_braille_dots_134678","","",null,null],[17,"KEY_braille_dots_234678","","",null,null],[17,"KEY_braille_dots_1234678","","",null,null],[17,"KEY_braille_dots_5678","","",null,null],[17,"KEY_braille_dots_15678","","",null,null],[17,"KEY_braille_dots_25678","","",null,null],[17,"KEY_braille_dots_125678","","",null,null],[17,"KEY_braille_dots_35678","","",null,null],[17,"KEY_braille_dots_135678","","",null,null],[17,"KEY_braille_dots_235678","","",null,null],[17,"KEY_braille_dots_1235678","","",null,null],[17,"KEY_braille_dots_45678","","",null,null],[17,"KEY_braille_dots_145678","","",null,null],[17,"KEY_braille_dots_245678","","",null,null],[17,"KEY_braille_dots_1245678","","",null,null],[17,"KEY_braille_dots_345678","","",null,null],[17,"KEY_braille_dots_1345678","","",null,null],[17,"KEY_braille_dots_2345678","","",null,null],[17,"KEY_braille_dots_12345678","","",null,null],[17,"KEY_Sinh_ng","","",null,null],[17,"KEY_Sinh_h2","","",null,null],[17,"KEY_Sinh_a","","",null,null],[17,"KEY_Sinh_aa","","",null,null],[17,"KEY_Sinh_ae","","",null,null],[17,"KEY_Sinh_aee","","",null,null],[17,"KEY_Sinh_i","","",null,null],[17,"KEY_Sinh_ii","","",null,null],[17,"KEY_Sinh_u","","",null,null],[17,"KEY_Sinh_uu","","",null,null],[17,"KEY_Sinh_ri","","",null,null],[17,"KEY_Sinh_rii","","",null,null],[17,"KEY_Sinh_lu","","",null,null],[17,"KEY_Sinh_luu","","",null,null],[17,"KEY_Sinh_e","","",null,null],[17,"KEY_Sinh_ee","","",null,null],[17,"KEY_Sinh_ai","","",null,null],[17,"KEY_Sinh_o","","",null,null],[17,"KEY_Sinh_oo","","",null,null],[17,"KEY_Sinh_au","","",null,null],[17,"KEY_Sinh_ka","","",null,null],[17,"KEY_Sinh_kha","","",null,null],[17,"KEY_Sinh_ga","","",null,null],[17,"KEY_Sinh_gha","","",null,null],[17,"KEY_Sinh_ng2","","",null,null],[17,"KEY_Sinh_nga","","",null,null],[17,"KEY_Sinh_ca","","",null,null],[17,"KEY_Sinh_cha","","",null,null],[17,"KEY_Sinh_ja","","",null,null],[17,"KEY_Sinh_jha","","",null,null],[17,"KEY_Sinh_nya","","",null,null],[17,"KEY_Sinh_jnya","","",null,null],[17,"KEY_Sinh_nja","","",null,null],[17,"KEY_Sinh_tta","","",null,null],[17,"KEY_Sinh_ttha","","",null,null],[17,"KEY_Sinh_dda","","",null,null],[17,"KEY_Sinh_ddha","","",null,null],[17,"KEY_Sinh_nna","","",null,null],[17,"KEY_Sinh_ndda","","",null,null],[17,"KEY_Sinh_tha","","",null,null],[17,"KEY_Sinh_thha","","",null,null],[17,"KEY_Sinh_dha","","",null,null],[17,"KEY_Sinh_dhha","","",null,null],[17,"KEY_Sinh_na","","",null,null],[17,"KEY_Sinh_ndha","","",null,null],[17,"KEY_Sinh_pa","","",null,null],[17,"KEY_Sinh_pha","","",null,null],[17,"KEY_Sinh_ba","","",null,null],[17,"KEY_Sinh_bha","","",null,null],[17,"KEY_Sinh_ma","","",null,null],[17,"KEY_Sinh_mba","","",null,null],[17,"KEY_Sinh_ya","","",null,null],[17,"KEY_Sinh_ra","","",null,null],[17,"KEY_Sinh_la","","",null,null],[17,"KEY_Sinh_va","","",null,null],[17,"KEY_Sinh_sha","","",null,null],[17,"KEY_Sinh_ssha","","",null,null],[17,"KEY_Sinh_sa","","",null,null],[17,"KEY_Sinh_ha","","",null,null],[17,"KEY_Sinh_lla","","",null,null],[17,"KEY_Sinh_fa","","",null,null],[17,"KEY_Sinh_al","","",null,null],[17,"KEY_Sinh_aa2","","",null,null],[17,"KEY_Sinh_ae2","","",null,null],[17,"KEY_Sinh_aee2","","",null,null],[17,"KEY_Sinh_i2","","",null,null],[17,"KEY_Sinh_ii2","","",null,null],[17,"KEY_Sinh_u2","","",null,null],[17,"KEY_Sinh_uu2","","",null,null],[17,"KEY_Sinh_ru2","","",null,null],[17,"KEY_Sinh_e2","","",null,null],[17,"KEY_Sinh_ee2","","",null,null],[17,"KEY_Sinh_ai2","","",null,null],[17,"KEY_Sinh_o2","","",null,null],[17,"KEY_Sinh_oo2","","",null,null],[17,"KEY_Sinh_au2","","",null,null],[17,"KEY_Sinh_lu2","","",null,null],[17,"KEY_Sinh_ruu2","","",null,null],[17,"KEY_Sinh_luu2","","",null,null],[17,"KEY_Sinh_kunddaliya","","",null,null],[17,"KEY_XF86ModeLock","","",null,null],[17,"KEY_XF86MonBrightnessUp","","",null,null],[17,"KEY_XF86MonBrightnessDown","","",null,null],[17,"KEY_XF86KbdLightOnOff","","",null,null],[17,"KEY_XF86KbdBrightnessUp","","",null,null],[17,"KEY_XF86KbdBrightnessDown","","",null,null],[17,"KEY_XF86Standby","","",null,null],[17,"KEY_XF86AudioLowerVolume","","",null,null],[17,"KEY_XF86AudioMute","","",null,null],[17,"KEY_XF86AudioRaiseVolume","","",null,null],[17,"KEY_XF86AudioPlay","","",null,null],[17,"KEY_XF86AudioStop","","",null,null],[17,"KEY_XF86AudioPrev","","",null,null],[17,"KEY_XF86AudioNext","","",null,null],[17,"KEY_XF86HomePage","","",null,null],[17,"KEY_XF86Mail","","",null,null],[17,"KEY_XF86Start","","",null,null],[17,"KEY_XF86Search","","",null,null],[17,"KEY_XF86AudioRecord","","",null,null],[17,"KEY_XF86Calculator","","",null,null],[17,"KEY_XF86Memo","","",null,null],[17,"KEY_XF86ToDoList","","",null,null],[17,"KEY_XF86Calendar","","",null,null],[17,"KEY_XF86PowerDown","","",null,null],[17,"KEY_XF86ContrastAdjust","","",null,null],[17,"KEY_XF86RockerUp","","",null,null],[17,"KEY_XF86RockerDown","","",null,null],[17,"KEY_XF86RockerEnter","","",null,null],[17,"KEY_XF86Back","","",null,null],[17,"KEY_XF86Forward","","",null,null],[17,"KEY_XF86Stop","","",null,null],[17,"KEY_XF86Refresh","","",null,null],[17,"KEY_XF86PowerOff","","",null,null],[17,"KEY_XF86WakeUp","","",null,null],[17,"KEY_XF86Eject","","",null,null],[17,"KEY_XF86ScreenSaver","","",null,null],[17,"KEY_XF86WWW","","",null,null],[17,"KEY_XF86Sleep","","",null,null],[17,"KEY_XF86Favorites","","",null,null],[17,"KEY_XF86AudioPause","","",null,null],[17,"KEY_XF86AudioMedia","","",null,null],[17,"KEY_XF86MyComputer","","",null,null],[17,"KEY_XF86VendorHome","","",null,null],[17,"KEY_XF86LightBulb","","",null,null],[17,"KEY_XF86Shop","","",null,null],[17,"KEY_XF86History","","",null,null],[17,"KEY_XF86OpenURL","","",null,null],[17,"KEY_XF86AddFavorite","","",null,null],[17,"KEY_XF86HotLinks","","",null,null],[17,"KEY_XF86BrightnessAdjust","","",null,null],[17,"KEY_XF86Finance","","",null,null],[17,"KEY_XF86Community","","",null,null],[17,"KEY_XF86AudioRewind","","",null,null],[17,"KEY_XF86BackForward","","",null,null],[17,"KEY_XF86Launch0","","",null,null],[17,"KEY_XF86Launch1","","",null,null],[17,"KEY_XF86Launch2","","",null,null],[17,"KEY_XF86Launch3","","",null,null],[17,"KEY_XF86Launch4","","",null,null],[17,"KEY_XF86Launch5","","",null,null],[17,"KEY_XF86Launch6","","",null,null],[17,"KEY_XF86Launch7","","",null,null],[17,"KEY_XF86Launch8","","",null,null],[17,"KEY_XF86Launch9","","",null,null],[17,"KEY_XF86LaunchA","","",null,null],[17,"KEY_XF86LaunchB","","",null,null],[17,"KEY_XF86LaunchC","","",null,null],[17,"KEY_XF86LaunchD","","",null,null],[17,"KEY_XF86LaunchE","","",null,null],[17,"KEY_XF86LaunchF","","",null,null],[17,"KEY_XF86ApplicationLeft","","",null,null],[17,"KEY_XF86ApplicationRight","","",null,null],[17,"KEY_XF86Book","","",null,null],[17,"KEY_XF86CD","","",null,null],[17,"KEY_XF86Calculater","","",null,null],[17,"KEY_XF86Clear","","",null,null],[17,"KEY_XF86Close","","",null,null],[17,"KEY_XF86Copy","","",null,null],[17,"KEY_XF86Cut","","",null,null],[17,"KEY_XF86Display","","",null,null],[17,"KEY_XF86DOS","","",null,null],[17,"KEY_XF86Documents","","",null,null],[17,"KEY_XF86Excel","","",null,null],[17,"KEY_XF86Explorer","","",null,null],[17,"KEY_XF86Game","","",null,null],[17,"KEY_XF86Go","","",null,null],[17,"KEY_XF86iTouch","","",null,null],[17,"KEY_XF86LogOff","","",null,null],[17,"KEY_XF86Market","","",null,null],[17,"KEY_XF86Meeting","","",null,null],[17,"KEY_XF86MenuKB","","",null,null],[17,"KEY_XF86MenuPB","","",null,null],[17,"KEY_XF86MySites","","",null,null],[17,"KEY_XF86New","","",null,null],[17,"KEY_XF86News","","",null,null],[17,"KEY_XF86OfficeHome","","",null,null],[17,"KEY_XF86Open","","",null,null],[17,"KEY_XF86Option","","",null,null],[17,"KEY_XF86Paste","","",null,null],[17,"KEY_XF86Phone","","",null,null],[17,"KEY_XF86Q","","",null,null],[17,"KEY_XF86Reply","","",null,null],[17,"KEY_XF86Reload","","",null,null],[17,"KEY_XF86RotateWindows","","",null,null],[17,"KEY_XF86RotationPB","","",null,null],[17,"KEY_XF86RotationKB","","",null,null],[17,"KEY_XF86Save","","",null,null],[17,"KEY_XF86ScrollUp","","",null,null],[17,"KEY_XF86ScrollDown","","",null,null],[17,"KEY_XF86ScrollClick","","",null,null],[17,"KEY_XF86Send","","",null,null],[17,"KEY_XF86Spell","","",null,null],[17,"KEY_XF86SplitScreen","","",null,null],[17,"KEY_XF86Support","","",null,null],[17,"KEY_XF86TaskPane","","",null,null],[17,"KEY_XF86Terminal","","",null,null],[17,"KEY_XF86Tools","","",null,null],[17,"KEY_XF86Travel","","",null,null],[17,"KEY_XF86UserPB","","",null,null],[17,"KEY_XF86User1KB","","",null,null],[17,"KEY_XF86User2KB","","",null,null],[17,"KEY_XF86Video","","",null,null],[17,"KEY_XF86WheelButton","","",null,null],[17,"KEY_XF86Word","","",null,null],[17,"KEY_XF86Xfer","","",null,null],[17,"KEY_XF86ZoomIn","","",null,null],[17,"KEY_XF86ZoomOut","","",null,null],[17,"KEY_XF86Away","","",null,null],[17,"KEY_XF86Messenger","","",null,null],[17,"KEY_XF86WebCam","","",null,null],[17,"KEY_XF86MailForward","","",null,null],[17,"KEY_XF86Pictures","","",null,null],[17,"KEY_XF86Music","","",null,null],[17,"KEY_XF86Battery","","",null,null],[17,"KEY_XF86Bluetooth","","",null,null],[17,"KEY_XF86WLAN","","",null,null],[17,"KEY_XF86UWB","","",null,null],[17,"KEY_XF86AudioForward","","",null,null],[17,"KEY_XF86AudioRepeat","","",null,null],[17,"KEY_XF86AudioRandomPlay","","",null,null],[17,"KEY_XF86Subtitle","","",null,null],[17,"KEY_XF86AudioCycleTrack","","",null,null],[17,"KEY_XF86CycleAngle","","",null,null],[17,"KEY_XF86FrameBack","","",null,null],[17,"KEY_XF86FrameForward","","",null,null],[17,"KEY_XF86Time","","",null,null],[17,"KEY_XF86Select","","",null,null],[17,"KEY_XF86View","","",null,null],[17,"KEY_XF86TopMenu","","",null,null],[17,"KEY_XF86Red","","",null,null],[17,"KEY_XF86Green","","",null,null],[17,"KEY_XF86Yellow","","",null,null],[17,"KEY_XF86Blue","","",null,null],[17,"KEY_XF86Suspend","","",null,null],[17,"KEY_XF86Hibernate","","",null,null],[17,"KEY_XF86TouchpadToggle","","",null,null],[17,"KEY_XF86TouchpadOn","","",null,null],[17,"KEY_XF86TouchpadOff","","",null,null],[17,"KEY_XF86AudioMicMute","","",null,null],[17,"KEY_XF86Switch_VT_1","","",null,null],[17,"KEY_XF86Switch_VT_2","","",null,null],[17,"KEY_XF86Switch_VT_3","","",null,null],[17,"KEY_XF86Switch_VT_4","","",null,null],[17,"KEY_XF86Switch_VT_5","","",null,null],[17,"KEY_XF86Switch_VT_6","","",null,null],[17,"KEY_XF86Switch_VT_7","","",null,null],[17,"KEY_XF86Switch_VT_8","","",null,null],[17,"KEY_XF86Switch_VT_9","","",null,null],[17,"KEY_XF86Switch_VT_10","","",null,null],[17,"KEY_XF86Switch_VT_11","","",null,null],[17,"KEY_XF86Switch_VT_12","","",null,null],[17,"KEY_XF86Ungrab","","",null,null],[17,"KEY_XF86ClearGrab","","",null,null],[17,"KEY_XF86Next_VMode","","",null,null],[17,"KEY_XF86Prev_VMode","","",null,null],[17,"KEY_XF86LogWindowTree","","",null,null],[17,"KEY_XF86LogGrabInfo","","",null,null],[17,"KEY_SunFA_Grave","","",null,null],[17,"KEY_SunFA_Circum","","",null,null],[17,"KEY_SunFA_Tilde","","",null,null],[17,"KEY_SunFA_Acute","","",null,null],[17,"KEY_SunFA_Diaeresis","","",null,null],[17,"KEY_SunFA_Cedilla","","",null,null],[17,"KEY_SunF36","","",null,null],[17,"KEY_SunF37","","",null,null],[17,"KEY_SunSys_Req","","",null,null],[17,"KEY_SunPrint_Screen","","",null,null],[17,"KEY_SunCompose","","",null,null],[17,"KEY_SunAltGraph","","",null,null],[17,"KEY_SunPageUp","","",null,null],[17,"KEY_SunPageDown","","",null,null],[17,"KEY_SunUndo","","",null,null],[17,"KEY_SunAgain","","",null,null],[17,"KEY_SunFind","","",null,null],[17,"KEY_SunStop","","",null,null],[17,"KEY_SunProps","","",null,null],[17,"KEY_SunFront","","",null,null],[17,"KEY_SunCopy","","",null,null],[17,"KEY_SunOpen","","",null,null],[17,"KEY_SunPaste","","",null,null],[17,"KEY_SunCut","","",null,null],[17,"KEY_SunPowerSwitch","","",null,null],[17,"KEY_SunAudioLowerVolume","","",null,null],[17,"KEY_SunAudioMute","","",null,null],[17,"KEY_SunAudioRaiseVolume","","",null,null],[17,"KEY_SunVideoDegauss","","",null,null],[17,"KEY_SunVideoLowerBrightness","","",null,null],[17,"KEY_SunVideoRaiseBrightness","","",null,null],[17,"KEY_SunPowerSwitchShift","","",null,null],[17,"KEY_Dring_accent","","",null,null],[17,"KEY_Dcircumflex_accent","","",null,null],[17,"KEY_Dcedilla_accent","","",null,null],[17,"KEY_Dacute_accent","","",null,null],[17,"KEY_Dgrave_accent","","",null,null],[17,"KEY_Dtilde","","",null,null],[17,"KEY_Ddiaeresis","","",null,null],[17,"KEY_DRemove","","",null,null],[17,"KEY_hpClearLine","","",null,null],[17,"KEY_hpInsertLine","","",null,null],[17,"KEY_hpDeleteLine","","",null,null],[17,"KEY_hpInsertChar","","",null,null],[17,"KEY_hpDeleteChar","","",null,null],[17,"KEY_hpBackTab","","",null,null],[17,"KEY_hpKP_BackTab","","",null,null],[17,"KEY_hpModelock1","","",null,null],[17,"KEY_hpModelock2","","",null,null],[17,"KEY_hpReset","","",null,null],[17,"KEY_hpSystem","","",null,null],[17,"KEY_hpUser","","",null,null],[17,"KEY_hpmute_acute","","",null,null],[17,"KEY_hpmute_grave","","",null,null],[17,"KEY_hpmute_asciicircum","","",null,null],[17,"KEY_hpmute_diaeresis","","",null,null],[17,"KEY_hpmute_asciitilde","","",null,null],[17,"KEY_hplira","","",null,null],[17,"KEY_hpguilder","","",null,null],[17,"KEY_hpYdiaeresis","","",null,null],[17,"KEY_hpIO","","",null,null],[17,"KEY_hplongminus","","",null,null],[17,"KEY_hpblock","","",null,null],[17,"KEY_osfCopy","","",null,null],[17,"KEY_osfCut","","",null,null],[17,"KEY_osfPaste","","",null,null],[17,"KEY_osfBackTab","","",null,null],[17,"KEY_osfBackSpace","","",null,null],[17,"KEY_osfClear","","",null,null],[17,"KEY_osfEscape","","",null,null],[17,"KEY_osfAddMode","","",null,null],[17,"KEY_osfPrimaryPaste","","",null,null],[17,"KEY_osfQuickPaste","","",null,null],[17,"KEY_osfPageLeft","","",null,null],[17,"KEY_osfPageUp","","",null,null],[17,"KEY_osfPageDown","","",null,null],[17,"KEY_osfPageRight","","",null,null],[17,"KEY_osfActivate","","",null,null],[17,"KEY_osfMenuBar","","",null,null],[17,"KEY_osfLeft","","",null,null],[17,"KEY_osfUp","","",null,null],[17,"KEY_osfRight","","",null,null],[17,"KEY_osfDown","","",null,null],[17,"KEY_osfEndLine","","",null,null],[17,"KEY_osfBeginLine","","",null,null],[17,"KEY_osfEndData","","",null,null],[17,"KEY_osfBeginData","","",null,null],[17,"KEY_osfPrevMenu","","",null,null],[17,"KEY_osfNextMenu","","",null,null],[17,"KEY_osfPrevField","","",null,null],[17,"KEY_osfNextField","","",null,null],[17,"KEY_osfSelect","","",null,null],[17,"KEY_osfInsert","","",null,null],[17,"KEY_osfUndo","","",null,null],[17,"KEY_osfMenu","","",null,null],[17,"KEY_osfCancel","","",null,null],[17,"KEY_osfHelp","","",null,null],[17,"KEY_osfSelectAll","","",null,null],[17,"KEY_osfDeselectAll","","",null,null],[17,"KEY_osfReselect","","",null,null],[17,"KEY_osfExtend","","",null,null],[17,"KEY_osfRestore","","",null,null],[17,"KEY_osfDelete","","",null,null],[17,"KEY_Reset","","",null,null],[17,"KEY_System","","",null,null],[17,"KEY_User","","",null,null],[17,"KEY_ClearLine","","",null,null],[17,"KEY_InsertLine","","",null,null],[17,"KEY_DeleteLine","","",null,null],[17,"KEY_InsertChar","","",null,null],[17,"KEY_DeleteChar","","",null,null],[17,"KEY_BackTab","","",null,null],[17,"KEY_KP_BackTab","","",null,null],[17,"KEY_Ext16bit_L","","",null,null],[17,"KEY_Ext16bit_R","","",null,null],[17,"KEY_mute_acute","","",null,null],[17,"KEY_mute_grave","","",null,null],[17,"KEY_mute_asciicircum","","",null,null],[17,"KEY_mute_diaeresis","","",null,null],[17,"KEY_mute_asciitilde","","",null,null],[17,"KEY_lira","","",null,null],[17,"KEY_guilder","","",null,null],[17,"KEY_IO","","",null,null],[17,"KEY_longminus","","",null,null],[17,"KEY_block","","",null,null],[6,"Keycode","xkbcommon::xkb","A number used to represent a physical key on a keyboard.",null,null],[6,"Keysym","","A number used to represent the symbols generated from a key on a keyboard.",null,null],[6,"LayoutIndex","","Index of a keyboard layout.",null,null],[6,"LayoutMask","","A mask of layout indices",null,null],[6,"LevelIndex","","Index of a shift level.",null,null],[6,"ModIndex","","Index of a modifier.",null,null],[6,"ModMask","","A mask of modifier indices.",null,null],[6,"LedIndex","","Index of a keyboard LED.",null,null],[6,"LedMask","","A mask of LED indices.",null,null],[6,"KeysymFlags","","",null,null],[6,"ContextFlags","","Flags for context creation.",null,null],[6,"KeymapCompileFlags","","Flags for keymap compilation.",null,null],[6,"KeymapFormat","","The possible keymap formats.",null,null],[6,"StateComponent","","Modifier and layout types for state objects.  This enum is bitmaskable, e.g. (xkb::STATE_MODS_DEPRESSED | xkb::STATE_MODS_LATCHED) is valid to exclude locked modifiers.",null,null],[6,"StateMatch","","Match flags for xkb_state_mod_indices_are_active and xkb_state_mod_names_are_active, specifying how the conditions for a successful match.  xkb::STATE_MATCH_NON_EXCLUSIVE is bitmaskable with the other modes.",null,null],[17,"KEYCODE_INVALID","","",null,null],[17,"LAYOUT_INVALID","","",null,null],[17,"LEVEL_INVALID","","",null,null],[17,"MOD_INVALID","","",null,null],[17,"LED_INVALID","","",null,null],[17,"KEYCODE_MAX","","",null,null],[17,"KEYSYM_NO_FLAGS","","",null,null],[17,"KEYSYM_CASE_INSENSITIVE","","",null,null],[17,"CONTEXT_NO_FLAGS","","Do not apply any context flags.",null,null],[17,"CONTEXT_NO_DEFAULT_INCLUDES","","Create this context with an empty include path.",null,null],[17,"CONTEXT_NO_ENVIRONMENT_NAMES","","Don't take RMLVO names from the environment.",null,null],[17,"KEYMAP_COMPILE_NO_FLAGS","","Do not apply any flags.",null,null],[17,"KEYMAP_FORMAT_TEXT_V1","","The current/classic XKB text format, as generated by xkbcomp -xkb.",null,null],[17,"KEYMAP_FORMAT_USE_ORIGINAL","","Get the keymap as a string in the format from which it was created.",null,null],[17,"STATE_MODS_DEPRESSED","","Depressed modifiers, i.e. a key is physically holding them.",null,null],[17,"STATE_MODS_LATCHED","","Latched modifiers, i.e. will be unset after the next non-modifier key press.",null,null],[17,"STATE_MODS_LOCKED","","Locked modifiers, i.e. will be unset after the key provoking the lock has been pressed again.",null,null],[17,"STATE_MODS_EFFECTIVE","","Effective modifiers, i.e. currently active and affect key processing (derived from the other state components). Use this unless you explictly care how the state came about.",null,null],[17,"STATE_LAYOUT_DEPRESSED","","Depressed layout, i.e. a key is physically holding it.",null,null],[17,"STATE_LAYOUT_LATCHED","","Latched layout, i.e. will be unset after the next non-modifier key press.",null,null],[17,"STATE_LAYOUT_LOCKED","","Locked layout, i.e. will be unset after the key provoking the lock has been pressed again.",null,null],[17,"STATE_LAYOUT_EFFECTIVE","","Effective layout, i.e. currently active and affects key processing (derived from the other state components). Use this unless you explictly care how the state came about.",null,null],[17,"STATE_LEDS","","LEDs (derived from the other state components).",null,null],[17,"STATE_MATCH_ANY","","Returns true if any of the modifiers are active.",null,null],[17,"STATE_MATCH_ALL","","Returns true if all of the modifiers are active.",null,null],[17,"STATE_MATCH_NON_EXCLUSIVE","","Makes matching non-exclusive, i.e. will not return false if a modifier not specified in the arguments is active.",null,null],[17,"MOD_NAME_SHIFT","","",null,null],[17,"MOD_NAME_CAPS","","",null,null],[17,"MOD_NAME_CTRL","","",null,null],[17,"MOD_NAME_ALT","","",null,null],[17,"MOD_NAME_NUM","","",null,null],[17,"MOD_NAME_LOGO","","",null,null],[17,"LED_NAME_CAPS","","",null,null],[17,"LED_NAME_NUM","","",null,null],[17,"LED_NAME_SCROLL","","",null,null],[11,"from_raw_ptr","","contruct a context from a raw ffi pointer. This context must already been referenced as xkb_context_unref will be called at drop time",5,null],[11,"get_raw_ptr","","get the raw pointer from this context",5,null],[11,"new","","Create a new context.",5,{"inputs":[{"name":"contextflags"}],"output":{"name":"context"}}],[11,"include_path_append","","append a new entry to the context's include path returns true on success, or false if the include path could not be added or is inaccessible",5,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"include_path_append_default","","Append the default include paths to the context's include path.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"include_path_reset_defaults","","Reset the context's include path to the default.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"include_path_clear","","Remove all entries from the context's include path.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"include_paths","","get an iterator on the include paths of this context",5,{"inputs":[{"name":"self"}],"output":{"name":"contextincludepaths"}}],[11,"set_log_level","","Set the current logging level.",5,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":null}],[11,"get_log_level","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"set_log_verbosity","","Sets the current logging verbosity.",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_log_verbosity","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_raw_ptr","","",7,null],[11,"get_raw_ptr","","",7,null],[11,"new_from_names","","Create a keymap from RMLVO names.",7,{"inputs":[{"name":"context"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"option"},{"name":"keymapcompileflags"}],"output":{"name":"option"}}],[11,"new_from_file","","Create a keymap from a keymap file.",7,{"inputs":[{"name":"context"},{"name":"file"},{"name":"keymapformat"},{"name":"keymapcompileflags"}],"output":{"name":"option"}}],[11,"new_from_string","","Create a keymap from a keymap string.",7,{"inputs":[{"name":"context"},{"name":"string"},{"name":"keymapformat"},{"name":"keymapcompileflags"}],"output":{"name":"option"}}],[11,"get_as_string","","Get the compiled keymap as a string.",7,{"inputs":[{"name":"self"},{"name":"keymapformat"}],"output":{"name":"string"}}],[11,"min_keycode","","Get the minimum keycode in the keymap.",7,{"inputs":[{"name":"self"}],"output":{"name":"keycode"}}],[11,"max_keycode","","Get the maximum keycode in the keymap.",7,{"inputs":[{"name":"self"}],"output":{"name":"keycode"}}],[11,"mods","","Get an iterator to the modifiers of this keymap",7,{"inputs":[{"name":"self"}],"output":{"name":"keymapmods"}}],[11,"num_mods","","Get the number of modifiers in the keymap.",7,{"inputs":[{"name":"self"}],"output":{"name":"modindex"}}],[11,"mod_get_name","","Get the name of a modifier by index.",7,{"inputs":[{"name":"self"},{"name":"modindex"}],"output":{"name":"str"}}],[11,"mod_get_index","","Get the index of a modifier by name.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"modindex"}}],[11,"layouts","","Returns an iterator to the layouts in this keymap",7,{"inputs":[{"name":"self"}],"output":{"name":"keymaplayouts"}}],[11,"num_layouts","","Get the number of layouts in the keymap.",7,{"inputs":[{"name":"self"}],"output":{"name":"layoutindex"}}],[11,"layout_get_name","","Get the name of a layout by index.",7,{"inputs":[{"name":"self"},{"name":"layoutindex"}],"output":{"name":"str"}}],[11,"layout_get_index","","Get the index of a layout by name.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"layoutindex"}}],[11,"leds","","Returns an iterator to the leds in this keymap",7,{"inputs":[{"name":"self"}],"output":{"name":"keymapleds"}}],[11,"num_leds","","Get the number of LEDs in the keymap.",7,{"inputs":[{"name":"self"}],"output":{"name":"ledindex"}}],[11,"led_get_name","","Get the name of a LED by index.",7,{"inputs":[{"name":"self"},{"name":"ledindex"}],"output":{"name":"str"}}],[11,"led_get_index","","Get the index of a LED by name.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ledindex"}}],[11,"num_layouts_for_key","","Get the number of layouts for a specific key.",7,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"layoutindex"}}],[11,"num_levels_for_key","","Get the number of shift levels for a specific key and layout.",7,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"levelindex"}}],[11,"key_get_syms_by_level","","Get the keysyms obtained from pressing a key in a given layout and shift level.",7,null],[11,"key_repeats","","Determine whether a key should repeat or not.",7,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"keymap"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_raw_ptr","","",11,null],[11,"get_raw_ptr","","",11,null],[11,"new","","Create a new keyboard state object from a keymap.",11,{"inputs":[{"name":"keymap"}],"output":{"name":"state"}}],[11,"get_keymap","","Get the keymap which a keyboard state object is using.",11,{"inputs":[{"name":"self"}],"output":{"name":"keymap"}}],[11,"update_key","","Update the keyboard state to reflect a given key being pressed or released.",11,{"inputs":[{"name":"self"},{"name":"keycode"},{"name":"keydirection"}],"output":{"name":"statecomponent"}}],[11,"update_mask","","Update a keyboard state from a set of explicit masks.",11,{"inputs":[{"name":"self"},{"name":"modmask"},{"name":"modmask"},{"name":"modmask"},{"name":"layoutindex"},{"name":"layoutindex"},{"name":"layoutindex"}],"output":{"name":"statecomponent"}}],[11,"key_get_syms","","Get the keysyms obtained from pressing a particular key in a given keyboard state.",11,null],[11,"key_get_utf8","","Get the Unicode/UTF-8 string obtained from pressing a particular key in a given keyboard state.",11,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"string"}}],[11,"key_get_utf32","","Get the Unicode/UTF-32 codepoint obtained from pressing a particular key in a a given keyboard state.",11,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"u32"}}],[11,"key_get_one_sym","","Get the single keysym obtained from pressing a particular key in a given keyboard state.",11,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"keysym"}}],[11,"key_get_layout","","Get the effective layout index for a key in a given keyboard state.",11,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"layoutindex"}}],[11,"key_get_level","","Get the effective shift level for a key in a given keyboard state and layout.",11,{"inputs":[{"name":"self"},{"name":"keycode"},{"name":"layoutindex"}],"output":{"name":"levelindex"}}],[11,"serialize_mods","","The counterpart to xkb_state_update_mask for modifiers, to be used on the server side of serialization.",11,{"inputs":[{"name":"self"},{"name":"statecomponent"}],"output":{"name":"modmask"}}],[11,"serialize_layout","","",11,{"inputs":[{"name":"self"},{"name":"statecomponent"}],"output":{"name":"layoutindex"}}],[11,"mod_name_is_active","","Test whether a modifier is active in a given keyboard state by name.",11,{"inputs":[{"name":"self"},{"name":"s"},{"name":"statecomponent"}],"output":{"name":"bool"}}],[11,"mod_index_is_active","","Test whether a modifier is active in a given keyboard state by index.",11,{"inputs":[{"name":"self"},{"name":"modindex"},{"name":"statecomponent"}],"output":{"name":"bool"}}],[11,"mod_index_is_consumed","","Test whether a modifier is consumed by keyboard state translation for a key.",11,{"inputs":[{"name":"self"},{"name":"keycode"},{"name":"modindex"}],"output":{"name":"bool"}}],[11,"mod_mask_remove_consumed","","Remove consumed modifiers from a modifier mask for a key.",11,{"inputs":[{"name":"self"},{"name":"keycode"},{"name":"modmask"}],"output":{"name":"modmask"}}],[11,"key_get_consumed_mods","","Get the mask of modifiers consumed by translating a given key.",11,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"modmask"}}],[11,"layout_name_is_active","","Test whether a layout is active in a given keyboard state by name.",11,{"inputs":[{"name":"self"},{"name":"s"},{"name":"statecomponent"}],"output":{"name":"bool"}}],[11,"layout_index_is_active","","Test whether a layout is active in a given keyboard state by index.",11,{"inputs":[{"name":"self"},{"name":"layoutindex"},{"name":"statecomponent"}],"output":{"name":"bool"}}],[11,"led_name_is_active","","Test whether a LED is active in a given keyboard state by name.",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"led_index_is_active","","Test whether a LED is active in a given keyboard state by index.",11,{"inputs":[{"name":"self"},{"name":"ledindex"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"LogLevel"],[4,"KeyDirection"],[3,"xkb_rule_names"],[4,"xkb_log_level"],[4,"xkb_key_direction"],[3,"Context"],[3,"ContextIncludePaths"],[3,"Keymap"],[3,"KeymapMods"],[3,"KeymapLayouts"],[3,"KeymapLeds"],[3,"State"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
